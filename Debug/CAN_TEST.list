
CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c46c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  0800c600  0800c600  0001c600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2cc  0800d2cc  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2cc  0800d2cc  0001d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d4  0800d2d4  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d4  0800d2d4  0001d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2d8  0800d2d8  0001d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800d2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b8  2**0
                  CONTENTS
 10 .bss          00012f68  200002b8  200002b8  000202b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013220  20013220  000202b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ae0  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d5  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  0003a198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024578  00000000  00000000  0003b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b03  00000000  00000000  0005f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d85ba  00000000  00000000  000763d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e98d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006588  00000000  00000000  0014e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5e4 	.word	0x0800c5e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800c5e4 	.word	0x0800c5e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <__io_putchar+0x20>)
 800100a:	f002 fd94 	bl	8003b36 <HAL_UART_Transmit>
  return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200002fc 	.word	0x200002fc

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fc0f 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f841 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f925 	bl	8001278 <MX_GPIO_Init>
  MX_CAN1_Init();
 800102e:	f000 f899 	bl	8001164 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001032:	f000 f8cd 	bl	80011d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001036:	f000 f8f5 	bl	8001224 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  can_init();
 800103a:	f003 fd43 	bl	8004ac4 <can_init>
  BaseType_t   can_transmit,can_recieve;
  TaskHandle_t cant_handle,canr_handle;
  can_transmit = xTaskCreate(bms_can_transmit,"Transmit",1024,0,2,&cant_handle );
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <main+0x80>)
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <main+0x84>)
 8001050:	f005 f8e4 	bl	800621c <xTaskCreate>
 8001054:	6178      	str	r0, [r7, #20]
  configASSERT(can_transmit==pdTRUE);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d006      	beq.n	800106a <main+0x4e>
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001066:	bf00      	nop
 8001068:	e7fe      	b.n	8001068 <main+0x4c>
  can_recieve = xTaskCreate(can_recieve_task,"CAN",1024,0,1,&canr_handle );
 800106a:	463b      	mov	r3, r7
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2301      	movs	r3, #1
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	490a      	ldr	r1, [pc, #40]	; (80010a4 <main+0x88>)
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0x8c>)
 800107c:	f005 f8ce 	bl	800621c <xTaskCreate>
 8001080:	6138      	str	r0, [r7, #16]
  configASSERT(can_recieve==pdTRUE);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d006      	beq.n	8001096 <main+0x7a>
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f383 8811 	msr	BASEPRI, r3
    }
 8001092:	bf00      	nop
 8001094:	e7fe      	b.n	8001094 <main+0x78>
  vTaskStartScheduler();
 8001096:	f005 fa65 	bl	8006564 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800109a:	e7fe      	b.n	800109a <main+0x7e>
 800109c:	0800c600 	.word	0x0800c600
 80010a0:	08004bf5 	.word	0x08004bf5
 80010a4:	0800c60c 	.word	0x0800c60c
 80010a8:	08004d91 	.word	0x08004d91

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fe00 	bl	8007cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <SystemClock_Config+0xb0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <SystemClock_Config+0xb0>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <SystemClock_Config+0xb0>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <SystemClock_Config+0xb4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <SystemClock_Config+0xb4>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <SystemClock_Config+0xb4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fd46 	bl	8002bac <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001126:	f000 f8fd 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f001 ffa9 	bl	800309c <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001150:	f000 f8e8 	bl	8001324 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	; 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_CAN1_Init+0x64>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <MX_CAN1_Init+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_CAN1_Init+0x64>)
 8001170:	2202      	movs	r2, #2
 8001172:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_CAN1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_CAN1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_CAN1_Init+0x64>)
 8001182:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001186:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_CAN1_Init+0x64>)
 800118a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800118e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_CAN1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_CAN1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_CAN1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_CAN1_Init+0x64>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_CAN1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_CAN1_Init+0x64>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_CAN1_Init+0x64>)
 80011b6:	f000 fb87 	bl	80018c8 <HAL_CAN_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011c0:	f000 f8b0 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200002d4 	.word	0x200002d4
 80011cc:	40006400 	.word	0x40006400

080011d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_USART1_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART1_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART1_UART_Init+0x4c>)
 8001208:	f002 fc48 	bl	8003a9c <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001212:	f000 f887 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002fc 	.word	0x200002fc
 8001220:	40011000 	.word	0x40011000

08001224 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART2_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x4c>)
 800125c:	f002 fc1e 	bl	8003a9c <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f85d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000340 	.word	0x20000340
 8001274:	40004400 	.word	0x40004400

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_GPIO_Init+0x84>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <MX_GPIO_Init+0x84>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_GPIO_Init+0x84>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_GPIO_Init+0x84>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <MX_GPIO_Init+0x84>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_GPIO_Init+0x84>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <MX_GPIO_Init+0x84>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_GPIO_Init+0x84>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <MX_GPIO_Init+0x84>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_GPIO_Init+0x84>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001312:	f000 fab9 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40001000 	.word	0x40001000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_CAN_MspInit+0x94>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d134      	bne.n	800140c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_CAN_MspInit+0x98>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013ec:	2309      	movs	r3, #9
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <HAL_CAN_MspInit+0x9c>)
 80013f8:	f001 fa3c 	bl	8002874 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	210f      	movs	r1, #15
 8001400:	2014      	movs	r0, #20
 8001402:	f001 f97b 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001406:	2014      	movs	r0, #20
 8001408:	f001 f994 	bl	8002734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40006400 	.word	0x40006400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020400 	.word	0x40020400

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_UART_MspInit+0x108>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d135      	bne.n	80014ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_UART_MspInit+0x10c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <HAL_UART_MspInit+0x10c>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_UART_MspInit+0x10c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_UART_MspInit+0x10c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a31      	ldr	r2, [pc, #196]	; (800152c <HAL_UART_MspInit+0x10c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_UART_MspInit+0x10c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4826      	ldr	r0, [pc, #152]	; (8001530 <HAL_UART_MspInit+0x110>)
 8001498:	f001 f9ec 	bl	8002874 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2025      	movs	r0, #37	; 0x25
 80014a2:	f001 f92b 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014a6:	2025      	movs	r0, #37	; 0x25
 80014a8:	f001 f944 	bl	8002734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ac:	e038      	b.n	8001520 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_UART_MspInit+0x114>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d133      	bne.n	8001520 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0x10c>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f0:	230c      	movs	r3, #12
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001500:	2307      	movs	r3, #7
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0x110>)
 800150c:	f001 f9b2 	bl	8002874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2026      	movs	r0, #38	; 0x26
 8001516:	f001 f8f1 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800151a:	2026      	movs	r0, #38	; 0x26
 800151c:	f001 f90a 	bl	8002734 <HAL_NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40004400 	.word	0x40004400

08001538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_InitTick+0xe4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_InitTick+0xe4>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_InitTick+0xe4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001564:	f107 0210 	add.w	r2, r7, #16
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f001 ffb4 	bl	80034dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157e:	f001 ff85 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8001582:	6378      	str	r0, [r7, #52]	; 0x34
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001586:	f001 ff81 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 800158a:	4603      	mov	r3, r0
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_InitTick+0xe8>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3b01      	subs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_InitTick+0xec>)
 80015a0:	4a21      	ldr	r2, [pc, #132]	; (8001628 <HAL_InitTick+0xf0>)
 80015a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_InitTick+0xec>)
 80015a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_InitTick+0xec>)
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_InitTick+0xec>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_InitTick+0xec>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_InitTick+0xec>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015c4:	4817      	ldr	r0, [pc, #92]	; (8001624 <HAL_InitTick+0xec>)
 80015c6:	f001 ffbb 	bl	8003540 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11b      	bne.n	8001610 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <HAL_InitTick+0xec>)
 80015da:	f002 f80b 	bl	80035f4 <HAL_TIM_Base_Start_IT>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ec:	2036      	movs	r0, #54	; 0x36
 80015ee:	f001 f8a1 	bl	8002734 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d808      	bhi.n	800160a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2036      	movs	r0, #54	; 0x36
 80015fe:	f001 f87d 	bl	80026fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_InitTick+0xf4>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e002      	b.n	8001610 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001610:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001614:	4618      	mov	r0, r3
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	431bde83 	.word	0x431bde83
 8001624:	20000384 	.word	0x20000384
 8001628:	40001000 	.word	0x40001000
 800162c:	20000004 	.word	0x20000004

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <CAN1_RX0_IRQHandler+0x10>)
 8001662:	f000 fd64 	bl	800212e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002d4 	.word	0x200002d4

08001670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART1_IRQHandler+0x10>)
 8001676:	f002 faf1 	bl	8003c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002fc 	.word	0x200002fc

08001684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <USART2_IRQHandler+0x10>)
 800168a:	f002 fae7 	bl	8003c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000340 	.word	0x20000340

08001698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM6_DAC_IRQHandler+0x10>)
 800169e:	f002 f819 	bl	80036d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000384 	.word	0x20000384

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_kill>:

int _kill(int pid, int sig)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016c6:	f006 fac3 	bl	8007c50 <__errno>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2216      	movs	r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
	return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_exit>:

void _exit (int status)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffe7 	bl	80016bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ee:	e7fe      	b.n	80016ee <_exit+0x12>

080016f0 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
	}

return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc57 	bl	8000ff8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
	}
	return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:



int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178a:	605a      	str	r2, [r3, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f006 fa1d 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fbfb 	bl	800101c <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8001834:	0800d2dc 	.word	0x0800d2dc
  ldr r2, =_sbss
 8001838:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 800183c:	20013220 	.word	0x20013220

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 ff3a 	bl	80026e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fe60 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fd5a 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	200003cc 	.word	0x200003cc

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200003cc 	.word	0x200003cc

080018c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0ed      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fd4a 	bl	8001380 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff ffd8 	bl	80018b0 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001902:	e012      	b.n	800192a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001904:	f7ff ffd4 	bl	80018b0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d90b      	bls.n	800192a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2205      	movs	r2, #5
 8001922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0c5      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0e5      	beq.n	8001904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0202 	bic.w	r2, r2, #2
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff ffb2 	bl	80018b0 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800194e:	e012      	b.n	8001976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001950:	f7ff ffae 	bl	80018b0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90b      	bls.n	8001976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e09f      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e5      	bne.n	8001950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d108      	bne.n	800199e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e007      	b.n	80019ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7e5b      	ldrb	r3, [r3, #25]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e9b      	ldrb	r3, [r3, #26]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0220 	bic.w	r2, r2, #32
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7edb      	ldrb	r3, [r3, #27]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0210 	bic.w	r2, r2, #16
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0210 	orr.w	r2, r2, #16
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7f1b      	ldrb	r3, [r3, #28]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0208 	bic.w	r2, r2, #8
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f5b      	ldrb	r3, [r3, #29]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0204 	orr.w	r2, r2, #4
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	ea42 0103 	orr.w	r1, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad8:	7cfb      	ldrb	r3, [r7, #19]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_ConfigFilter+0x26>
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	f040 80be 	bne.w	8001c62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d123      	bne.n	8001b90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3248      	adds	r2, #72	; 0x48
 8001b70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b86:	6979      	ldr	r1, [r7, #20]
 8001b88:	3348      	adds	r3, #72	; 0x48
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d122      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3248      	adds	r2, #72	; 0x48
 8001bbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd4:	6979      	ldr	r1, [r7, #20]
 8001bd6:	3348      	adds	r3, #72	; 0x48
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c54:	f023 0201 	bic.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e006      	b.n	8001c70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40006400 	.word	0x40006400

08001c80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d12e      	bne.n	8001cf2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff fe00 	bl	80018b0 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb2:	e012      	b.n	8001cda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb4:	f7ff fdfc 	bl	80018b0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	d90b      	bls.n	8001cda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e012      	b.n	8001d00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e006      	b.n	8001d00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d003      	beq.n	8001d34 <HAL_CAN_AddTxMessage+0x2c>
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	f040 80b8 	bne.w	8001ea4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80a0 	beq.w	8001e94 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	0e1b      	lsrs	r3, r3, #24
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d907      	bls.n	8001d74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e09e      	b.n	8001eb2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d74:	2201      	movs	r2, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	6809      	ldr	r1, [r1, #0]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e00f      	b.n	8001dc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001db6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3318      	adds	r3, #24
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	440b      	add	r3, r1
 8001dc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3318      	adds	r3, #24
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d111      	bne.n	8001e02 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3318      	adds	r3, #24
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6811      	ldr	r1, [r2, #0]
 8001df2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3318      	adds	r3, #24
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3304      	adds	r3, #4
 8001e00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3307      	adds	r3, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	061a      	lsls	r2, r3, #24
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3306      	adds	r3, #6
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3305      	adds	r3, #5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	3204      	adds	r2, #4
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	4610      	mov	r0, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	ea43 0200 	orr.w	r2, r3, r0
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	061a      	lsls	r2, r3, #24
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3302      	adds	r3, #2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4313      	orrs	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	6811      	ldr	r1, [r2, #0]
 8001e60:	ea43 0200 	orr.w	r2, r3, r0
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e6e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3318      	adds	r3, #24
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3318      	adds	r3, #24
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e00e      	b.n	8001eb2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e006      	b.n	8001eb2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b087      	sub	sp, #28
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d003      	beq.n	8001ee2 <HAL_CAN_GetRxMessage+0x24>
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f040 80f3 	bne.w	80020c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10e      	bne.n	8001f06 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0e7      	b.n	80020d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0d8      	b.n	80020d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	331b      	adds	r3, #27
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0204 	and.w	r2, r3, #4
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	331b      	adds	r3, #27
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0d5b      	lsrs	r3, r3, #21
 8001f52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	331b      	adds	r3, #27
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	331b      	adds	r3, #27
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0202 	and.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	331b      	adds	r3, #27
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 020f 	and.w	r2, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	331b      	adds	r3, #27
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4413      	add	r3, r2
 8001fae:	3304      	adds	r3, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	331b      	adds	r3, #27
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0a1a      	lsrs	r2, r3, #8
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0c1a      	lsrs	r2, r3, #16
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3302      	adds	r3, #2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4413      	add	r3, r2
 8002026:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e1a      	lsrs	r2, r3, #24
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3303      	adds	r3, #3
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	4413      	add	r3, r2
 8002040:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3304      	adds	r3, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0a1a      	lsrs	r2, r3, #8
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3305      	adds	r3, #5
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4413      	add	r3, r2
 8002072:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0c1a      	lsrs	r2, r3, #16
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	3306      	adds	r3, #6
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e1a      	lsrs	r2, r3, #24
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	3307      	adds	r3, #7
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d108      	bne.n	80020b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0220 	orr.w	r2, r2, #32
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e007      	b.n	80020c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e006      	b.n	80020d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d002      	beq.n	8002100 <HAL_CAN_ActivateNotification+0x1e>
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d109      	bne.n	8002114 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6959      	ldr	r1, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e006      	b.n	8002122 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b08a      	sub	sp, #40	; 0x28
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d07c      	beq.n	800226e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f983 	bl	800249c <HAL_CAN_TxMailbox0CompleteCallback>
 8002196:	e016      	b.n	80021c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	e00c      	b.n	80021c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e002      	b.n	80021c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f989 	bl	80024d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d024      	beq.n	800221a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f963 	bl	80024b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ea:	e016      	b.n	800221a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	e00c      	b.n	800221a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e002      	b.n	800221a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f969 	bl	80024ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d024      	beq.n	800226e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800222c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f943 	bl	80024c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800223e:	e016      	b.n	800226e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e00c      	b.n	800226e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e002      	b.n	800226e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f949 	bl	8002500 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2210      	movs	r2, #16
 8002290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2208      	movs	r2, #8
 80022ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f930 	bl	8002514 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f002 fd11 	bl	8004cf4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00c      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2210      	movs	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2208      	movs	r2, #8
 8002310:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f912 	bl	800253c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f8f9 	bl	8002528 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2210      	movs	r2, #16
 8002350:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8fc 	bl	8002550 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2208      	movs	r2, #8
 8002372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8f5 	bl	8002564 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d07b      	beq.n	800247c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d072      	beq.n	8002474 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d043      	beq.n	8002474 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03e      	beq.n	8002474 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023fc:	2b60      	cmp	r3, #96	; 0x60
 80023fe:	d02b      	beq.n	8002458 <HAL_CAN_IRQHandler+0x32a>
 8002400:	2b60      	cmp	r3, #96	; 0x60
 8002402:	d82e      	bhi.n	8002462 <HAL_CAN_IRQHandler+0x334>
 8002404:	2b50      	cmp	r3, #80	; 0x50
 8002406:	d022      	beq.n	800244e <HAL_CAN_IRQHandler+0x320>
 8002408:	2b50      	cmp	r3, #80	; 0x50
 800240a:	d82a      	bhi.n	8002462 <HAL_CAN_IRQHandler+0x334>
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d019      	beq.n	8002444 <HAL_CAN_IRQHandler+0x316>
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d826      	bhi.n	8002462 <HAL_CAN_IRQHandler+0x334>
 8002414:	2b30      	cmp	r3, #48	; 0x30
 8002416:	d010      	beq.n	800243a <HAL_CAN_IRQHandler+0x30c>
 8002418:	2b30      	cmp	r3, #48	; 0x30
 800241a:	d822      	bhi.n	8002462 <HAL_CAN_IRQHandler+0x334>
 800241c:	2b10      	cmp	r3, #16
 800241e:	d002      	beq.n	8002426 <HAL_CAN_IRQHandler+0x2f8>
 8002420:	2b20      	cmp	r3, #32
 8002422:	d005      	beq.n	8002430 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002424:	e01d      	b.n	8002462 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800242e:	e019      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002438:	e014      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002442:	e00f      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800244c:	e00a      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002456:	e005      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002460:	e000      	b.n	8002464 <HAL_CAN_IRQHandler+0x336>
            break;
 8002462:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2204      	movs	r2, #4
 800247a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f872 	bl	8002578 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff4c 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270e:	f7ff ff61 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002712:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7ff ffb1 	bl	8002680 <NVIC_EncodePriority>
 800271e:	4602      	mov	r2, r0
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff80 	bl	800262c <__NVIC_SetPriority>
}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff54 	bl	80025f0 <__NVIC_EnableIRQ>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800275e:	f7ff f8a7 	bl	80018b0 <HAL_GetTick>
 8002762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e052      	b.n	8002828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0216 	bic.w	r2, r2, #22
 8002790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_DMA_Abort+0x62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d2:	e013      	b.n	80027fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d4:	f7ff f86c 	bl	80018b0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d90c      	bls.n	80027fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e015      	b.n	8002828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e4      	bne.n	80027d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	223f      	movs	r2, #63	; 0x3f
 8002810:	409a      	lsls	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00c      	b.n	8002868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2205      	movs	r2, #5
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e16b      	b.n	8002b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 815a 	bne.w	8002b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d130      	bne.n	8002928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80b4 	beq.w	8002b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a5f      	ldr	r2, [pc, #380]	; (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <HAL_GPIO_Init+0x310>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_GPIO_Init+0x314>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_GPIO_Init+0x318>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d025      	beq.n	8002a96 <HAL_GPIO_Init+0x222>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <HAL_GPIO_Init+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01f      	beq.n	8002a92 <HAL_GPIO_Init+0x21e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x21a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4e      	ldr	r2, [pc, #312]	; (8002b98 <HAL_GPIO_Init+0x324>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x216>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4d      	ldr	r2, [pc, #308]	; (8002b9c <HAL_GPIO_Init+0x328>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ba0 <HAL_GPIO_Init+0x32c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x20a>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e00e      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	; (8002b84 <HAL_GPIO_Init+0x310>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f ae90 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e267      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b7e      	ldr	r3, [pc, #504]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05b      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d157      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e242      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x74>
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6c      	ldr	r2, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c44:	4b69      	ldr	r3, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a68      	ldr	r2, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fe24 	bl	80018b0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fe20 	bl	80018b0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e207      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xc0>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fe10 	bl	80018b0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fe0c 	bl	80018b0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1f3      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0xe8>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1c7      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4937      	ldr	r1, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fdc5 	bl	80018b0 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fdc1 	bl	80018b0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1a8      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4925      	ldr	r1, [pc, #148]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fda4 	bl	80018b0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fda0 	bl	80018b0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e187      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fd84 	bl	80018b0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fd80 	bl	80018b0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e167      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x200>
 8002dca:	e01b      	b.n	8002e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fd6d 	bl	80018b0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e00e      	b.n	8002df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe fd69 	bl	80018b0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d907      	bls.n	8002df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e150      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	42470000 	.word	0x42470000
 8002df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ea      	bne.n	8002dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8097 	beq.w	8002f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	4b7d      	ldr	r3, [pc, #500]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b7a      	ldr	r3, [pc, #488]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a73      	ldr	r2, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fd29 	bl	80018b0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe fd25 	bl	80018b0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e10c      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
 8002e88:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x30c>
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a5b      	ldr	r2, [pc, #364]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002eb8:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a57      	ldr	r2, [pc, #348]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a54      	ldr	r2, [pc, #336]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fcea 	bl	80018b0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fce6 	bl	80018b0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0cb      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fcd4 	bl	80018b0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fcd0 	bl	80018b0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0b5      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f22:	4b3e      	ldr	r3, [pc, #248]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a1 	beq.w	800308c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d05c      	beq.n	8003010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d141      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fca4 	bl	80018b0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fca0 	bl	80018b0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e087      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	491b      	ldr	r1, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe fc79 	bl	80018b0 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe fc75 	bl	80018b0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e05c      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x416>
 8002fe0:	e054      	b.n	800308c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fc62 	bl	80018b0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fc5e 	bl	80018b0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e045      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
 800300e:	e03d      	b.n	800308c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e038      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
 8003024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x4ec>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d028      	beq.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d121      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d11a      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	4293      	cmp	r3, r2
 8003062:	d111      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d107      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0cc      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d90c      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0b8      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f0:	4b59      	ldr	r3, [pc, #356]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a52      	ldr	r2, [pc, #328]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	494d      	ldr	r1, [pc, #308]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d044      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d119      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e067      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4934      	ldr	r1, [pc, #208]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe fb90 	bl	80018b0 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fb8c 	bl	80018b0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20c      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e032      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4916      	ldr	r1, [pc, #88]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	490e      	ldr	r1, [pc, #56]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003222:	f000 f821 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003226:	4602      	mov	r2, r0
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	5ccb      	ldrb	r3, [r1, r3]
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f978 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00
 8003258:	40023800 	.word	0x40023800
 800325c:	0800ce04 	.word	0x0800ce04
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800326c:	b094      	sub	sp, #80	; 0x50
 800326e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
 8003274:	2300      	movs	r3, #0
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003280:	4b79      	ldr	r3, [pc, #484]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b08      	cmp	r3, #8
 800328a:	d00d      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x40>
 800328c:	2b08      	cmp	r3, #8
 800328e:	f200 80e1 	bhi.w	8003454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x34>
 8003296:	2b04      	cmp	r3, #4
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800329a:	e0db      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800329c:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_GetSysClockFreq+0x204>)
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032a0:	e0db      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a2:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCC_GetSysClockFreq+0x208>)
 80032a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a6:	e0d8      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a8:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b2:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	099b      	lsrs	r3, r3, #6
 80032c4:	2200      	movs	r2, #0
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30
 80032d2:	2300      	movs	r3, #0
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
 80032d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032da:	4622      	mov	r2, r4
 80032dc:	462b      	mov	r3, r5
 80032de:	f04f 0000 	mov.w	r0, #0
 80032e2:	f04f 0100 	mov.w	r1, #0
 80032e6:	0159      	lsls	r1, r3, #5
 80032e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ec:	0150      	lsls	r0, r2, #5
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4621      	mov	r1, r4
 80032f4:	1a51      	subs	r1, r2, r1
 80032f6:	6139      	str	r1, [r7, #16]
 80032f8:	4629      	mov	r1, r5
 80032fa:	eb63 0301 	sbc.w	r3, r3, r1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800330c:	4659      	mov	r1, fp
 800330e:	018b      	lsls	r3, r1, #6
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003316:	4651      	mov	r1, sl
 8003318:	018a      	lsls	r2, r1, #6
 800331a:	4651      	mov	r1, sl
 800331c:	ebb2 0801 	subs.w	r8, r2, r1
 8003320:	4659      	mov	r1, fp
 8003322:	eb63 0901 	sbc.w	r9, r3, r1
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333a:	4690      	mov	r8, r2
 800333c:	4699      	mov	r9, r3
 800333e:	4623      	mov	r3, r4
 8003340:	eb18 0303 	adds.w	r3, r8, r3
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	462b      	mov	r3, r5
 8003348:	eb49 0303 	adc.w	r3, r9, r3
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800335a:	4629      	mov	r1, r5
 800335c:	024b      	lsls	r3, r1, #9
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003364:	4621      	mov	r1, r4
 8003366:	024a      	lsls	r2, r1, #9
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
 8003372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003378:	f7fd fc86 	bl	8000c88 <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003384:	e058      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	2200      	movs	r2, #0
 800338e:	4618      	mov	r0, r3
 8003390:	4611      	mov	r1, r2
 8003392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	0159      	lsls	r1, r3, #5
 80033ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b2:	0150      	lsls	r0, r2, #5
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4641      	mov	r1, r8
 80033ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80033be:	4649      	mov	r1, r9
 80033c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d8:	ebb2 040a 	subs.w	r4, r2, sl
 80033dc:	eb63 050b 	sbc.w	r5, r3, fp
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	00eb      	lsls	r3, r5, #3
 80033ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ee:	00e2      	lsls	r2, r4, #3
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4643      	mov	r3, r8
 80033f6:	18e3      	adds	r3, r4, r3
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	464b      	mov	r3, r9
 80033fc:	eb45 0303 	adc.w	r3, r5, r3
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800340e:	4629      	mov	r1, r5
 8003410:	028b      	lsls	r3, r1, #10
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003418:	4621      	mov	r1, r4
 800341a:	028a      	lsls	r2, r1, #10
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003422:	2200      	movs	r2, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	61fa      	str	r2, [r7, #28]
 8003428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342c:	f7fd fc2c 	bl	8000c88 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_GetSysClockFreq+0x200>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800344a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003452:	e002      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetSysClockFreq+0x204>)
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800345c:	4618      	mov	r0, r3
 800345e:	3750      	adds	r7, #80	; 0x50
 8003460:	46bd      	mov	sp, r7
 8003462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003490:	f7ff fff0 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	0800ce14 	.word	0x0800ce14

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b8:	f7ff ffdc 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	0800ce14 	.word	0x0800ce14

080034dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	220f      	movs	r2, #15
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_GetClockConfig+0x5c>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCC_GetClockConfig+0x60>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0207 	and.w	r2, r3, #7
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	40023c00 	.word	0x40023c00

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e041      	b.n	80035d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f839 	bl	80035de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 f9d8 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04e      	b.n	80036aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d01d      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_TIM_Base_Start_IT+0xc8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d010      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e007      	b.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800

080036d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0202 	mvn.w	r2, #2
 8003700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f8ee 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8e0 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8f1 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0204 	mvn.w	r2, #4
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8c4 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8b6 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8c7 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0208 	mvn.w	r2, #8
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f89a 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88c 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f89d 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0210 	mvn.w	r2, #16
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2208      	movs	r2, #8
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f870 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f862 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f873 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0201 	mvn.w	r2, #1
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fd54 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f902 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f838 	bl	8003920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0220 	mvn.w	r2, #32
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8cc 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d027      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	40001c00 	.word	0x40001c00
 8003a70:	40002000 	.word	0x40002000

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e03f      	b.n	8003b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fcac 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fd7b 	bl	80045dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d17c      	bne.n	8003c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_Transmit+0x2c>
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e075      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit+0x3e>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e06e      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2221      	movs	r2, #33	; 0x21
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fe91 	bl	80018b0 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bc8:	e02a      	b.n	8003c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 faf9 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cf      	bne.n	8003bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fac9 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b0ba      	sub	sp, #232	; 0xe8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x66>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fbd3 	bl	8004466 <UART_Receive_IT>
      return;
 8003cc0:	e256      	b.n	8004170 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80de 	beq.w	8003e88 <HAL_UART_IRQHandler+0x22c>
 8003ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80d1 	beq.w	8003e88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_UART_IRQHandler+0xae>
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_UART_IRQHandler+0xd2>
 8003d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f043 0202 	orr.w	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_UART_IRQHandler+0xf6>
 8003d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d011      	beq.n	8003d82 <HAL_UART_IRQHandler+0x126>
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0208 	orr.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 81ed 	beq.w	8004166 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x14e>
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb5e 	bl	8004466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x17a>
 8003dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04f      	beq.n	8003e76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa66 	bl	80042a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d141      	bne.n	8003e6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1d9      	bne.n	8003dea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	4a7d      	ldr	r2, [pc, #500]	; (8004038 <HAL_UART_IRQHandler+0x3dc>)
 8003e44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fcf0 	bl	8002830 <HAL_DMA_Abort_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	e00e      	b.n	8003e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f99a 	bl	80041a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e00a      	b.n	8003e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f996 	bl	80041a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e006      	b.n	8003e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f992 	bl	80041a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e82:	e170      	b.n	8004166 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	bf00      	nop
    return;
 8003e86:	e16e      	b.n	8004166 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	f040 814a 	bne.w	8004126 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8143 	beq.w	8004126 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 813c 	beq.w	8004126 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	f040 80b4 	bne.w	800403c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8140 	beq.w	800416a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	f080 8139 	bcs.w	800416a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	f000 8088 	beq.w	800401e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1d9      	bne.n	8003f0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e1      	bne.n	8003f5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e3      	bne.n	8003f96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004000:	65ba      	str	r2, [r7, #88]	; 0x58
 8004002:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800400e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e3      	bne.n	8003fdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fb99 	bl	8002750 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004026:	b29b      	uxth	r3, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	b29b      	uxth	r3, r3
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8c0 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004034:	e099      	b.n	800416a <HAL_UART_IRQHandler+0x50e>
 8004036:	bf00      	nop
 8004038:	0800436f 	.word	0x0800436f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004044:	b29b      	uxth	r3, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 808b 	beq.w	800416e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8086 	beq.w	800416e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004086:	647a      	str	r2, [r7, #68]	; 0x44
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800408c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	623b      	str	r3, [r7, #32]
   return(result);
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040be:	633a      	str	r2, [r7, #48]	; 0x30
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e3      	bne.n	800409a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004104:	61fa      	str	r2, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	617b      	str	r3, [r7, #20]
   return(result);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e3      	bne.n	80040e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f848 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004124:	e023      	b.n	800416e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_UART_IRQHandler+0x4ea>
 8004132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f929 	bl	8004396 <UART_Transmit_IT>
    return;
 8004144:	e014      	b.n	8004170 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00e      	beq.n	8004170 <HAL_UART_IRQHandler+0x514>
 8004152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f969 	bl	8004436 <UART_EndTransmit_IT>
    return;
 8004164:	e004      	b.n	8004170 <HAL_UART_IRQHandler+0x514>
    return;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_UART_IRQHandler+0x514>
      return;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_UART_IRQHandler+0x514>
      return;
 800416e:	bf00      	nop
  }
}
 8004170:	37e8      	adds	r7, #232	; 0xe8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop

08004178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b090      	sub	sp, #64	; 0x40
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041dc:	e050      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d04c      	beq.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0x30>
 80041ec:	f7fd fb60 	bl	80018b0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d241      	bcs.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800421c:	637a      	str	r2, [r7, #52]	; 0x34
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004250:	623a      	str	r2, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	61bb      	str	r3, [r7, #24]
   return(result);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e00f      	b.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	d09f      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3740      	adds	r7, #64	; 0x40
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b095      	sub	sp, #84	; 0x54
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d0:	643a      	str	r2, [r7, #64]	; 0x40
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d119      	bne.n	8004354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	647b      	str	r3, [r7, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004340:	61ba      	str	r2, [r7, #24]
 8004342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6979      	ldr	r1, [r7, #20]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	613b      	str	r3, [r7, #16]
   return(result);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004362:	bf00      	nop
 8004364:	3754      	adds	r7, #84	; 0x54
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff ff09 	bl	80041a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b21      	cmp	r3, #33	; 0x21
 80043a8:	d13e      	bne.n	8004428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d114      	bne.n	80043de <UART_Transmit_IT+0x48>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	1c9a      	adds	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]
 80043dc:	e008      	b.n	80043f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6211      	str	r1, [r2, #32]
 80043e8:	781a      	ldrb	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fe8e 	bl	8004178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08c      	sub	sp, #48	; 0x30
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b22      	cmp	r3, #34	; 0x22
 8004478:	f040 80ab 	bne.w	80045d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	d117      	bne.n	80044b6 <UART_Receive_IT+0x50>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d113      	bne.n	80044b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	1c9a      	adds	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
 80044b4:	e026      	b.n	8004504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c8:	d007      	beq.n	80044da <UART_Receive_IT+0x74>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <UART_Receive_IT+0x82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e008      	b.n	80044fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004514:	2b00      	cmp	r3, #0
 8004516:	d15a      	bne.n	80045ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0220 	bic.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2b01      	cmp	r3, #1
 8004556:	d135      	bne.n	80045c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	613b      	str	r3, [r7, #16]
   return(result);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	623a      	str	r2, [r7, #32]
 8004580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	69f9      	ldr	r1, [r7, #28]
 8004584:	6a3a      	ldr	r2, [r7, #32]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	61bb      	str	r3, [r7, #24]
   return(result);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d10a      	bne.n	80045b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fdf9 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
 80045c2:	e002      	b.n	80045ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fde1 	bl	800418c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e002      	b.n	80045d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b0c0      	sub	sp, #256	; 0x100
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	68d9      	ldr	r1, [r3, #12]
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	ea40 0301 	orr.w	r3, r0, r1
 8004604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004634:	f021 010c 	bic.w	r1, r1, #12
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004642:	430b      	orrs	r3, r1
 8004644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	6999      	ldr	r1, [r3, #24]
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	ea40 0301 	orr.w	r3, r0, r1
 8004662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b8f      	ldr	r3, [pc, #572]	; (80048a8 <UART_SetConfig+0x2cc>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d005      	beq.n	800467c <UART_SetConfig+0xa0>
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b8d      	ldr	r3, [pc, #564]	; (80048ac <UART_SetConfig+0x2d0>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d104      	bne.n	8004686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800467c:	f7fe ff1a 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8004680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004684:	e003      	b.n	800468e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004686:	f7fe ff01 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 800468a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004698:	f040 810c 	bne.w	80048b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80046b6:	415b      	adcs	r3, r3
 80046b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046be:	4621      	mov	r1, r4
 80046c0:	eb12 0801 	adds.w	r8, r2, r1
 80046c4:	4629      	mov	r1, r5
 80046c6:	eb43 0901 	adc.w	r9, r3, r1
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046de:	4690      	mov	r8, r2
 80046e0:	4699      	mov	r9, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	eb18 0303 	adds.w	r3, r8, r3
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046ec:	462b      	mov	r3, r5
 80046ee:	eb49 0303 	adc.w	r3, r9, r3
 80046f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800470a:	460b      	mov	r3, r1
 800470c:	18db      	adds	r3, r3, r3
 800470e:	653b      	str	r3, [r7, #80]	; 0x50
 8004710:	4613      	mov	r3, r2
 8004712:	eb42 0303 	adc.w	r3, r2, r3
 8004716:	657b      	str	r3, [r7, #84]	; 0x54
 8004718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800471c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004720:	f7fc fab2 	bl	8000c88 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <UART_SetConfig+0x2d4>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	011c      	lsls	r4, r3, #4
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	1891      	adds	r1, r2, r2
 800474a:	64b9      	str	r1, [r7, #72]	; 0x48
 800474c:	415b      	adcs	r3, r3
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004754:	4641      	mov	r1, r8
 8004756:	eb12 0a01 	adds.w	sl, r2, r1
 800475a:	4649      	mov	r1, r9
 800475c:	eb43 0b01 	adc.w	fp, r3, r1
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800476c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004774:	4692      	mov	sl, r2
 8004776:	469b      	mov	fp, r3
 8004778:	4643      	mov	r3, r8
 800477a:	eb1a 0303 	adds.w	r3, sl, r3
 800477e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004782:	464b      	mov	r3, r9
 8004784:	eb4b 0303 	adc.w	r3, fp, r3
 8004788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800479c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047a0:	460b      	mov	r3, r1
 80047a2:	18db      	adds	r3, r3, r3
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	4613      	mov	r3, r2
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
 80047ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047b6:	f7fc fa67 	bl	8000c88 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <UART_SetConfig+0x2d4>)
 80047c2:	fba3 2301 	umull	r2, r3, r3, r1
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2264      	movs	r2, #100	; 0x64
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	1acb      	subs	r3, r1, r3
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <UART_SetConfig+0x2d4>)
 80047d8:	fba3 2302 	umull	r2, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e4:	441c      	add	r4, r3
 80047e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	1891      	adds	r1, r2, r2
 80047fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004800:	415b      	adcs	r3, r3
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004808:	4641      	mov	r1, r8
 800480a:	1851      	adds	r1, r2, r1
 800480c:	6339      	str	r1, [r7, #48]	; 0x30
 800480e:	4649      	mov	r1, r9
 8004810:	414b      	adcs	r3, r1
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004820:	4659      	mov	r1, fp
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	4651      	mov	r1, sl
 8004826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482a:	4651      	mov	r1, sl
 800482c:	00ca      	lsls	r2, r1, #3
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	4603      	mov	r3, r0
 8004834:	4642      	mov	r2, r8
 8004836:	189b      	adds	r3, r3, r2
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800483c:	464b      	mov	r3, r9
 800483e:	460a      	mov	r2, r1
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800485c:	460b      	mov	r3, r1
 800485e:	18db      	adds	r3, r3, r3
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
 8004862:	4613      	mov	r3, r2
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800486e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004872:	f7fc fa09 	bl	8000c88 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <UART_SetConfig+0x2d4>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	; 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	3332      	adds	r3, #50	; 0x32
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <UART_SetConfig+0x2d4>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	f003 0207 	and.w	r2, r3, #7
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4422      	add	r2, r4
 80048a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048a4:	e105      	b.n	8004ab2 <UART_SetConfig+0x4d6>
 80048a6:	bf00      	nop
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40011400 	.word	0x40011400
 80048b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048c6:	4642      	mov	r2, r8
 80048c8:	464b      	mov	r3, r9
 80048ca:	1891      	adds	r1, r2, r2
 80048cc:	6239      	str	r1, [r7, #32]
 80048ce:	415b      	adcs	r3, r3
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048d6:	4641      	mov	r1, r8
 80048d8:	1854      	adds	r4, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb43 0501 	adc.w	r5, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	00eb      	lsls	r3, r5, #3
 80048ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ee:	00e2      	lsls	r2, r4, #3
 80048f0:	4614      	mov	r4, r2
 80048f2:	461d      	mov	r5, r3
 80048f4:	4643      	mov	r3, r8
 80048f6:	18e3      	adds	r3, r4, r3
 80048f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048fc:	464b      	mov	r3, r9
 80048fe:	eb45 0303 	adc.w	r3, r5, r3
 8004902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004922:	4629      	mov	r1, r5
 8004924:	008b      	lsls	r3, r1, #2
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492c:	4621      	mov	r1, r4
 800492e:	008a      	lsls	r2, r1, #2
 8004930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004934:	f7fc f9a8 	bl	8000c88 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <UART_SetConfig+0x4e4>)
 800493e:	fba3 2302 	umull	r2, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	011c      	lsls	r4, r3, #4
 8004946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	1891      	adds	r1, r2, r2
 800495e:	61b9      	str	r1, [r7, #24]
 8004960:	415b      	adcs	r3, r3
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004968:	4641      	mov	r1, r8
 800496a:	1851      	adds	r1, r2, r1
 800496c:	6139      	str	r1, [r7, #16]
 800496e:	4649      	mov	r1, r9
 8004970:	414b      	adcs	r3, r1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004980:	4659      	mov	r1, fp
 8004982:	00cb      	lsls	r3, r1, #3
 8004984:	4651      	mov	r1, sl
 8004986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498a:	4651      	mov	r1, sl
 800498c:	00ca      	lsls	r2, r1, #3
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	4603      	mov	r3, r0
 8004994:	4642      	mov	r2, r8
 8004996:	189b      	adds	r3, r3, r2
 8004998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800499c:	464b      	mov	r3, r9
 800499e:	460a      	mov	r2, r1
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049c0:	4649      	mov	r1, r9
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ca:	4641      	mov	r1, r8
 80049cc:	008a      	lsls	r2, r1, #2
 80049ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049d2:	f7fc f959 	bl	8000c88 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <UART_SetConfig+0x4e4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	; 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	3332      	adds	r3, #50	; 0x32
 80049ee:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <UART_SetConfig+0x4e4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	441c      	add	r4, r3
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	673b      	str	r3, [r7, #112]	; 0x70
 8004a04:	677a      	str	r2, [r7, #116]	; 0x74
 8004a06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	415b      	adcs	r3, r3
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	1851      	adds	r1, r2, r1
 8004a1e:	6039      	str	r1, [r7, #0]
 8004a20:	4649      	mov	r1, r9
 8004a22:	414b      	adcs	r3, r1
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a32:	4659      	mov	r1, fp
 8004a34:	00cb      	lsls	r3, r1, #3
 8004a36:	4651      	mov	r1, sl
 8004a38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	00ca      	lsls	r2, r1, #3
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	4603      	mov	r3, r0
 8004a46:	4642      	mov	r2, r8
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	460a      	mov	r2, r1
 8004a50:	eb42 0303 	adc.w	r3, r2, r3
 8004a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a60:	667a      	str	r2, [r7, #100]	; 0x64
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a6e:	4649      	mov	r1, r9
 8004a70:	008b      	lsls	r3, r1, #2
 8004a72:	4641      	mov	r1, r8
 8004a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a78:	4641      	mov	r1, r8
 8004a7a:	008a      	lsls	r2, r1, #2
 8004a7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a80:	f7fc f902 	bl	8000c88 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <UART_SetConfig+0x4e4>)
 8004a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2164      	movs	r1, #100	; 0x64
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	; 0x32
 8004a9c:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <UART_SetConfig+0x4e4>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4422      	add	r2, r4
 8004ab0:	609a      	str	r2, [r3, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	51eb851f 	.word	0x51eb851f

08004ac4 <can_init>:

 extern motor1 rh_data;
 extern motor2 lh_data;
 motor1 rh_data;
 motor2 lh_data;
 void can_init(){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0

	  if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8004ac8:	4841      	ldr	r0, [pc, #260]	; (8004bd0 <can_init+0x10c>)
 8004aca:	f7fc fefd 	bl	80018c8 <HAL_CAN_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <can_init+0x14>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8004ad4:	f7fc fc26 	bl	8001324 <Error_Handler>
	  }

	  complete_update=xSemaphoreCreateMutex();
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f000 ff42 	bl	8005962 <xQueueCreateMutex>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <can_init+0x110>)
 8004ae2:	6013      	str	r3, [r2, #0]

	  sFilterConfig.FilterBank = 0;
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <can_init+0x114>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK ;
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <can_init+0x114>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004af0:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <can_init+0x114>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterIdHigh = filter_id >> 13 & 0xFFFF;
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <can_init+0x118>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0b5b      	lsrs	r3, r3, #13
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4a36      	ldr	r2, [pc, #216]	; (8004bd8 <can_init+0x114>)
 8004b00:	6013      	str	r3, [r2, #0]
	  sFilterConfig.FilterIdLow = filter_id << 3 & 0xFFF8;
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <can_init+0x118>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <can_init+0x114>)
 8004b0c:	6053      	str	r3, [r2, #4]
	  sFilterConfig.FilterMaskIdHigh = filter_mask >> 13 & 0xFFFF;
 8004b0e:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <can_init+0x11c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4a30      	ldr	r2, [pc, #192]	; (8004bd8 <can_init+0x114>)
 8004b18:	6093      	str	r3, [r2, #8]
	  sFilterConfig.FilterMaskIdLow = filter_mask << 3 & 0xFFF8;
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <can_init+0x11c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <can_init+0x114>)
 8004b24:	60d3      	str	r3, [r2, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <can_init+0x114>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8004b2c:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <can_init+0x114>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	621a      	str	r2, [r3, #32]

	  sFilterConfig1.FilterBank = 1;
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <can_init+0x120>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	615a      	str	r2, [r3, #20]
	  sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK ;
 8004b38:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <can_init+0x120>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]
	  sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8004b3e:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <can_init+0x120>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	61da      	str	r2, [r3, #28]
	  sFilterConfig1.FilterIdHigh = filter_id1 >> 13 & 0xFFFF;
 8004b44:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <can_init+0x124>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0b5b      	lsrs	r3, r3, #13
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <can_init+0x120>)
 8004b4e:	6013      	str	r3, [r2, #0]
	  sFilterConfig1.FilterIdLow = filter_id1 << 3 & 0xFFF8;
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <can_init+0x124>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <can_init+0x120>)
 8004b5a:	6053      	str	r3, [r2, #4]
	  sFilterConfig1.FilterMaskIdHigh = filter_mask1 >> 13 & 0xFFFF;
 8004b5c:	4b23      	ldr	r3, [pc, #140]	; (8004bec <can_init+0x128>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0b5b      	lsrs	r3, r3, #13
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <can_init+0x120>)
 8004b66:	6093      	str	r3, [r2, #8]
	  sFilterConfig1.FilterMaskIdLow = filter_mask1 << 3 & 0xFFF8;
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <can_init+0x128>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <can_init+0x120>)
 8004b72:	60d3      	str	r3, [r2, #12]
	  sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <can_init+0x120>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
	  sFilterConfig1.FilterActivation = ENABLE;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <can_init+0x120>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	621a      	str	r2, [r3, #32]

	  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8004b80:	4915      	ldr	r1, [pc, #84]	; (8004bd8 <can_init+0x114>)
 8004b82:	4813      	ldr	r0, [pc, #76]	; (8004bd0 <can_init+0x10c>)
 8004b84:	f7fc ff9c 	bl	8001ac0 <HAL_CAN_ConfigFilter>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <can_init+0xce>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 8004b8e:	f7fc fbc9 	bl	8001324 <Error_Handler>
	  }

	  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8004b92:	4914      	ldr	r1, [pc, #80]	; (8004be4 <can_init+0x120>)
 8004b94:	480e      	ldr	r0, [pc, #56]	; (8004bd0 <can_init+0x10c>)
 8004b96:	f7fc ff93 	bl	8001ac0 <HAL_CAN_ConfigFilter>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <can_init+0xe0>
	  {

	    Error_Handler();
 8004ba0:	f7fc fbc0 	bl	8001324 <Error_Handler>





	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <can_init+0x10c>)
 8004ba8:	f7fd fa9b 	bl	80020e2 <HAL_CAN_ActivateNotification>
	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8004bac:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <can_init+0x10c>)
 8004bae:	f7fd f867 	bl	8001c80 <HAL_CAN_Start>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <can_init+0xf8>
	  {
	    /* Start Error */
	    Error_Handler();
 8004bb8:	f7fc fbb4 	bl	8001324 <Error_Handler>
	  }
	  can_transmit_queue=xQueueCreate(15,sizeof(canheader));
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2110      	movs	r1, #16
 8004bc0:	200f      	movs	r0, #15
 8004bc2:	f000 fe47 	bl	8005854 <xQueueGenericCreate>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <can_init+0x12c>)
 8004bca:	6013      	str	r3, [r2, #0]

 }
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200002d4 	.word	0x200002d4
 8004bd4:	20000490 	.word	0x20000490
 8004bd8:	200003f4 	.word	0x200003f4
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	20000010 	.word	0x20000010
 8004be4:	2000041c 	.word	0x2000041c
 8004be8:	20000014 	.word	0x20000014
 8004bec:	20000018 	.word	0x20000018
 8004bf0:	20000488 	.word	0x20000488

08004bf4 <bms_can_transmit>:

 void bms_can_transmit(void *pvParameters){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	 int i=0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
	 TxHeader.DLC=8;
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c02:	2208      	movs	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
	 TxHeader.RTR=CAN_RTR_DATA;
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60da      	str	r2, [r3, #12]
	 TxHeader.IDE=CAN_ID_EXT;
 8004c0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c0e:	2204      	movs	r2, #4
 8004c10:	609a      	str	r2, [r3, #8]
	 for(;;)
	 {

			switch(i){
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d84b      	bhi.n	8004cb0 <bms_can_transmit+0xbc>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <bms_can_transmit+0x2c>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c39 	.word	0x08004c39
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
				case 0:
					TxHeader.ExtId=ADDT90;
 8004c38:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c3a:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <bms_can_transmit+0xdc>)
 8004c3c:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004c42:	4922      	ldr	r1, [pc, #136]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c44:	4825      	ldr	r0, [pc, #148]	; (8004cdc <bms_can_transmit+0xe8>)
 8004c46:	f7fd f85f 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004c4a:	e031      	b.n	8004cb0 <bms_can_transmit+0xbc>
				case 1:
					TxHeader.ExtId=ADDT91;
 8004c4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c4e:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <bms_can_transmit+0xec>)
 8004c50:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004c56:	491d      	ldr	r1, [pc, #116]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c58:	4820      	ldr	r0, [pc, #128]	; (8004cdc <bms_can_transmit+0xe8>)
 8004c5a:	f7fd f855 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004c5e:	e027      	b.n	8004cb0 <bms_can_transmit+0xbc>
				case 2:
					TxHeader.ExtId=ADDT92;
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c62:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <bms_can_transmit+0xf0>)
 8004c64:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004c66:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004c6a:	4918      	ldr	r1, [pc, #96]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c6c:	481b      	ldr	r0, [pc, #108]	; (8004cdc <bms_can_transmit+0xe8>)
 8004c6e:	f7fd f84b 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004c72:	e01d      	b.n	8004cb0 <bms_can_transmit+0xbc>
				case 3:
					TxHeader.ExtId=ADDT93;
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <bms_can_transmit+0xf4>)
 8004c78:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004c7c:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004c7e:	4913      	ldr	r1, [pc, #76]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c80:	4816      	ldr	r0, [pc, #88]	; (8004cdc <bms_can_transmit+0xe8>)
 8004c82:	f7fd f841 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004c86:	e013      	b.n	8004cb0 <bms_can_transmit+0xbc>
				case 4:
					TxHeader.ExtId=ADDT96;
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <bms_can_transmit+0xf8>)
 8004c8c:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004c92:	490e      	ldr	r1, [pc, #56]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c94:	4811      	ldr	r0, [pc, #68]	; (8004cdc <bms_can_transmit+0xe8>)
 8004c96:	f7fd f837 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004c9a:	e009      	b.n	8004cb0 <bms_can_transmit+0xbc>
				case 5:
					TxHeader.ExtId=ADDT98;
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <bms_can_transmit+0xd8>)
 8004c9e:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <bms_can_transmit+0xfc>)
 8004ca0:	605a      	str	r2, [r3, #4]
					HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <bms_can_transmit+0xe0>)
 8004ca4:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <bms_can_transmit+0xe4>)
 8004ca6:	4909      	ldr	r1, [pc, #36]	; (8004ccc <bms_can_transmit+0xd8>)
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <bms_can_transmit+0xe8>)
 8004caa:	f7fd f82d 	bl	8001d08 <HAL_CAN_AddTxMessage>
					break;
 8004cae:	bf00      	nop

			}
			if(i>5){
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	dd02      	ble.n	8004cbc <bms_can_transmit+0xc8>
				i=0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e002      	b.n	8004cc2 <bms_can_transmit+0xce>
			}
			else{
				i++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
			}
			vTaskDelay(pdMS_TO_TICKS(100));
 8004cc2:	2064      	movs	r0, #100	; 0x64
 8004cc4:	f001 fc1e 	bl	8006504 <vTaskDelay>
			switch(i){
 8004cc8:	e7a3      	b.n	8004c12 <bms_can_transmit+0x1e>
 8004cca:	bf00      	nop
 8004ccc:	200003d0 	.word	0x200003d0
 8004cd0:	18900140 	.word	0x18900140
 8004cd4:	200003f0 	.word	0x200003f0
 8004cd8:	200003e8 	.word	0x200003e8
 8004cdc:	200002d4 	.word	0x200002d4
 8004ce0:	18910140 	.word	0x18910140
 8004ce4:	18920140 	.word	0x18920140
 8004ce8:	18930140 	.word	0x18930140
 8004cec:	18960140 	.word	0x18960140
 8004cf0:	18980140 	.word	0x18980140

08004cf4 <HAL_CAN_RxFifo0MsgPendingCallback>:


	 }
 }
 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8004d00:	2100      	movs	r1, #0
 8004d02:	481f      	ldr	r0, [pc, #124]	; (8004d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8004d04:	f7fd f8db 	bl	8001ebe <HAL_CAN_GetRxMessage>
	 xHigherPriorityTaskWoken = pdFALSE;
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
	 candata_tx.canid=RxHeader.ExtId;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d14:	6013      	str	r3, [r2, #0]
	 candata_tx.dlc=RxHeader.DLC;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d1e:	731a      	strb	r2, [r3, #12]
	 candata_tx.rxdata[0]=RxData[0];
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d26:	711a      	strb	r2, [r3, #4]
	 candata_tx.rxdata[1]=RxData[1];
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d2a:	785a      	ldrb	r2, [r3, #1]
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d2e:	715a      	strb	r2, [r3, #5]
	 candata_tx.rxdata[2]=RxData[2];
 8004d30:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d32:	789a      	ldrb	r2, [r3, #2]
 8004d34:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d36:	719a      	strb	r2, [r3, #6]
	 candata_tx.rxdata[3]=RxData[3];
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d3a:	78da      	ldrb	r2, [r3, #3]
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d3e:	71da      	strb	r2, [r3, #7]
	 candata_tx.rxdata[4]=RxData[4];
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d42:	791a      	ldrb	r2, [r3, #4]
 8004d44:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d46:	721a      	strb	r2, [r3, #8]
	 candata_tx.rxdata[5]=RxData[5];
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d4a:	795a      	ldrb	r2, [r3, #5]
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d4e:	725a      	strb	r2, [r3, #9]
	 candata_tx.rxdata[6]=RxData[6];
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d52:	799a      	ldrb	r2, [r3, #6]
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d56:	729a      	strb	r2, [r3, #10]
	 candata_tx.rxdata[7]=RxData[7];
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8004d5a:	79da      	ldrb	r2, [r3, #7]
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d5e:	72da      	strb	r2, [r3, #11]
	 xQueueSendFromISR( can_transmit_queue, &candata_tx, &xHigherPriorityTaskWoken );
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8004d68:	4907      	ldr	r1, [pc, #28]	; (8004d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004d6a:	f000 feed 	bl	8005b48 <xQueueGenericSendFromISR>
	 //printf("Can Data Recived %x\n",RxHeader.ExtId);


}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000460 	.word	0x20000460
 8004d7c:	20000444 	.word	0x20000444
 8004d80:	200002d4 	.word	0x200002d4
 8004d84:	2000048c 	.word	0x2000048c
 8004d88:	20000468 	.word	0x20000468
 8004d8c:	20000488 	.word	0x20000488

08004d90 <can_recieve_task>:

void can_recieve_task(void *pvParameters)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		if(xQueueReceive(can_transmit_queue,&candata_rx,portMAX_DELAY)==pdTRUE)
 8004d98:	4bb4      	ldr	r3, [pc, #720]	; (800506c <can_recieve_task+0x2dc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004da0:	49b3      	ldr	r1, [pc, #716]	; (8005070 <can_recieve_task+0x2e0>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 ff6a 	bl	8005c7c <xQueueReceive>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d1f4      	bne.n	8004d98 <can_recieve_task+0x8>
		{
			xSemaphoreTake(complete_update,0);
 8004dae:	4bb1      	ldr	r3, [pc, #708]	; (8005074 <can_recieve_task+0x2e4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 f821 	bl	8005dfc <xQueueSemaphoreTake>
			switch(candata_rx.canid)
 8004dba:	4bad      	ldr	r3, [pc, #692]	; (8005070 <can_recieve_task+0x2e0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4aae      	ldr	r2, [pc, #696]	; (8005078 <can_recieve_task+0x2e8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	f000 8125 	beq.w	8005010 <can_recieve_task+0x280>
 8004dc6:	4aac      	ldr	r2, [pc, #688]	; (8005078 <can_recieve_task+0x2e8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	f200 825e 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004dce:	4aab      	ldr	r2, [pc, #684]	; (800507c <can_recieve_task+0x2ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	f000 80cf 	beq.w	8004f74 <can_recieve_task+0x1e4>
 8004dd6:	4aa9      	ldr	r2, [pc, #676]	; (800507c <can_recieve_task+0x2ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	f200 8256 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004dde:	4aa8      	ldr	r2, [pc, #672]	; (8005080 <can_recieve_task+0x2f0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	f000 80ab 	beq.w	8004f3c <can_recieve_task+0x1ac>
 8004de6:	4aa6      	ldr	r2, [pc, #664]	; (8005080 <can_recieve_task+0x2f0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f200 824e 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004dee:	4aa5      	ldr	r2, [pc, #660]	; (8005084 <can_recieve_task+0x2f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d070      	beq.n	8004ed6 <can_recieve_task+0x146>
 8004df4:	4aa3      	ldr	r2, [pc, #652]	; (8005084 <can_recieve_task+0x2f4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	f200 8247 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004dfc:	4aa2      	ldr	r2, [pc, #648]	; (8005088 <can_recieve_task+0x2f8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01c      	beq.n	8004e3c <can_recieve_task+0xac>
 8004e02:	4aa1      	ldr	r2, [pc, #644]	; (8005088 <can_recieve_task+0x2f8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	f200 8240 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004e0a:	4aa0      	ldr	r2, [pc, #640]	; (800508c <can_recieve_task+0x2fc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f000 8228 	beq.w	8005262 <can_recieve_task+0x4d2>
 8004e12:	4a9e      	ldr	r2, [pc, #632]	; (800508c <can_recieve_task+0x2fc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f200 8238 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004e1a:	4a9d      	ldr	r2, [pc, #628]	; (8005090 <can_recieve_task+0x300>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f000 81b2 	beq.w	8005186 <can_recieve_task+0x3f6>
 8004e22:	4a9b      	ldr	r2, [pc, #620]	; (8005090 <can_recieve_task+0x300>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	f200 8230 	bhi.w	800528a <can_recieve_task+0x4fa>
 8004e2a:	4a9a      	ldr	r2, [pc, #616]	; (8005094 <can_recieve_task+0x304>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	f000 814f 	beq.w	80050d0 <can_recieve_task+0x340>
 8004e32:	4a99      	ldr	r2, [pc, #612]	; (8005098 <can_recieve_task+0x308>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	f000 81b9 	beq.w	80051ac <can_recieve_task+0x41c>
 8004e3a:	e226      	b.n	800528a <can_recieve_task+0x4fa>
			{
				case ADDR90:
					bmsupdate.voltage=(float)((candata_rx.rxdata[0] << 8) | candata_rx.rxdata[1])/10;
 8004e3c:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <can_recieve_task+0x2e0>)
 8004e3e:	791b      	ldrb	r3, [r3, #4]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	4a8b      	ldr	r2, [pc, #556]	; (8005070 <can_recieve_task+0x2e0>)
 8004e44:	7952      	ldrb	r2, [r2, #5]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e58:	4b90      	ldr	r3, [pc, #576]	; (800509c <can_recieve_task+0x30c>)
 8004e5a:	edc3 7a02 	vstr	s15, [r3, #8]
					bmsupdate.current=(float)((candata_rx.rxdata[4]<<8|candata_rx.rxdata[5])/10)-3000;
 8004e5e:	4b84      	ldr	r3, [pc, #528]	; (8005070 <can_recieve_task+0x2e0>)
 8004e60:	7a1b      	ldrb	r3, [r3, #8]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4a82      	ldr	r2, [pc, #520]	; (8005070 <can_recieve_task+0x2e0>)
 8004e66:	7a52      	ldrb	r2, [r2, #9]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	4a8d      	ldr	r2, [pc, #564]	; (80050a0 <can_recieve_task+0x310>)
 8004e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8004e70:	1092      	asrs	r2, r2, #2
 8004e72:	17db      	asrs	r3, r3, #31
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80050a4 <can_recieve_task+0x314>
 8004e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e86:	4b85      	ldr	r3, [pc, #532]	; (800509c <can_recieve_task+0x30c>)
 8004e88:	edc3 7a03 	vstr	s15, [r3, #12]
					bmsupdate.soc=(float)((candata_rx.rxdata[6] << 8) | candata_rx.rxdata[7])/10;
 8004e8c:	4b78      	ldr	r3, [pc, #480]	; (8005070 <can_recieve_task+0x2e0>)
 8004e8e:	7a9b      	ldrb	r3, [r3, #10]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	4a77      	ldr	r2, [pc, #476]	; (8005070 <can_recieve_task+0x2e0>)
 8004e94:	7ad2      	ldrb	r2, [r2, #11]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ea0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ea8:	4b7c      	ldr	r3, [pc, #496]	; (800509c <can_recieve_task+0x30c>)
 8004eaa:	edc3 7a00 	vstr	s15, [r3]
					set_value(bmsupdate.voltage,BATTERY_VOLTAGE);
 8004eae:	4b7b      	ldr	r3, [pc, #492]	; (800509c <can_recieve_task+0x30c>)
 8004eb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb4:	487c      	ldr	r0, [pc, #496]	; (80050a8 <can_recieve_task+0x318>)
 8004eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eba:	f000 fa07 	bl	80052cc <set_value>
					set_value(bmsupdate.current,BATTERY_CURRENT);
 8004ebe:	4b77      	ldr	r3, [pc, #476]	; (800509c <can_recieve_task+0x30c>)
 8004ec0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ec4:	4879      	ldr	r0, [pc, #484]	; (80050ac <can_recieve_task+0x31c>)
 8004ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eca:	f000 f9ff 	bl	80052cc <set_value>
					set_bms_soc(&bmsupdate.soc);
 8004ece:	4873      	ldr	r0, [pc, #460]	; (800509c <can_recieve_task+0x30c>)
 8004ed0:	f000 fad8 	bl	8005484 <set_bms_soc>
					break;
 8004ed4:	e1d9      	b.n	800528a <can_recieve_task+0x4fa>
				case ADDR91:
					bmsupdate.cellvolatgemax=(float)((candata_rx.rxdata[0] << 8) | candata_rx.rxdata[1])/1000;
 8004ed6:	4b66      	ldr	r3, [pc, #408]	; (8005070 <can_recieve_task+0x2e0>)
 8004ed8:	791b      	ldrb	r3, [r3, #4]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4a64      	ldr	r2, [pc, #400]	; (8005070 <can_recieve_task+0x2e0>)
 8004ede:	7952      	ldrb	r2, [r2, #5]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eea:	eddf 6a71 	vldr	s13, [pc, #452]	; 80050b0 <can_recieve_task+0x320>
 8004eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <can_recieve_task+0x30c>)
 8004ef4:	edc3 7a08 	vstr	s15, [r3, #32]
					bmsupdate.cellvolatgemin=(float)((candata_rx.rxdata[3] << 8) | candata_rx.rxdata[4])/1000;
 8004ef8:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <can_recieve_task+0x2e0>)
 8004efa:	79db      	ldrb	r3, [r3, #7]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <can_recieve_task+0x2e0>)
 8004f00:	7a12      	ldrb	r2, [r2, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	ee07 3a90 	vmov	s15, r3
 8004f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f0c:	eddf 6a68 	vldr	s13, [pc, #416]	; 80050b0 <can_recieve_task+0x320>
 8004f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f14:	4b61      	ldr	r3, [pc, #388]	; (800509c <can_recieve_task+0x30c>)
 8004f16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					set_value(bmsupdate.cellvolatgemax,BATTERY_CELL_MAX_VOLATGE);
 8004f1a:	4b60      	ldr	r3, [pc, #384]	; (800509c <can_recieve_task+0x30c>)
 8004f1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f20:	4864      	ldr	r0, [pc, #400]	; (80050b4 <can_recieve_task+0x324>)
 8004f22:	eeb0 0a67 	vmov.f32	s0, s15
 8004f26:	f000 f9d1 	bl	80052cc <set_value>
					set_value(bmsupdate.cellvolatgemin,BATTERY_CELL_MIN_VOLATGE);
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	; (800509c <can_recieve_task+0x30c>)
 8004f2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004f30:	4861      	ldr	r0, [pc, #388]	; (80050b8 <can_recieve_task+0x328>)
 8004f32:	eeb0 0a67 	vmov.f32	s0, s15
 8004f36:	f000 f9c9 	bl	80052cc <set_value>
					break;
 8004f3a:	e1a6      	b.n	800528a <can_recieve_task+0x4fa>
				case ADDR93:
					bmsupdate.ah=(float)((candata_rx.rxdata[4] << 24) |(candata_rx.rxdata[5] << 16) |(candata_rx.rxdata[6] << 8) | candata_rx.rxdata[7])/1000;
 8004f3c:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <can_recieve_task+0x2e0>)
 8004f3e:	7a1b      	ldrb	r3, [r3, #8]
 8004f40:	061a      	lsls	r2, r3, #24
 8004f42:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <can_recieve_task+0x2e0>)
 8004f44:	7a5b      	ldrb	r3, [r3, #9]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	4b49      	ldr	r3, [pc, #292]	; (8005070 <can_recieve_task+0x2e0>)
 8004f4c:	7a9b      	ldrb	r3, [r3, #10]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	4313      	orrs	r3, r2
 8004f52:	4a47      	ldr	r2, [pc, #284]	; (8005070 <can_recieve_task+0x2e0>)
 8004f54:	7ad2      	ldrb	r2, [r2, #11]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f60:	eddf 6a53 	vldr	s13, [pc, #332]	; 80050b0 <can_recieve_task+0x320>
 8004f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <can_recieve_task+0x30c>)
 8004f6a:	edc3 7a01 	vstr	s15, [r3, #4]
					set_bms_ah(&bmsupdate.ah);
 8004f6e:	4853      	ldr	r0, [pc, #332]	; (80050bc <can_recieve_task+0x32c>)
 8004f70:	f000 faa4 	bl	80054bc <set_bms_ah>
				case ADDR96:
					if(candata_rx.rxdata[0]==0x01)
 8004f74:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <can_recieve_task+0x2e0>)
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f040 8185 	bne.w	8005288 <can_recieve_task+0x4f8>
					{
						bmsupdate.temperature[0]=(float) (candata_rx.rxdata[1]-40);
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <can_recieve_task+0x2e0>)
 8004f80:	795b      	ldrb	r3, [r3, #5]
 8004f82:	3b28      	subs	r3, #40	; 0x28
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f8c:	4b43      	ldr	r3, [pc, #268]	; (800509c <can_recieve_task+0x30c>)
 8004f8e:	edc3 7a04 	vstr	s15, [r3, #16]
						bmsupdate.temperature[1]=(float) (candata_rx.rxdata[2]-40);
 8004f92:	4b37      	ldr	r3, [pc, #220]	; (8005070 <can_recieve_task+0x2e0>)
 8004f94:	799b      	ldrb	r3, [r3, #6]
 8004f96:	3b28      	subs	r3, #40	; 0x28
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <can_recieve_task+0x30c>)
 8004fa2:	edc3 7a05 	vstr	s15, [r3, #20]
						bmsupdate.temperature[2]=(float) (candata_rx.rxdata[3]-40);
 8004fa6:	4b32      	ldr	r3, [pc, #200]	; (8005070 <can_recieve_task+0x2e0>)
 8004fa8:	79db      	ldrb	r3, [r3, #7]
 8004faa:	3b28      	subs	r3, #40	; 0x28
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb4:	4b39      	ldr	r3, [pc, #228]	; (800509c <can_recieve_task+0x30c>)
 8004fb6:	edc3 7a06 	vstr	s15, [r3, #24]
						bmsupdate.temperature[3]=(float) (candata_rx.rxdata[4]-40);
 8004fba:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <can_recieve_task+0x2e0>)
 8004fbc:	7a1b      	ldrb	r3, [r3, #8]
 8004fbe:	3b28      	subs	r3, #40	; 0x28
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc8:	4b34      	ldr	r3, [pc, #208]	; (800509c <can_recieve_task+0x30c>)
 8004fca:	edc3 7a07 	vstr	s15, [r3, #28]
						set_value(bmsupdate.temperature[0],BATTERY_TEMPERATURE1);
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <can_recieve_task+0x30c>)
 8004fd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fd4:	483a      	ldr	r0, [pc, #232]	; (80050c0 <can_recieve_task+0x330>)
 8004fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004fda:	f000 f977 	bl	80052cc <set_value>
						set_value(bmsupdate.temperature[1],BATTERY_TEMPERATURE2);
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <can_recieve_task+0x30c>)
 8004fe0:	edd3 7a05 	vldr	s15, [r3, #20]
 8004fe4:	4837      	ldr	r0, [pc, #220]	; (80050c4 <can_recieve_task+0x334>)
 8004fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8004fea:	f000 f96f 	bl	80052cc <set_value>
						set_value(bmsupdate.temperature[2],BATTERY_TEMPERATURE3);
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <can_recieve_task+0x30c>)
 8004ff0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ff4:	4834      	ldr	r0, [pc, #208]	; (80050c8 <can_recieve_task+0x338>)
 8004ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8004ffa:	f000 f967 	bl	80052cc <set_value>
						set_value(bmsupdate.temperature[3],BATTERY_TEMPERATURE4);
 8004ffe:	4b27      	ldr	r3, [pc, #156]	; (800509c <can_recieve_task+0x30c>)
 8005000:	edd3 7a07 	vldr	s15, [r3, #28]
 8005004:	4831      	ldr	r0, [pc, #196]	; (80050cc <can_recieve_task+0x33c>)
 8005006:	eeb0 0a67 	vmov.f32	s0, s15
 800500a:	f000 f95f 	bl	80052cc <set_value>

					}
					break;
 800500e:	e13b      	b.n	8005288 <can_recieve_task+0x4f8>
				case ADDR98:
					bmsupdate.error_flags[0]=candata_rx.rxdata[0]; /*storing cell voltage High/low*/
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <can_recieve_task+0x2e0>)
 8005012:	791a      	ldrb	r2, [r3, #4]
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <can_recieve_task+0x30c>)
 8005016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					bmsupdate.error_flags[1]=candata_rx.rxdata[1]; /*storing cell Temperature High/low during charge and discharge*/
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <can_recieve_task+0x2e0>)
 800501c:	795a      	ldrb	r2, [r3, #5]
 800501e:	4b1f      	ldr	r3, [pc, #124]	; (800509c <can_recieve_task+0x30c>)
 8005020:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
					bmsupdate.error_flags[2]=candata_rx.rxdata[2]; /*storing cell Over current in  charge and discharge*/
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <can_recieve_task+0x2e0>)
 8005026:	799a      	ldrb	r2, [r3, #6]
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <can_recieve_task+0x30c>)
 800502a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
					bmsupdate.error_flags[3]=candata_rx.rxdata[3]; /*storing cell deviation*/
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <can_recieve_task+0x2e0>)
 8005030:	79da      	ldrb	r2, [r3, #7]
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <can_recieve_task+0x30c>)
 8005034:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					computer_bms_cell_error(bmsupdate.error_flags[0]);
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <can_recieve_task+0x30c>)
 800503a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f986 	bl	8005350 <computer_bms_cell_error>
					computer_bms_temperature_error(bmsupdate.error_flags[1]);
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <can_recieve_task+0x30c>)
 8005046:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9ac 	bl	80053a8 <computer_bms_temperature_error>
					compute_bms_current_error(bmsupdate.error_flags[2]);
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <can_recieve_task+0x30c>)
 8005052:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f9e8 	bl	800542c <compute_bms_current_error>
					computer_bms_cell_deviation_error(bmsupdate.error_flags[3]);
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <can_recieve_task+0x30c>)
 800505e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fa46 	bl	80054f4 <computer_bms_cell_deviation_error>
					break;
 8005068:	e10f      	b.n	800528a <can_recieve_task+0x4fa>
 800506a:	bf00      	nop
 800506c:	20000488 	.word	0x20000488
 8005070:	20000478 	.word	0x20000478
 8005074:	20000490 	.word	0x20000490
 8005078:	18984001 	.word	0x18984001
 800507c:	18964001 	.word	0x18964001
 8005080:	18934001 	.word	0x18934001
 8005084:	18914001 	.word	0x18914001
 8005088:	18904001 	.word	0x18904001
 800508c:	0cf11f06 	.word	0x0cf11f06
 8005090:	0cf11f05 	.word	0x0cf11f05
 8005094:	0cf11e05 	.word	0x0cf11e05
 8005098:	0cf11e06 	.word	0x0cf11e06
 800509c:	20000494 	.word	0x20000494
 80050a0:	66666667 	.word	0x66666667
 80050a4:	453b8000 	.word	0x453b8000
 80050a8:	0800c610 	.word	0x0800c610
 80050ac:	0800c614 	.word	0x0800c614
 80050b0:	447a0000 	.word	0x447a0000
 80050b4:	0800c618 	.word	0x0800c618
 80050b8:	0800c620 	.word	0x0800c620
 80050bc:	20000498 	.word	0x20000498
 80050c0:	0800c628 	.word	0x0800c628
 80050c4:	0800c630 	.word	0x0800c630
 80050c8:	0800c638 	.word	0x0800c638
 80050cc:	0800c640 	.word	0x0800c640
				case MADDR1:
					rh_data.rpm=(candata_rx.rxdata[1]*256)+candata_rx.rxdata[0];
 80050d0:	4b72      	ldr	r3, [pc, #456]	; (800529c <can_recieve_task+0x50c>)
 80050d2:	795b      	ldrb	r3, [r3, #5]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	b29a      	uxth	r2, r3
 80050da:	4b70      	ldr	r3, [pc, #448]	; (800529c <can_recieve_task+0x50c>)
 80050dc:	791b      	ldrb	r3, [r3, #4]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	4b6e      	ldr	r3, [pc, #440]	; (80052a0 <can_recieve_task+0x510>)
 80050e6:	811a      	strh	r2, [r3, #8]
					rh_data.voltage=(float)((candata_rx.rxdata[5]*256)+candata_rx.rxdata[4])/10;
 80050e8:	4b6c      	ldr	r3, [pc, #432]	; (800529c <can_recieve_task+0x50c>)
 80050ea:	7a5b      	ldrb	r3, [r3, #9]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	4a6b      	ldr	r2, [pc, #428]	; (800529c <can_recieve_task+0x50c>)
 80050f0:	7a12      	ldrb	r2, [r2, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <can_recieve_task+0x510>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
					rh_data.current=(float)((candata_rx.rxdata[3]*256)+candata_rx.rxdata[2])/10;
 800510a:	4b64      	ldr	r3, [pc, #400]	; (800529c <can_recieve_task+0x50c>)
 800510c:	79db      	ldrb	r3, [r3, #7]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	4a62      	ldr	r2, [pc, #392]	; (800529c <can_recieve_task+0x50c>)
 8005112:	7992      	ldrb	r2, [r2, #6]
 8005114:	4413      	add	r3, r2
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005126:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <can_recieve_task+0x510>)
 8005128:	edc3 7a01 	vstr	s15, [r3, #4]
					rh_data.error_flags=(candata_rx.rxdata[7]<<8)|(candata_rx.rxdata[6]);
 800512c:	4b5b      	ldr	r3, [pc, #364]	; (800529c <can_recieve_task+0x50c>)
 800512e:	7adb      	ldrb	r3, [r3, #11]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	b21a      	sxth	r2, r3
 8005134:	4b59      	ldr	r3, [pc, #356]	; (800529c <can_recieve_task+0x50c>)
 8005136:	7a9b      	ldrb	r3, [r3, #10]
 8005138:	b21b      	sxth	r3, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	b21b      	sxth	r3, r3
 800513e:	b29a      	uxth	r2, r3
 8005140:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <can_recieve_task+0x510>)
 8005142:	819a      	strh	r2, [r3, #12]
					set_value(rh_data.rpm,RH_MOTOR_RPM );
 8005144:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <can_recieve_task+0x510>)
 8005146:	891b      	ldrh	r3, [r3, #8]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005150:	4854      	ldr	r0, [pc, #336]	; (80052a4 <can_recieve_task+0x514>)
 8005152:	eeb0 0a67 	vmov.f32	s0, s15
 8005156:	f000 f8b9 	bl	80052cc <set_value>
					set_value(rh_data.voltage,RH_MOTOR_VOLATGE );
 800515a:	4b51      	ldr	r3, [pc, #324]	; (80052a0 <can_recieve_task+0x510>)
 800515c:	edd3 7a00 	vldr	s15, [r3]
 8005160:	4851      	ldr	r0, [pc, #324]	; (80052a8 <can_recieve_task+0x518>)
 8005162:	eeb0 0a67 	vmov.f32	s0, s15
 8005166:	f000 f8b1 	bl	80052cc <set_value>
					set_value(rh_data.current,RH_MOTOR_CURRENT);
 800516a:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <can_recieve_task+0x510>)
 800516c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005170:	484e      	ldr	r0, [pc, #312]	; (80052ac <can_recieve_task+0x51c>)
 8005172:	eeb0 0a67 	vmov.f32	s0, s15
 8005176:	f000 f8a9 	bl	80052cc <set_value>
					computer_motor_error_rh(rh_data.error_flags);
 800517a:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <can_recieve_task+0x510>)
 800517c:	899b      	ldrh	r3, [r3, #12]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f9d8 	bl	8005534 <computer_motor_error_rh>
					break;
 8005184:	e081      	b.n	800528a <can_recieve_task+0x4fa>
				case MADDR2:
					rh_data.temperature=(candata_rx.rxdata[1])-40;
 8005186:	4b45      	ldr	r3, [pc, #276]	; (800529c <can_recieve_task+0x50c>)
 8005188:	795b      	ldrb	r3, [r3, #5]
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b28      	subs	r3, #40	; 0x28
 800518e:	b29a      	uxth	r2, r3
 8005190:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <can_recieve_task+0x510>)
 8005192:	815a      	strh	r2, [r3, #10]
					set_value(rh_data.temperature,RH_MOTOR_TEMPERATURE);
 8005194:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <can_recieve_task+0x510>)
 8005196:	895b      	ldrh	r3, [r3, #10]
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a0:	4843      	ldr	r0, [pc, #268]	; (80052b0 <can_recieve_task+0x520>)
 80051a2:	eeb0 0a67 	vmov.f32	s0, s15
 80051a6:	f000 f891 	bl	80052cc <set_value>
					break;
 80051aa:	e06e      	b.n	800528a <can_recieve_task+0x4fa>
				case MADDR3:
					lh_data.rpm=(candata_rx.rxdata[1]*256)+candata_rx.rxdata[0];
 80051ac:	4b3b      	ldr	r3, [pc, #236]	; (800529c <can_recieve_task+0x50c>)
 80051ae:	795b      	ldrb	r3, [r3, #5]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <can_recieve_task+0x50c>)
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4413      	add	r3, r2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	4b3c      	ldr	r3, [pc, #240]	; (80052b4 <can_recieve_task+0x524>)
 80051c2:	811a      	strh	r2, [r3, #8]
					lh_data.voltage=(float)((candata_rx.rxdata[5]*256)+candata_rx.rxdata[4])/10;
 80051c4:	4b35      	ldr	r3, [pc, #212]	; (800529c <can_recieve_task+0x50c>)
 80051c6:	7a5b      	ldrb	r3, [r3, #9]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	4a34      	ldr	r2, [pc, #208]	; (800529c <can_recieve_task+0x50c>)
 80051cc:	7a12      	ldrb	r2, [r2, #8]
 80051ce:	4413      	add	r3, r2
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80051dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <can_recieve_task+0x524>)
 80051e2:	edc3 7a00 	vstr	s15, [r3]
					lh_data.current=(float)((candata_rx.rxdata[3]*256)+candata_rx.rxdata[2])/10;
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <can_recieve_task+0x50c>)
 80051e8:	79db      	ldrb	r3, [r3, #7]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <can_recieve_task+0x50c>)
 80051ee:	7992      	ldrb	r2, [r2, #6]
 80051f0:	4413      	add	r3, r2
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80051fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005202:	4b2c      	ldr	r3, [pc, #176]	; (80052b4 <can_recieve_task+0x524>)
 8005204:	edc3 7a01 	vstr	s15, [r3, #4]
					lh_data.error_flags=(candata_rx.rxdata[7]<<8)|(candata_rx.rxdata[6]);
 8005208:	4b24      	ldr	r3, [pc, #144]	; (800529c <can_recieve_task+0x50c>)
 800520a:	7adb      	ldrb	r3, [r3, #11]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	b21a      	sxth	r2, r3
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <can_recieve_task+0x50c>)
 8005212:	7a9b      	ldrb	r3, [r3, #10]
 8005214:	b21b      	sxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b21b      	sxth	r3, r3
 800521a:	b29a      	uxth	r2, r3
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <can_recieve_task+0x524>)
 800521e:	819a      	strh	r2, [r3, #12]
					set_value(lh_data.rpm,LH_MOTOR_RPM);
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <can_recieve_task+0x524>)
 8005222:	891b      	ldrh	r3, [r3, #8]
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522c:	4822      	ldr	r0, [pc, #136]	; (80052b8 <can_recieve_task+0x528>)
 800522e:	eeb0 0a67 	vmov.f32	s0, s15
 8005232:	f000 f84b 	bl	80052cc <set_value>
					set_value(lh_data.voltage,LH_MOTOR_VOLATGE);
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <can_recieve_task+0x524>)
 8005238:	edd3 7a00 	vldr	s15, [r3]
 800523c:	481f      	ldr	r0, [pc, #124]	; (80052bc <can_recieve_task+0x52c>)
 800523e:	eeb0 0a67 	vmov.f32	s0, s15
 8005242:	f000 f843 	bl	80052cc <set_value>
					set_value(lh_data.current,LH_MOTOR_CURRENT);
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <can_recieve_task+0x524>)
 8005248:	edd3 7a01 	vldr	s15, [r3, #4]
 800524c:	481c      	ldr	r0, [pc, #112]	; (80052c0 <can_recieve_task+0x530>)
 800524e:	eeb0 0a67 	vmov.f32	s0, s15
 8005252:	f000 f83b 	bl	80052cc <set_value>
					computer_motor_error_lh(lh_data.error_flags);
 8005256:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <can_recieve_task+0x524>)
 8005258:	899b      	ldrh	r3, [r3, #12]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f9a6 	bl	80055ac <computer_motor_error_lh>
					break;
 8005260:	e013      	b.n	800528a <can_recieve_task+0x4fa>
				case MADDR4:
					lh_data.temperature=(candata_rx.rxdata[1])-40;
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <can_recieve_task+0x50c>)
 8005264:	795b      	ldrb	r3, [r3, #5]
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b28      	subs	r3, #40	; 0x28
 800526a:	b29a      	uxth	r2, r3
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <can_recieve_task+0x524>)
 800526e:	815a      	strh	r2, [r3, #10]
					set_value(lh_data.temperature,LH_MOTOR_TEMPERATURE);
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <can_recieve_task+0x524>)
 8005272:	895b      	ldrh	r3, [r3, #10]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527c:	4811      	ldr	r0, [pc, #68]	; (80052c4 <can_recieve_task+0x534>)
 800527e:	eeb0 0a67 	vmov.f32	s0, s15
 8005282:	f000 f823 	bl	80052cc <set_value>
					break;
 8005286:	e000      	b.n	800528a <can_recieve_task+0x4fa>
					break;
 8005288:	bf00      	nop
			}
			xSemaphoreGive(complete_update);
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <can_recieve_task+0x538>)
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	2200      	movs	r2, #0
 8005292:	2100      	movs	r1, #0
 8005294:	f000 fb7e 	bl	8005994 <xQueueGenericSend>
		if(xQueueReceive(can_transmit_queue,&candata_rx,portMAX_DELAY)==pdTRUE)
 8005298:	e57e      	b.n	8004d98 <can_recieve_task+0x8>
 800529a:	bf00      	nop
 800529c:	20000478 	.word	0x20000478
 80052a0:	200004c0 	.word	0x200004c0
 80052a4:	0800c648 	.word	0x0800c648
 80052a8:	0800c650 	.word	0x0800c650
 80052ac:	0800c658 	.word	0x0800c658
 80052b0:	0800c660 	.word	0x0800c660
 80052b4:	200004d0 	.word	0x200004d0
 80052b8:	0800c668 	.word	0x0800c668
 80052bc:	0800c670 	.word	0x0800c670
 80052c0:	0800c678 	.word	0x0800c678
 80052c4:	0800c680 	.word	0x0800c680
 80052c8:	20000490 	.word	0x20000490

080052cc <set_value>:
char err_lh[16][6]={LH_MOTOR_ERROR_0,LH_MOTOR_ERROR_1,LH_MOTOR_ERROR_2,LH_MOTOR_ERROR_3,LH_MOTOR_ERROR_4,LH_MOTOR_ERROR_5,LH_MOTOR_ERROR_6,LH_MOTOR_ERROR_7,LH_MOTOR_ERROR_8,LH_MOTOR_ERROR_9,LH_MOTOR_ERROR_10,LH_MOTOR_ERROR_11,LH_MOTOR_ERROR_12,LH_MOTOR_ERROR_13,LH_MOTOR_ERROR_14,LH_MOTOR_ERROR_15};



void set_value(float value,char widget_name[])
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80052d6:	6038      	str	r0, [r7, #0]
	printf("ST<{\"cmd_code\":\"set_value\",\"type\":\"label\",\"widget\":\"%s\",\"value\":%0.2f}>ET\n     ",widget_name,value);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fb f935 	bl	8000548 <__aeabi_f2d>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	4803      	ldr	r0, [pc, #12]	; (80052f4 <set_value+0x28>)
 80052e6:	f003 fb6d 	bl	80089c4 <iprintf>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	0800c688 	.word	0x0800c688

080052f8 <set_progress_bar>:
{
	printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"%s\"}>ET\n      ",widget_name,text);
}

void set_progress_bar(float value,char widget_name[])
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005302:	6038      	str	r0, [r7, #0]
	printf("ST<{\"cmd_code\":\"set_value\",\"type\":\"progress_bar\",\"widget\":\"%s\",\"value\":%f}>ET\n  ",widget_name,value);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fb f91f 	bl	8000548 <__aeabi_f2d>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	4803      	ldr	r0, [pc, #12]	; (8005320 <set_progress_bar+0x28>)
 8005312:	f003 fb57 	bl	80089c4 <iprintf>

}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	0800c728 	.word	0x0800c728

08005324 <set_circular_bar>:

void set_circular_bar(float value,char widget_name[])
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	ed87 0a01 	vstr	s0, [r7, #4]
 800532e:	6038      	str	r0, [r7, #0]
	printf("ST<{\"cmd_code\":\"set_value\",\"type\":\"progress_circle\",\"widget\":\"%s\",\"value\":%f}>ET\n   ",widget_name,value);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fb f909 	bl	8000548 <__aeabi_f2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <set_circular_bar+0x28>)
 800533e:	f003 fb41 	bl	80089c4 <iprintf>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800c77c 	.word	0x0800c77c

08005350 <computer_bms_cell_error>:

void computer_bms_cell_error(uint8_t error)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
	if(error>0)
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <computer_bms_cell_error+0x36>
	{
		if((error&single_cell_voltage_high)==single_cell_voltage_high)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <computer_bms_cell_error+0x22>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Single Cell Voltage High\"}>ET\n    ",BATTERY_CELL_ERROR);
 800536a:	490b      	ldr	r1, [pc, #44]	; (8005398 <computer_bms_cell_error+0x48>)
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <computer_bms_cell_error+0x4c>)
 800536e:	f003 fb29 	bl	80089c4 <iprintf>
		}
		if((error&single_cell_voltage_low)==single_cell_voltage_low)
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <computer_bms_cell_error+0x3e>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Single Cell Voltage Low\"}>ET\n     ",BATTERY_CELL_ERROR);
 800537c:	4906      	ldr	r1, [pc, #24]	; (8005398 <computer_bms_cell_error+0x48>)
 800537e:	4808      	ldr	r0, [pc, #32]	; (80053a0 <computer_bms_cell_error+0x50>)
 8005380:	f003 fb20 	bl	80089c4 <iprintf>
	}
	else
	{
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n      ",BATTERY_CELL_ERROR);
	}
}
 8005384:	e003      	b.n	800538e <computer_bms_cell_error+0x3e>
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n      ",BATTERY_CELL_ERROR);
 8005386:	4904      	ldr	r1, [pc, #16]	; (8005398 <computer_bms_cell_error+0x48>)
 8005388:	4806      	ldr	r0, [pc, #24]	; (80053a4 <computer_bms_cell_error+0x54>)
 800538a:	f003 fb1b 	bl	80089c4 <iprintf>
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0800c7d4 	.word	0x0800c7d4
 800539c:	0800c7dc 	.word	0x0800c7dc
 80053a0:	0800c840 	.word	0x0800c840
 80053a4:	0800c8a4 	.word	0x0800c8a4

080053a8 <computer_bms_temperature_error>:

void computer_bms_temperature_error(uint8_t error)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
	if(error)
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d024      	beq.n	8005402 <computer_bms_temperature_error+0x5a>
	{
		if((error&temperature_high_charge)==temperature_high_charge)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <computer_bms_temperature_error+0x22>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Temperature High in charge\"}>ET\n     ",BATEERY_TEMP_ERROR);
 80053c2:	4914      	ldr	r1, [pc, #80]	; (8005414 <computer_bms_temperature_error+0x6c>)
 80053c4:	4814      	ldr	r0, [pc, #80]	; (8005418 <computer_bms_temperature_error+0x70>)
 80053c6:	f003 fafd 	bl	80089c4 <iprintf>
		}

		if((error&temperatue_low_charge)==temperatue_low_charge)
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <computer_bms_temperature_error+0x34>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Temperature Low in charge\"}>ET\n      ",BATEERY_TEMP_ERROR);
 80053d4:	490f      	ldr	r1, [pc, #60]	; (8005414 <computer_bms_temperature_error+0x6c>)
 80053d6:	4811      	ldr	r0, [pc, #68]	; (800541c <computer_bms_temperature_error+0x74>)
 80053d8:	f003 faf4 	bl	80089c4 <iprintf>
		}

		if((error&temperature_high_discharge)==temperature_high_discharge)
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <computer_bms_temperature_error+0x46>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Temperature High in discharge\"}>ET\n   ",BATEERY_TEMP_ERROR);
 80053e6:	490b      	ldr	r1, [pc, #44]	; (8005414 <computer_bms_temperature_error+0x6c>)
 80053e8:	480d      	ldr	r0, [pc, #52]	; (8005420 <computer_bms_temperature_error+0x78>)
 80053ea:	f003 faeb 	bl	80089c4 <iprintf>
		}

		if((error&temperature_low_discharge)==temperature_low_discharge)
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <computer_bms_temperature_error+0x62>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Temperature Low in discharge\"}>ET\n    ",BATEERY_TEMP_ERROR);
 80053f8:	4906      	ldr	r1, [pc, #24]	; (8005414 <computer_bms_temperature_error+0x6c>)
 80053fa:	480a      	ldr	r0, [pc, #40]	; (8005424 <computer_bms_temperature_error+0x7c>)
 80053fc:	f003 fae2 	bl	80089c4 <iprintf>
	}
	else
	{
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n       ",BATEERY_TEMP_ERROR);
	}
}
 8005400:	e003      	b.n	800540a <computer_bms_temperature_error+0x62>
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n       ",BATEERY_TEMP_ERROR);
 8005402:	4904      	ldr	r1, [pc, #16]	; (8005414 <computer_bms_temperature_error+0x6c>)
 8005404:	4808      	ldr	r0, [pc, #32]	; (8005428 <computer_bms_temperature_error+0x80>)
 8005406:	f003 fadd 	bl	80089c4 <iprintf>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	0800c8f0 	.word	0x0800c8f0
 8005418:	0800c8f8 	.word	0x0800c8f8
 800541c:	0800c960 	.word	0x0800c960
 8005420:	0800c9c8 	.word	0x0800c9c8
 8005424:	0800ca30 	.word	0x0800ca30
 8005428:	0800ca98 	.word	0x0800ca98

0800542c <compute_bms_current_error>:

void compute_bms_current_error(uint8_t error)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	71fb      	strb	r3, [r7, #7]
	if(error>0)
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <compute_bms_current_error+0x36>
	{
		if((error&overcurrent_in_charge)==overcurrent_in_charge)
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <compute_bms_current_error+0x22>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Overcurrent in charge\"}>ET\n    ",BATTERY_CURRENT_ERROR);
 8005446:	490b      	ldr	r1, [pc, #44]	; (8005474 <compute_bms_current_error+0x48>)
 8005448:	480b      	ldr	r0, [pc, #44]	; (8005478 <compute_bms_current_error+0x4c>)
 800544a:	f003 fabb 	bl	80089c4 <iprintf>
		}

		if((error&overcurrent_in_discharge)==overcurrent_in_discharge)
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <compute_bms_current_error+0x3e>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Overcurrent in discharge\"}>ET\n    ",BATTERY_CURRENT_ERROR);
 8005458:	4906      	ldr	r1, [pc, #24]	; (8005474 <compute_bms_current_error+0x48>)
 800545a:	4808      	ldr	r0, [pc, #32]	; (800547c <compute_bms_current_error+0x50>)
 800545c:	f003 fab2 	bl	80089c4 <iprintf>
	}
	else
	{
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n    ",BATTERY_CURRENT_ERROR);
	}
}
 8005460:	e003      	b.n	800546a <compute_bms_current_error+0x3e>
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n    ",BATTERY_CURRENT_ERROR);
 8005462:	4904      	ldr	r1, [pc, #16]	; (8005474 <compute_bms_current_error+0x48>)
 8005464:	4806      	ldr	r0, [pc, #24]	; (8005480 <compute_bms_current_error+0x54>)
 8005466:	f003 faad 	bl	80089c4 <iprintf>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	0800cae8 	.word	0x0800cae8
 8005478:	0800caf0 	.word	0x0800caf0
 800547c:	0800cb50 	.word	0x0800cb50
 8005480:	0800cbb4 	.word	0x0800cbb4

08005484 <set_bms_soc>:
void set_bms_soc(float *soc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

	set_value(*soc,BATTERY_SOC_LABEL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	edd3 7a00 	vldr	s15, [r3]
 8005492:	4808      	ldr	r0, [pc, #32]	; (80054b4 <set_bms_soc+0x30>)
 8005494:	eeb0 0a67 	vmov.f32	s0, s15
 8005498:	f7ff ff18 	bl	80052cc <set_value>
	set_progress_bar(*soc,BATTERY_SOC);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	4805      	ldr	r0, [pc, #20]	; (80054b8 <set_bms_soc+0x34>)
 80054a4:	eeb0 0a67 	vmov.f32	s0, s15
 80054a8:	f7ff ff26 	bl	80052f8 <set_progress_bar>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	0800cc00 	.word	0x0800cc00
 80054b8:	0800cc0c 	.word	0x0800cc0c

080054bc <set_bms_ah>:

void set_bms_ah(float *ah)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	set_value(*ah,BATTERY_AH_LABEL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	edd3 7a00 	vldr	s15, [r3]
 80054ca:	4808      	ldr	r0, [pc, #32]	; (80054ec <set_bms_ah+0x30>)
 80054cc:	eeb0 0a67 	vmov.f32	s0, s15
 80054d0:	f7ff fefc 	bl	80052cc <set_value>
	set_circular_bar(*ah,BATTERY_AH);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	4805      	ldr	r0, [pc, #20]	; (80054f0 <set_bms_ah+0x34>)
 80054dc:	eeb0 0a67 	vmov.f32	s0, s15
 80054e0:	f7ff ff20 	bl	8005324 <set_circular_bar>
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0800cc14 	.word	0x0800cc14
 80054f0:	0800cc20 	.word	0x0800cc20

080054f4 <computer_bms_cell_deviation_error>:

void computer_bms_cell_deviation_error(uint8_t error)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
	if(error>0)
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <computer_bms_cell_deviation_error+0x24>
	{
		if((error&single_cell_diff_high)==single_cell_diff_high)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <computer_bms_cell_deviation_error+0x2c>
		{
			printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"Cell Voltage Difference High\"}>ET\n   ",BATTERY_CELL_DIV_ERROR);
 800550e:	4906      	ldr	r1, [pc, #24]	; (8005528 <computer_bms_cell_deviation_error+0x34>)
 8005510:	4806      	ldr	r0, [pc, #24]	; (800552c <computer_bms_cell_deviation_error+0x38>)
 8005512:	f003 fa57 	bl	80089c4 <iprintf>
	else
	{
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n    ",BATTERY_CELL_DIV_ERROR);
	}

}
 8005516:	e003      	b.n	8005520 <computer_bms_cell_deviation_error+0x2c>
		printf("ST<{\"cmd_code\":\"set_text\",\"type\":\"label\",\"widget\":\"%s\",\"text\":\"\"}>ET\n    ",BATTERY_CELL_DIV_ERROR);
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <computer_bms_cell_deviation_error+0x34>)
 800551a:	4805      	ldr	r0, [pc, #20]	; (8005530 <computer_bms_cell_deviation_error+0x3c>)
 800551c:	f003 fa52 	bl	80089c4 <iprintf>
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	0800cc2c 	.word	0x0800cc2c
 800552c:	0800cc34 	.word	0x0800cc34
 8005530:	0800cbb4 	.word	0x0800cbb4

08005534 <computer_motor_error_rh>:

void computer_motor_error_rh(uint16_t error_code)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	80fb      	strh	r3, [r7, #6]
	uint16_t temp;
	for(uint16_t i=0;i<16;i++)
 800553e:	2300      	movs	r3, #0
 8005540:	81fb      	strh	r3, [r7, #14]
 8005542:	e024      	b.n	800558e <computer_motor_error_rh+0x5a>
	{
		temp=(error_code>>i)&0x0001;
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	fa42 f303 	asr.w	r3, r2, r3
 800554c:	b29b      	uxth	r3, r3
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	81bb      	strh	r3, [r7, #12]
		if(temp==1)
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10b      	bne.n	8005572 <computer_motor_error_rh+0x3e>
		{
			printf("ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":true}>ET\n       ",err_rh[i]);
 800555a:	89fa      	ldrh	r2, [r7, #14]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <computer_motor_error_rh+0x6c>)
 8005566:	4413      	add	r3, r2
 8005568:	4619      	mov	r1, r3
 800556a:	480e      	ldr	r0, [pc, #56]	; (80055a4 <computer_motor_error_rh+0x70>)
 800556c:	f003 fa2a 	bl	80089c4 <iprintf>
 8005570:	e00a      	b.n	8005588 <computer_motor_error_rh+0x54>
		}
		else
		{
			printf("ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":false}>ET\n      ",err_rh[i]);
 8005572:	89fa      	ldrh	r2, [r7, #14]
 8005574:	4613      	mov	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4413      	add	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <computer_motor_error_rh+0x6c>)
 800557e:	4413      	add	r3, r2
 8005580:	4619      	mov	r1, r3
 8005582:	4809      	ldr	r0, [pc, #36]	; (80055a8 <computer_motor_error_rh+0x74>)
 8005584:	f003 fa1e 	bl	80089c4 <iprintf>
	for(uint16_t i=0;i<16;i++)
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	3301      	adds	r3, #1
 800558c:	81fb      	strh	r3, [r7, #14]
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	d9d7      	bls.n	8005544 <computer_motor_error_rh+0x10>

		}
	}
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000001c 	.word	0x2000001c
 80055a4:	0800cc9c 	.word	0x0800cc9c
 80055a8:	0800ccf4 	.word	0x0800ccf4

080055ac <computer_motor_error_lh>:

void computer_motor_error_lh(uint16_t error_code)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
	uint16_t temp;
	for(uint16_t i=0;i<16;i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	81fb      	strh	r3, [r7, #14]
 80055ba:	e024      	b.n	8005606 <computer_motor_error_lh+0x5a>
	{
		temp=(error_code>>i)&0x0001;
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	fa42 f303 	asr.w	r3, r2, r3
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	81bb      	strh	r3, [r7, #12]
		if(temp==1)
 80055cc:	89bb      	ldrh	r3, [r7, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10b      	bne.n	80055ea <computer_motor_error_lh+0x3e>
		{
		   printf("ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":true}>ET\n      ",err_lh[i]);
 80055d2:	89fa      	ldrh	r2, [r7, #14]
 80055d4:	4613      	mov	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4413      	add	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <computer_motor_error_lh+0x6c>)
 80055de:	4413      	add	r3, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	480e      	ldr	r0, [pc, #56]	; (800561c <computer_motor_error_lh+0x70>)
 80055e4:	f003 f9ee 	bl	80089c4 <iprintf>
 80055e8:	e00a      	b.n	8005600 <computer_motor_error_lh+0x54>
		}
		else
		{
		   printf("ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":false}>ET\n     ",err_lh[i]);
 80055ea:	89fa      	ldrh	r2, [r7, #14]
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4a08      	ldr	r2, [pc, #32]	; (8005618 <computer_motor_error_lh+0x6c>)
 80055f6:	4413      	add	r3, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	4809      	ldr	r0, [pc, #36]	; (8005620 <computer_motor_error_lh+0x74>)
 80055fc:	f003 f9e2 	bl	80089c4 <iprintf>
	for(uint16_t i=0;i<16;i++)
 8005600:	89fb      	ldrh	r3, [r7, #14]
 8005602:	3301      	adds	r3, #1
 8005604:	81fb      	strh	r3, [r7, #14]
 8005606:	89fb      	ldrh	r3, [r7, #14]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d9d7      	bls.n	80055bc <computer_motor_error_lh+0x10>
		}
	}
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000007c 	.word	0x2000007c
 800561c:	0800cd4c 	.word	0x0800cd4c
 8005620:	0800cda4 	.word	0x0800cda4

08005624 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f103 0208 	add.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f103 0208 	add.w	r2, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f103 0208 	add.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e00c      	b.n	80056b8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <vListInsert+0x2e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d2f6      	bcs.n	80056a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d103      	bne.n	8005724 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800574e:	2301      	movs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <xQueueGenericReset+0x26>
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f383 8811 	msr	BASEPRI, r3
    }
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xQueueGenericReset+0x24>

    if( ( pxQueue != NULL ) &&
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05d      	beq.n	800582c <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005774:	2b00      	cmp	r3, #0
 8005776:	d059      	beq.n	800582c <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	2100      	movs	r1, #0
 8005782:	fba3 2302 	umull	r2, r3, r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d000      	beq.n	800578c <xQueueGenericReset+0x48>
 800578a:	2101      	movs	r1, #1
 800578c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800578e:	2b00      	cmp	r3, #0
 8005790:	d14c      	bne.n	800582c <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8005792:	f001 ff5d 	bl	8007650 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	6939      	ldr	r1, [r7, #16]
 80057a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	441a      	add	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2200      	movs	r2, #0
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	3b01      	subs	r3, #1
 80057c4:	6939      	ldr	r1, [r7, #16]
 80057c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	441a      	add	r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d114      	bne.n	8005812 <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01a      	beq.n	8005826 <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3310      	adds	r3, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f98d 	bl	8006b14 <xTaskRemoveFromEventList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005800:	4b13      	ldr	r3, [pc, #76]	; (8005850 <xQueueGenericReset+0x10c>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	e009      	b.n	8005826 <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3310      	adds	r3, #16
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ff04 	bl	8005624 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3324      	adds	r3, #36	; 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff feff 	bl	8005624 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005826:	f001 ff3f 	bl	80076a8 <vPortExitCritical>
 800582a:	e001      	b.n	8005830 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <xQueueGenericReset+0x100>
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f383 8811 	msr	BASEPRI, r3
    }
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xQueueGenericReset+0xfe>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d02e      	beq.n	80058ca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800586c:	2100      	movs	r1, #0
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d000      	beq.n	800587c <xQueueGenericCreate+0x28>
 800587a:	2101      	movs	r1, #1
 800587c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800587e:	2b00      	cmp	r3, #0
 8005880:	d123      	bne.n	80058ca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800588a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800588e:	d81c      	bhi.n	80058ca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	fb02 f303 	mul.w	r3, r2, r3
 8005898:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	3350      	adds	r3, #80	; 0x50
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 ffec 	bl	800787c <pvPortMalloc>
 80058a4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3350      	adds	r3, #80	; 0x50
 80058b4:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b6:	79fa      	ldrb	r2, [r7, #7]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f810 	bl	80058e8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80058c8:	e009      	b.n	80058de <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <xQueueGenericCreate+0x8a>
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
        __asm volatile
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f383 8811 	msr	BASEPRI, r3
    }
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80058de:	69fb      	ldr	r3, [r7, #28]
    }
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e002      	b.n	800590a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005916:	2101      	movs	r1, #1
 8005918:	69b8      	ldr	r0, [r7, #24]
 800591a:	f7ff ff13 	bl	8005744 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00e      	beq.n	800595a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800594e:	2300      	movs	r3, #0
 8005950:	2200      	movs	r2, #0
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f81d 	bl	8005994 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	4603      	mov	r3, r0
 800596a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	461a      	mov	r2, r3
 8005978:	6939      	ldr	r1, [r7, #16]
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7ff ff6a 	bl	8005854 <xQueueGenericCreate>
 8005980:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff ffd3 	bl	800592e <prvInitialiseMutex>

        return xNewQueue;
 8005988:	68fb      	ldr	r3, [r7, #12]
    }
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059a2:	2300      	movs	r3, #0
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <xQueueGenericSend+0x2a>
 80059b0:	2300      	movs	r3, #0
 80059b2:	623b      	str	r3, [r7, #32]
        __asm volatile
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f383 8811 	msr	BASEPRI, r3
    }
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSend+0x28>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <xQueueGenericSend+0x38>
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSend+0x3c>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueGenericSend+0x3e>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <xQueueGenericSend+0x50>
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
        __asm volatile
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f383 8811 	msr	BASEPRI, r3
    }
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueGenericSend+0x4e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSend+0x5e>
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <xQueueGenericSend+0x62>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueGenericSend+0x64>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <xQueueGenericSend+0x76>
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
        __asm volatile
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f383 8811 	msr	BASEPRI, r3
    }
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericSend+0x74>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a0a:	f001 fe21 	bl	8007650 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <xQueueGenericSend+0x8c>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d129      	bne.n	8005a74 <xQueueGenericSend+0xe0>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a26:	f000 fae9 	bl	8005ffc <prvCopyDataToQueue>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <xQueueGenericSend+0xc2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	3324      	adds	r3, #36	; 0x24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f86b 	bl	8006b14 <xTaskRemoveFromEventList>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d013      	beq.n	8005a6c <xQueueGenericSend+0xd8>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005a44:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <xQueueGenericSend+0x1b0>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	e00a      	b.n	8005a6c <xQueueGenericSend+0xd8>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <xQueueGenericSend+0xd8>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005a5c:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <xQueueGenericSend+0x1b0>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005a6c:	f001 fe1c 	bl	80076a8 <vPortExitCritical>
                return pdPASS;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e063      	b.n	8005b3c <xQueueGenericSend+0x1a8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0xee>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a7a:	f001 fe15 	bl	80076a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e05c      	b.n	8005b3c <xQueueGenericSend+0x1a8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <xQueueGenericSend+0x102>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a88:	f107 0310 	add.w	r3, r7, #16
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 f913 	bl	8006cb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a96:	f001 fe07 	bl	80076a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a9a:	f000 fdab 	bl	80065f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a9e:	f001 fdd7 	bl	8007650 <vPortEnterCritical>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d103      	bne.n	8005ab8 <xQueueGenericSend+0x124>
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d103      	bne.n	8005ace <xQueueGenericSend+0x13a>
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ace:	f001 fdeb 	bl	80076a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad2:	1d3a      	adds	r2, r7, #4
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 f902 	bl	8006ce4 <xTaskCheckForTimeOut>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d124      	bne.n	8005b30 <xQueueGenericSend+0x19c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f000 fb80 	bl	80061ec <prvIsQueueFull>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d018      	beq.n	8005b24 <xQueueGenericSend+0x190>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	3310      	adds	r3, #16
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ffea 	bl	8006ad4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 fb0b 	bl	800611c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005b06:	f000 fd83 	bl	8006610 <xTaskResumeAll>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f af7c 	bne.w	8005a0a <xQueueGenericSend+0x76>
                {
                    portYIELD_WITHIN_API();
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <xQueueGenericSend+0x1b0>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	e772      	b.n	8005a0a <xQueueGenericSend+0x76>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f000 faf9 	bl	800611c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005b2a:	f000 fd71 	bl	8006610 <xTaskResumeAll>
 8005b2e:	e76c      	b.n	8005a0a <xQueueGenericSend+0x76>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b32:	f000 faf3 	bl	800611c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005b36:	f000 fd6b 	bl	8006610 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005b3a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	; 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b090      	sub	sp, #64	; 0x40
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <xQueueGenericSendFromISR+0x26>
 8005b60:	2300      	movs	r3, #0
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	f383 8811 	msr	BASEPRI, r3
    }
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSendFromISR+0x24>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <xQueueGenericSendFromISR+0x34>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <xQueueGenericSendFromISR+0x38>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <xQueueGenericSendFromISR+0x3a>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <xQueueGenericSendFromISR+0x4c>
 8005b86:	2300      	movs	r3, #0
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f383 8811 	msr	BASEPRI, r3
    }
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xQueueGenericSendFromISR+0x4a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x5a>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x5e>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSendFromISR+0x60>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <xQueueGenericSendFromISR+0x72>
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
        __asm volatile
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	f383 8811 	msr	BASEPRI, r3
    }
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericSendFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bba:	f001 fe27 	bl	800780c <vPortValidateInterruptPriority>
        __asm volatile
 8005bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	61fa      	str	r2, [r7, #28]
 8005bd4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <xQueueGenericSendFromISR+0xa4>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d13a      	bne.n	8005c62 <xQueueGenericSendFromISR+0x11a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c02:	f000 f9fb 	bl	8005ffc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005c06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d112      	bne.n	8005c36 <xQueueGenericSendFromISR+0xee>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d021      	beq.n	8005c5c <xQueueGenericSendFromISR+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 ff79 	bl	8006b14 <xTaskRemoveFromEventList>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d019      	beq.n	8005c5c <xQueueGenericSendFromISR+0x114>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <xQueueGenericSendFromISR+0x114>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e012      	b.n	8005c5c <xQueueGenericSendFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3c:	d106      	bne.n	8005c4c <xQueueGenericSendFromISR+0x104>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f383 8811 	msr	BASEPRI, r3
    }
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xQueueGenericSendFromISR+0x102>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c50:	3301      	adds	r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	b25a      	sxtb	r2, r3
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005c60:	e001      	b.n	8005c66 <xQueueGenericSendFromISR+0x11e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
    }
 8005c70:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3740      	adds	r7, #64	; 0x40
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <xQueueReceive+0x28>
 8005c96:	2300      	movs	r3, #0
 8005c98:	623b      	str	r3, [r7, #32]
        __asm volatile
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f383 8811 	msr	BASEPRI, r3
    }
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueReceive+0x26>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <xQueueReceive+0x36>
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueReceive+0x3a>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueReceive+0x3c>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <xQueueReceive+0x4e>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
    }
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <xQueueReceive+0x4c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005cca:	f001 fcc1 	bl	8007650 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01f      	beq.n	8005d1a <xQueueReceive+0x9e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cde:	f000 f9f7 	bl	80060d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <xQueueReceive+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	3310      	adds	r3, #16
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 ff0c 	bl	8006b14 <xTaskRemoveFromEventList>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <xQueueReceive+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005d02:	4b3d      	ldr	r3, [pc, #244]	; (8005df8 <xQueueReceive+0x17c>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005d12:	f001 fcc9 	bl	80076a8 <vPortExitCritical>
                return pdPASS;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e069      	b.n	8005dee <xQueueReceive+0x172>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <xQueueReceive+0xac>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005d20:	f001 fcc2 	bl	80076a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e062      	b.n	8005dee <xQueueReceive+0x172>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <xQueueReceive+0xc0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 ffc0 	bl	8006cb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005d3c:	f001 fcb4 	bl	80076a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005d40:	f000 fc58 	bl	80065f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005d44:	f001 fc84 	bl	8007650 <vPortEnterCritical>
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d103      	bne.n	8005d5e <xQueueReceive+0xe2>
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d103      	bne.n	8005d74 <xQueueReceive+0xf8>
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d74:	f001 fc98 	bl	80076a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d78:	1d3a      	adds	r2, r7, #4
 8005d7a:	f107 0314 	add.w	r3, r7, #20
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 ffaf 	bl	8006ce4 <xTaskCheckForTimeOut>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d123      	bne.n	8005dd4 <xQueueReceive+0x158>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8e:	f000 fa17 	bl	80061c0 <prvIsQueueEmpty>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <xQueueReceive+0x14c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fe97 	bl	8006ad4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da8:	f000 f9b8 	bl	800611c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005dac:	f000 fc30 	bl	8006610 <xTaskResumeAll>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d189      	bne.n	8005cca <xQueueReceive+0x4e>
                {
                    portYIELD_WITHIN_API();
 8005db6:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <xQueueReceive+0x17c>)
 8005db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	e780      	b.n	8005cca <xQueueReceive+0x4e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dca:	f000 f9a7 	bl	800611c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005dce:	f000 fc1f 	bl	8006610 <xTaskResumeAll>
 8005dd2:	e77a      	b.n	8005cca <xQueueReceive+0x4e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd6:	f000 f9a1 	bl	800611c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005dda:	f000 fc19 	bl	8006610 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de0:	f000 f9ee 	bl	80061c0 <prvIsQueueEmpty>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f43f af6f 	beq.w	8005cca <xQueueReceive+0x4e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005dec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3730      	adds	r7, #48	; 0x30
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08c      	sub	sp, #48	; 0x30
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <xQueueSemaphoreTake+0x2a>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
        __asm volatile
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f383 8811 	msr	BASEPRI, r3
    }
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueSemaphoreTake+0x28>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <xQueueSemaphoreTake+0x40>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f383 8811 	msr	BASEPRI, r3
    }
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <xQueueSemaphoreTake+0x3e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e3c:	f001 fc08 	bl	8007650 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d024      	beq.n	8005e96 <xQueueSemaphoreTake+0x9a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <xQueueSemaphoreTake+0x6a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e5c:	f001 fa48 	bl	80072f0 <pvTaskIncrementMutexHeldCount>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <xQueueSemaphoreTake+0x92>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	3310      	adds	r3, #16
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fe4e 	bl	8006b14 <xTaskRemoveFromEventList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <xQueueSemaphoreTake+0x92>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005e7e:	4b52      	ldr	r3, [pc, #328]	; (8005fc8 <xQueueSemaphoreTake+0x1cc>)
 8005e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005e8e:	f001 fc0b 	bl	80076a8 <vPortExitCritical>
                return pdPASS;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e093      	b.n	8005fbe <xQueueSemaphoreTake+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <xQueueSemaphoreTake+0xbc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <xQueueSemaphoreTake+0xb4>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f383 8811 	msr	BASEPRI, r3
    }
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueSemaphoreTake+0xb2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005eb0:	f001 fbfa 	bl	80076a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e082      	b.n	8005fbe <xQueueSemaphoreTake+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <xQueueSemaphoreTake+0xd0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fef8 	bl	8006cb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005ecc:	f001 fbec 	bl	80076a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005ed0:	f000 fb90 	bl	80065f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ed4:	f001 fbbc 	bl	8007650 <vPortEnterCritical>
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d103      	bne.n	8005eee <xQueueSemaphoreTake+0xf2>
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d103      	bne.n	8005f04 <xQueueSemaphoreTake+0x108>
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f04:	f001 fbd0 	bl	80076a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f08:	463a      	mov	r2, r7
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fee7 	bl	8006ce4 <xTaskCheckForTimeOut>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d132      	bne.n	8005f82 <xQueueSemaphoreTake+0x186>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f1e:	f000 f94f 	bl	80061c0 <prvIsQueueEmpty>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d026      	beq.n	8005f76 <xQueueSemaphoreTake+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
 8005f30:	f001 fb8e 	bl	8007650 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ffef 	bl	8006f1c <xTaskPriorityInherit>
 8005f3e:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8005f40:	f001 fbb2 	bl	80076a8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fdc1 	bl	8006ad4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f54:	f000 f8e2 	bl	800611c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f58:	f000 fb5a 	bl	8006610 <xTaskResumeAll>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f47f af6c 	bne.w	8005e3c <xQueueSemaphoreTake+0x40>
                {
                    portYIELD_WITHIN_API();
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <xQueueSemaphoreTake+0x1cc>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	e762      	b.n	8005e3c <xQueueSemaphoreTake+0x40>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f78:	f000 f8d0 	bl	800611c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f7c:	f000 fb48 	bl	8006610 <xTaskResumeAll>
 8005f80:	e75c      	b.n	8005e3c <xQueueSemaphoreTake+0x40>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f84:	f000 f8ca 	bl	800611c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f88:	f000 fb42 	bl	8006610 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8e:	f000 f917 	bl	80061c0 <prvIsQueueEmpty>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f43f af51 	beq.w	8005e3c <xQueueSemaphoreTake+0x40>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <xQueueSemaphoreTake+0x1c0>
                        {
                            taskENTER_CRITICAL();
 8005fa0:	f001 fb56 	bl	8007650 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa6:	f000 f811 	bl	8005fcc <prvGetDisinheritPriorityAfterTimeout>
 8005faa:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	69f9      	ldr	r1, [r7, #28]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 f8ec 	bl	8007190 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005fb8:	f001 fb76 	bl	80076a8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005fbc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3730      	adds	r7, #48	; 0x30
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1c3 0305 	rsb	r3, r3, #5
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e001      	b.n	8005fee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005fee:	68fb      	ldr	r3, [r7, #12]
    }
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10d      	bne.n	8006036 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d14d      	bne.n	80060be <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f816 	bl	8007058 <xTaskPriorityDisinherit>
 800602c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	e043      	b.n	80060be <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d119      	bne.n	8006070 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6858      	ldr	r0, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	461a      	mov	r2, r3
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	f001 fe2c 	bl	8007ca4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d32b      	bcc.n	80060be <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	e026      	b.n	80060be <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68d8      	ldr	r0, [r3, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	461a      	mov	r2, r3
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	f001 fe12 	bl	8007ca4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	425b      	negs	r3, r3
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d207      	bcs.n	80060ac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	425b      	negs	r3, r3
 80060a6:	441a      	add	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d105      	bne.n	80060be <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80060c6:	697b      	ldr	r3, [r7, #20]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d018      	beq.n	8006114 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	441a      	add	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d303      	bcc.n	8006104 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68d9      	ldr	r1, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	461a      	mov	r2, r3
 800610e:	6838      	ldr	r0, [r7, #0]
 8006110:	f001 fdc8 	bl	8007ca4 <memcpy>
    }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006124:	f001 fa94 	bl	8007650 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006130:	e011      	b.n	8006156 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d012      	beq.n	8006160 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3324      	adds	r3, #36	; 0x24
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fce8 	bl	8006b14 <xTaskRemoveFromEventList>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800614a:	f000 fe29 	bl	8006da0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	3b01      	subs	r3, #1
 8006152:	b2db      	uxtb	r3, r3
 8006154:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615a:	2b00      	cmp	r3, #0
 800615c:	dce9      	bgt.n	8006132 <prvUnlockQueue+0x16>
 800615e:	e000      	b.n	8006162 <prvUnlockQueue+0x46>
                        break;
 8006160:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	22ff      	movs	r2, #255	; 0xff
 8006166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800616a:	f001 fa9d 	bl	80076a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800616e:	f001 fa6f 	bl	8007650 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006178:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800617a:	e011      	b.n	80061a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d012      	beq.n	80061aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3310      	adds	r3, #16
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fcc3 	bl	8006b14 <xTaskRemoveFromEventList>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006194:	f000 fe04 	bl	8006da0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	3b01      	subs	r3, #1
 800619c:	b2db      	uxtb	r3, r3
 800619e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	dce9      	bgt.n	800617c <prvUnlockQueue+0x60>
 80061a8:	e000      	b.n	80061ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80061aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	22ff      	movs	r2, #255	; 0xff
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80061b4:	f001 fa78 	bl	80076a8 <vPortExitCritical>
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061c8:	f001 fa42 	bl	8007650 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e001      	b.n	80061de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80061de:	f001 fa63 	bl	80076a8 <vPortExitCritical>

    return xReturn;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061f4:	f001 fa2c 	bl	8007650 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	429a      	cmp	r2, r3
 8006202:	d102      	bne.n	800620a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e001      	b.n	800620e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800620e:	f001 fa4b 	bl	80076a8 <vPortExitCritical>

    return xReturn;
 8006212:	68fb      	ldr	r3, [r7, #12]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af04      	add	r7, sp, #16
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fb23 	bl	800787c <pvPortMalloc>
 8006236:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800623e:	2058      	movs	r0, #88	; 0x58
 8006240:	f001 fb1c 	bl	800787c <pvPortMalloc>
 8006244:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
 8006252:	e005      	b.n	8006260 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8006254:	6978      	ldr	r0, [r7, #20]
 8006256:	f001 fbe5 	bl	8007a24 <vPortFree>
 800625a:	e001      	b.n	8006260 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d013      	beq.n	800628e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	2300      	movs	r3, #0
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f80e 	bl	800629e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006282:	69f8      	ldr	r0, [r7, #28]
 8006284:	f000 f8a8 	bl	80063d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006288:	2301      	movs	r3, #1
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e002      	b.n	8006294 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006294:	69bb      	ldr	r3, [r7, #24]
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	461a      	mov	r2, r3
 80062b6:	21a5      	movs	r1, #165	; 0xa5
 80062b8:	f001 fd02 	bl	8007cc0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	3b01      	subs	r3, #1
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f023 0307 	bic.w	r3, r3, #7
 80062d4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d006      	beq.n	80062ee <prvInitialiseNewTask+0x50>
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f383 8811 	msr	BASEPRI, r3
    }
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <prvInitialiseNewTask+0x4e>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01f      	beq.n	8006334 <prvInitialiseNewTask+0x96>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f4:	2300      	movs	r3, #0
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e012      	b.n	8006320 <prvInitialiseNewTask+0x82>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	3334      	adds	r3, #52	; 0x34
 800630a:	460a      	mov	r2, r1
 800630c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <prvInitialiseNewTask+0x8a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3301      	adds	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b09      	cmp	r3, #9
 8006324:	d9e9      	bls.n	80062fa <prvInitialiseNewTask+0x5c>
 8006326:	e000      	b.n	800632a <prvInitialiseNewTask+0x8c>
            {
                break;
 8006328:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006332:	e003      	b.n	800633c <prvInitialiseNewTask+0x9e>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b04      	cmp	r3, #4
 8006340:	d906      	bls.n	8006350 <prvInitialiseNewTask+0xb2>
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f383 8811 	msr	BASEPRI, r3
    }
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b04      	cmp	r3, #4
 8006354:	d901      	bls.n	800635a <prvInitialiseNewTask+0xbc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006356:	2304      	movs	r3, #4
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006364:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	3304      	adds	r3, #4
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff f977 	bl	8005664 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	3318      	adds	r3, #24
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff f972 	bl	8005664 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006384:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	f1c3 0205 	rsb	r2, r3, #5
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	3350      	adds	r3, #80	; 0x50
 800639a:	2204      	movs	r2, #4
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fc8e 	bl	8007cc0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	3354      	adds	r3, #84	; 0x54
 80063a8:	2201      	movs	r2, #1
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fc87 	bl	8007cc0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	68f9      	ldr	r1, [r7, #12]
 80063b6:	69b8      	ldr	r0, [r7, #24]
 80063b8:	f001 f82e 	bl	8007418 <pxPortInitialiseStack>
 80063bc:	4602      	mov	r2, r0
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <prvInitialiseNewTask+0x130>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80063ce:	bf00      	nop
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80063e0:	f001 f936 	bl	8007650 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80063e4:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <prvAddNewTaskToReadyList+0x110>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a3f      	ldr	r2, [pc, #252]	; (80064e8 <prvAddNewTaskToReadyList+0x110>)
 80063ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80063ee:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <prvAddNewTaskToReadyList+0x114>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80063f6:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <prvAddNewTaskToReadyList+0x114>)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063fc:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <prvAddNewTaskToReadyList+0x110>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d110      	bne.n	8006426 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006404:	f000 fcf0 	bl	8006de8 <prvInitialiseTaskLists>
 8006408:	e00d      	b.n	8006426 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800640a:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <prvAddNewTaskToReadyList+0x118>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <prvAddNewTaskToReadyList+0x114>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	429a      	cmp	r2, r3
 800641e:	d802      	bhi.n	8006426 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006420:	4a32      	ldr	r2, [pc, #200]	; (80064ec <prvAddNewTaskToReadyList+0x114>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006426:	4b33      	ldr	r3, [pc, #204]	; (80064f4 <prvAddNewTaskToReadyList+0x11c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a31      	ldr	r2, [pc, #196]	; (80064f4 <prvAddNewTaskToReadyList+0x11c>)
 800642e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006430:	4b30      	ldr	r3, [pc, #192]	; (80064f4 <prvAddNewTaskToReadyList+0x11c>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	2201      	movs	r2, #1
 800643e:	409a      	lsls	r2, r3
 8006440:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <prvAddNewTaskToReadyList+0x120>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <prvAddNewTaskToReadyList+0x120>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644e:	492b      	ldr	r1, [pc, #172]	; (80064fc <prvAddNewTaskToReadyList+0x124>)
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	3304      	adds	r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	609a      	str	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	3204      	adds	r2, #4
 8006476:	605a      	str	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <prvAddNewTaskToReadyList+0x124>)
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	615a      	str	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4918      	ldr	r1, [pc, #96]	; (80064fc <prvAddNewTaskToReadyList+0x124>)
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	4814      	ldr	r0, [pc, #80]	; (80064fc <prvAddNewTaskToReadyList+0x124>)
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4403      	add	r3, r0
 80064b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80064b6:	f001 f8f7 	bl	80076a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <prvAddNewTaskToReadyList+0x118>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064c2:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <prvAddNewTaskToReadyList+0x114>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d207      	bcs.n	80064e0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <prvAddNewTaskToReadyList+0x128>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	200005b8 	.word	0x200005b8
 80064ec:	200004e0 	.word	0x200004e0
 80064f0:	200005c4 	.word	0x200005c4
 80064f4:	200005d4 	.word	0x200005d4
 80064f8:	200005c0 	.word	0x200005c0
 80064fc:	200004e4 	.word	0x200004e4
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d013      	beq.n	800653e <vTaskDelay+0x3a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <vTaskDelay+0x58>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <vTaskDelay+0x28>
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f383 8811 	msr	BASEPRI, r3
    }
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <vTaskDelay+0x26>
            vTaskSuspendAll();
 800652c:	f000 f862 	bl	80065f4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fef0 	bl	8007318 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006538:	f000 f86a 	bl	8006610 <xTaskResumeAll>
 800653c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d107      	bne.n	8006554 <vTaskDelay+0x50>
        {
            portYIELD_WITHIN_API();
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <vTaskDelay+0x5c>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200005e0 	.word	0x200005e0
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <vTaskStartScheduler+0x74>)
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	2282      	movs	r2, #130	; 0x82
 8006576:	4919      	ldr	r1, [pc, #100]	; (80065dc <vTaskStartScheduler+0x78>)
 8006578:	4819      	ldr	r0, [pc, #100]	; (80065e0 <vTaskStartScheduler+0x7c>)
 800657a:	f7ff fe4f 	bl	800621c <xTaskCreate>
 800657e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d116      	bne.n	80065b4 <vTaskStartScheduler+0x50>
        __asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60bb      	str	r3, [r7, #8]
    }
 8006598:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800659a:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <vTaskStartScheduler+0x80>)
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <vTaskStartScheduler+0x84>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a8:	4b10      	ldr	r3, [pc, #64]	; (80065ec <vTaskStartScheduler+0x88>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80065ae:	f000 ffb9 	bl	8007524 <xPortStartScheduler>
 80065b2:	e00a      	b.n	80065ca <vTaskStartScheduler+0x66>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d106      	bne.n	80065ca <vTaskStartScheduler+0x66>
 80065bc:	2300      	movs	r3, #0
 80065be:	607b      	str	r3, [r7, #4]
        __asm volatile
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f383 8811 	msr	BASEPRI, r3
    }
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <vTaskStartScheduler+0x64>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <vTaskStartScheduler+0x8c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200005dc 	.word	0x200005dc
 80065dc:	0800cdfc 	.word	0x0800cdfc
 80065e0:	08006db9 	.word	0x08006db9
 80065e4:	200005d8 	.word	0x200005d8
 80065e8:	200005c4 	.word	0x200005c4
 80065ec:	200005bc 	.word	0x200005bc
 80065f0:	200000dc 	.word	0x200000dc

080065f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <vTaskSuspendAll+0x18>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	4a03      	ldr	r2, [pc, #12]	; (800660c <vTaskSuspendAll+0x18>)
 8006600:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	200005e0 	.word	0x200005e0

08006610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800661e:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <xTaskResumeAll+0x1cc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <xTaskResumeAll+0x24>
 8006626:	2300      	movs	r3, #0
 8006628:	607b      	str	r3, [r7, #4]
        __asm volatile
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f383 8811 	msr	BASEPRI, r3
    }
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xTaskResumeAll+0x22>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006634:	f001 f80c 	bl	8007650 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006638:	4b68      	ldr	r3, [pc, #416]	; (80067dc <xTaskResumeAll+0x1cc>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a67      	ldr	r2, [pc, #412]	; (80067dc <xTaskResumeAll+0x1cc>)
 8006640:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006642:	4b66      	ldr	r3, [pc, #408]	; (80067dc <xTaskResumeAll+0x1cc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 80c0 	bne.w	80067cc <xTaskResumeAll+0x1bc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800664c:	4b64      	ldr	r3, [pc, #400]	; (80067e0 <xTaskResumeAll+0x1d0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80bb 	beq.w	80067cc <xTaskResumeAll+0x1bc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006656:	e08a      	b.n	800676e <xTaskResumeAll+0x15e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006658:	4b62      	ldr	r3, [pc, #392]	; (80067e4 <xTaskResumeAll+0x1d4>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	6a12      	ldr	r2, [r2, #32]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	69d2      	ldr	r2, [r2, #28]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3318      	adds	r3, #24
 8006682:	429a      	cmp	r2, r3
 8006684:	d103      	bne.n	800668e <xTaskResumeAll+0x7e>
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	6a1a      	ldr	r2, [r3, #32]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2200      	movs	r2, #0
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	68d2      	ldr	r2, [r2, #12]
 80066ac:	609a      	str	r2, [r3, #8]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	6892      	ldr	r2, [r2, #8]
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3304      	adds	r3, #4
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d103      	bne.n	80066cc <xTaskResumeAll+0xbc>
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2200      	movs	r2, #0
 80066d0:	615a      	str	r2, [r3, #20]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	2201      	movs	r2, #1
 80066e2:	409a      	lsls	r2, r3
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <xTaskResumeAll+0x1d8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <xTaskResumeAll+0x1d8>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	493e      	ldr	r1, [pc, #248]	; (80067ec <xTaskResumeAll+0x1dc>)
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3304      	adds	r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	3204      	adds	r2, #4
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1d1a      	adds	r2, r3, #4
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4a2e      	ldr	r2, [pc, #184]	; (80067ec <xTaskResumeAll+0x1dc>)
 8006732:	441a      	add	r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	615a      	str	r2, [r3, #20]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	492b      	ldr	r1, [pc, #172]	; (80067ec <xTaskResumeAll+0x1dc>)
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	4827      	ldr	r0, [pc, #156]	; (80067ec <xTaskResumeAll+0x1dc>)
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4403      	add	r3, r0
 8006758:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <xTaskResumeAll+0x1e0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	429a      	cmp	r2, r3
 8006766:	d302      	bcc.n	800676e <xTaskResumeAll+0x15e>
                    {
                        xYieldPending = pdTRUE;
 8006768:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <xTaskResumeAll+0x1e4>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800676e:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <xTaskResumeAll+0x1d4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f47f af70 	bne.w	8006658 <xTaskResumeAll+0x48>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <xTaskResumeAll+0x172>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800677e:	f000 fbb1 	bl	8006ee4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006782:	4b1d      	ldr	r3, [pc, #116]	; (80067f8 <xTaskResumeAll+0x1e8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d010      	beq.n	80067b0 <xTaskResumeAll+0x1a0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800678e:	f000 f837 	bl	8006800 <xTaskIncrementTick>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <xTaskResumeAll+0x18e>
                            {
                                xYieldPending = pdTRUE;
 8006798:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <xTaskResumeAll+0x1e4>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f1      	bne.n	800678e <xTaskResumeAll+0x17e>

                        xPendedTicks = 0;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <xTaskResumeAll+0x1e8>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80067b0:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <xTaskResumeAll+0x1e4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <xTaskResumeAll+0x1bc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <xTaskResumeAll+0x1ec>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80067cc:	f000 ff6c 	bl	80076a8 <vPortExitCritical>

    return xAlreadyYielded;
 80067d0:	69bb      	ldr	r3, [r7, #24]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200005e0 	.word	0x200005e0
 80067e0:	200005b8 	.word	0x200005b8
 80067e4:	20000578 	.word	0x20000578
 80067e8:	200005c0 	.word	0x200005c0
 80067ec:	200004e4 	.word	0x200004e4
 80067f0:	200004e0 	.word	0x200004e0
 80067f4:	200005cc 	.word	0x200005cc
 80067f8:	200005c8 	.word	0x200005c8
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680a:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <xTaskIncrementTick+0x1f8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 80e8 	bne.w	80069e4 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006814:	4b79      	ldr	r3, [pc, #484]	; (80069fc <xTaskIncrementTick+0x1fc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800681c:	4a77      	ldr	r2, [pc, #476]	; (80069fc <xTaskIncrementTick+0x1fc>)
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11c      	bne.n	8006862 <xTaskIncrementTick+0x62>
        {
            taskSWITCH_DELAYED_LISTS();
 8006828:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <xTaskIncrementTick+0x200>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <xTaskIncrementTick+0x40>
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
        __asm volatile
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f383 8811 	msr	BASEPRI, r3
    }
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xTaskIncrementTick+0x3e>
 8006840:	4b6f      	ldr	r3, [pc, #444]	; (8006a00 <xTaskIncrementTick+0x200>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	4b6f      	ldr	r3, [pc, #444]	; (8006a04 <xTaskIncrementTick+0x204>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a6d      	ldr	r2, [pc, #436]	; (8006a00 <xTaskIncrementTick+0x200>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4a6d      	ldr	r2, [pc, #436]	; (8006a04 <xTaskIncrementTick+0x204>)
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b6c      	ldr	r3, [pc, #432]	; (8006a08 <xTaskIncrementTick+0x208>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a6b      	ldr	r2, [pc, #428]	; (8006a08 <xTaskIncrementTick+0x208>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	f000 fb41 	bl	8006ee4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006862:	4b6a      	ldr	r3, [pc, #424]	; (8006a0c <xTaskIncrementTick+0x20c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	429a      	cmp	r2, r3
 800686a:	f0c0 80a6 	bcc.w	80069ba <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686e:	4b64      	ldr	r3, [pc, #400]	; (8006a00 <xTaskIncrementTick+0x200>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <xTaskIncrementTick+0x82>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006878:	4b64      	ldr	r3, [pc, #400]	; (8006a0c <xTaskIncrementTick+0x20c>)
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	601a      	str	r2, [r3, #0]
                    break;
 8006880:	e09b      	b.n	80069ba <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006882:	4b5f      	ldr	r3, [pc, #380]	; (8006a00 <xTaskIncrementTick+0x200>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006892:	6a3a      	ldr	r2, [r7, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d203      	bcs.n	80068a2 <xTaskIncrementTick+0xa2>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800689a:	4a5c      	ldr	r2, [pc, #368]	; (8006a0c <xTaskIncrementTick+0x20c>)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80068a0:	e08b      	b.n	80069ba <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	68d2      	ldr	r2, [r2, #12]
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	6892      	ldr	r2, [r2, #8]
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	3304      	adds	r3, #4
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d103      	bne.n	80068d0 <xTaskIncrementTick+0xd0>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01e      	beq.n	8006926 <xTaskIncrementTick+0x126>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	6a12      	ldr	r2, [r2, #32]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	69d2      	ldr	r2, [r2, #28]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3318      	adds	r3, #24
 800690a:	429a      	cmp	r2, r3
 800690c:	d103      	bne.n	8006916 <xTaskIncrementTick+0x116>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2200      	movs	r2, #0
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	2201      	movs	r2, #1
 800692c:	409a      	lsls	r2, r3
 800692e:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <xTaskIncrementTick+0x210>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4313      	orrs	r3, r2
 8006934:	4a36      	ldr	r2, [pc, #216]	; (8006a10 <xTaskIncrementTick+0x210>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4935      	ldr	r1, [pc, #212]	; (8006a14 <xTaskIncrementTick+0x214>)
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	3304      	adds	r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	60da      	str	r2, [r3, #12]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	3204      	adds	r2, #4
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <xTaskIncrementTick+0x214>)
 800697c:	441a      	add	r2, r3
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	615a      	str	r2, [r3, #20]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	4923      	ldr	r1, [pc, #140]	; (8006a14 <xTaskIncrementTick+0x214>)
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1c59      	adds	r1, r3, #1
 8006996:	481f      	ldr	r0, [pc, #124]	; (8006a14 <xTaskIncrementTick+0x214>)
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4403      	add	r3, r0
 80069a2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <xTaskIncrementTick+0x218>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	f4ff af5d 	bcc.w	800686e <xTaskIncrementTick+0x6e>
                            {
                                xSwitchRequired = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b8:	e759      	b.n	800686e <xTaskIncrementTick+0x6e>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <xTaskIncrementTick+0x218>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4914      	ldr	r1, [pc, #80]	; (8006a14 <xTaskIncrementTick+0x214>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d901      	bls.n	80069d6 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <xTaskIncrementTick+0x21c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
 80069e2:	e004      	b.n	80069ee <xTaskIncrementTick+0x1ee>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <xTaskIncrementTick+0x220>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a0d      	ldr	r2, [pc, #52]	; (8006a20 <xTaskIncrementTick+0x220>)
 80069ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3728      	adds	r7, #40	; 0x28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	200005e0 	.word	0x200005e0
 80069fc:	200005bc 	.word	0x200005bc
 8006a00:	20000570 	.word	0x20000570
 8006a04:	20000574 	.word	0x20000574
 8006a08:	200005d0 	.word	0x200005d0
 8006a0c:	200005d8 	.word	0x200005d8
 8006a10:	200005c0 	.word	0x200005c0
 8006a14:	200004e4 	.word	0x200004e4
 8006a18:	200004e0 	.word	0x200004e0
 8006a1c:	200005cc 	.word	0x200005cc
 8006a20:	200005c8 	.word	0x200005c8

08006a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2a:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <vTaskSwitchContext+0x9c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006a32:	4b24      	ldr	r3, [pc, #144]	; (8006ac4 <vTaskSwitchContext+0xa0>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006a38:	e03b      	b.n	8006ab2 <vTaskSwitchContext+0x8e>
        xYieldPending = pdFALSE;
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <vTaskSwitchContext+0xa0>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b21      	ldr	r3, [pc, #132]	; (8006ac8 <vTaskSwitchContext+0xa4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	fab3 f383 	clz	r3, r3
 8006a4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	f1c3 031f 	rsb	r3, r3, #31
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	491d      	ldr	r1, [pc, #116]	; (8006acc <vTaskSwitchContext+0xa8>)
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <vTaskSwitchContext+0x54>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f383 8811 	msr	BASEPRI, r3
    }
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vTaskSwitchContext+0x52>
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a12      	ldr	r2, [pc, #72]	; (8006acc <vTaskSwitchContext+0xa8>)
 8006a84:	4413      	add	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d104      	bne.n	8006aa8 <vTaskSwitchContext+0x84>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <vTaskSwitchContext+0xac>)
 8006ab0:	6013      	str	r3, [r2, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	200005e0 	.word	0x200005e0
 8006ac4:	200005cc 	.word	0x200005cc
 8006ac8:	200005c0 	.word	0x200005c0
 8006acc:	200004e4 	.word	0x200004e4
 8006ad0:	200004e0 	.word	0x200004e0

08006ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <vTaskPlaceOnEventList+0x1e>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f383 8811 	msr	BASEPRI, r3
    }
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <vTaskPlaceOnEventList+0x1c>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <vTaskPlaceOnEventList+0x3c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3318      	adds	r3, #24
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe fdbf 	bl	800567e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b00:	2101      	movs	r1, #1
 8006b02:	6838      	ldr	r0, [r7, #0]
 8006b04:	f000 fc08 	bl	8007318 <prvAddCurrentTaskToDelayedList>
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	200004e0 	.word	0x200004e0

08006b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b08b      	sub	sp, #44	; 0x2c
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <xTaskRemoveFromEventList+0x24>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f383 8811 	msr	BASEPRI, r3
    }
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xTaskRemoveFromEventList+0x22>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	6a3a      	ldr	r2, [r7, #32]
 8006b44:	6a12      	ldr	r2, [r2, #32]
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	69d2      	ldr	r2, [r2, #28]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	3318      	adds	r3, #24
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d103      	bne.n	8006b66 <xTaskRemoveFromEventList+0x52>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b76:	4b4a      	ldr	r3, [pc, #296]	; (8006ca0 <xTaskRemoveFromEventList+0x18c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d15e      	bne.n	8006c3c <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	68d2      	ldr	r2, [r2, #12]
 8006b8c:	609a      	str	r2, [r3, #8]
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d103      	bne.n	8006bac <xTaskRemoveFromEventList+0x98>
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	615a      	str	r2, [r3, #20]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1e5a      	subs	r2, r3, #1
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <xTaskRemoveFromEventList+0x190>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	4a36      	ldr	r2, [pc, #216]	; (8006ca4 <xTaskRemoveFromEventList+0x190>)
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	4935      	ldr	r1, [pc, #212]	; (8006ca8 <xTaskRemoveFromEventList+0x194>)
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3304      	adds	r3, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	609a      	str	r2, [r3, #8]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	6a3a      	ldr	r2, [r7, #32]
 8006bf8:	3204      	adds	r2, #4
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a25      	ldr	r2, [pc, #148]	; (8006ca8 <xTaskRemoveFromEventList+0x194>)
 8006c12:	441a      	add	r2, r3
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	615a      	str	r2, [r3, #20]
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4922      	ldr	r1, [pc, #136]	; (8006ca8 <xTaskRemoveFromEventList+0x194>)
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	481e      	ldr	r0, [pc, #120]	; (8006ca8 <xTaskRemoveFromEventList+0x194>)
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4403      	add	r3, r0
 8006c38:	6019      	str	r1, [r3, #0]
 8006c3a:	e01b      	b.n	8006c74 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <xTaskRemoveFromEventList+0x198>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	61da      	str	r2, [r3, #28]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	621a      	str	r2, [r3, #32]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	3218      	adds	r2, #24
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f103 0218 	add.w	r2, r3, #24
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4a11      	ldr	r2, [pc, #68]	; (8006cac <xTaskRemoveFromEventList+0x198>)
 8006c68:	629a      	str	r2, [r3, #40]	; 0x28
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <xTaskRemoveFromEventList+0x198>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <xTaskRemoveFromEventList+0x198>)
 8006c72:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <xTaskRemoveFromEventList+0x19c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d905      	bls.n	8006c8e <xTaskRemoveFromEventList+0x17a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <xTaskRemoveFromEventList+0x1a0>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e001      	b.n	8006c92 <xTaskRemoveFromEventList+0x17e>
    }
    else
    {
        xReturn = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	372c      	adds	r7, #44	; 0x2c
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	200005e0 	.word	0x200005e0
 8006ca4:	200005c0 	.word	0x200005c0
 8006ca8:	200004e4 	.word	0x200004e4
 8006cac:	20000578 	.word	0x20000578
 8006cb0:	200004e0 	.word	0x200004e0
 8006cb4:	200005cc 	.word	0x200005cc

08006cb8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <vTaskInternalSetTimeOutState+0x24>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <vTaskInternalSetTimeOutState+0x28>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	200005d0 	.word	0x200005d0
 8006ce0:	200005bc 	.word	0x200005bc

08006ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <xTaskCheckForTimeOut+0x1e>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
    }
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xTaskCheckForTimeOut+0x1c>
    configASSERT( pxTicksToWait );
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <xTaskCheckForTimeOut+0x32>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f383 8811 	msr	BASEPRI, r3
    }
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xTaskCheckForTimeOut+0x30>

    taskENTER_CRITICAL();
 8006d16:	f000 fc9b 	bl	8007650 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <xTaskCheckForTimeOut+0xb4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d102      	bne.n	8006d3a <xTaskCheckForTimeOut+0x56>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e026      	b.n	8006d88 <xTaskCheckForTimeOut+0xa4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <xTaskCheckForTimeOut+0xb8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d00a      	beq.n	8006d5c <xTaskCheckForTimeOut+0x78>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d305      	bcc.n	8006d5c <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e015      	b.n	8006d88 <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d20b      	bcs.n	8006d7e <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	1ad2      	subs	r2, r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff ffa0 	bl	8006cb8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e004      	b.n	8006d88 <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006d88:	f000 fc8e 	bl	80076a8 <vPortExitCritical>

    return xReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200005bc 	.word	0x200005bc
 8006d9c:	200005d0 	.word	0x200005d0

08006da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006da4:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <vTaskMissedYield+0x14>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	200005cc 	.word	0x200005cc

08006db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006dc0:	f000 f852 	bl	8006e68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <prvIdleTask+0x28>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d9f9      	bls.n	8006dc0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <prvIdleTask+0x2c>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006ddc:	e7f0      	b.n	8006dc0 <prvIdleTask+0x8>
 8006dde:	bf00      	nop
 8006de0:	200004e4 	.word	0x200004e4
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e00c      	b.n	8006e0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <prvInitialiseTaskLists+0x60>)
 8006e00:	4413      	add	r3, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fc0e 	bl	8005624 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	607b      	str	r3, [r7, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d9ef      	bls.n	8006df4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006e14:	480d      	ldr	r0, [pc, #52]	; (8006e4c <prvInitialiseTaskLists+0x64>)
 8006e16:	f7fe fc05 	bl	8005624 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006e1a:	480d      	ldr	r0, [pc, #52]	; (8006e50 <prvInitialiseTaskLists+0x68>)
 8006e1c:	f7fe fc02 	bl	8005624 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006e20:	480c      	ldr	r0, [pc, #48]	; (8006e54 <prvInitialiseTaskLists+0x6c>)
 8006e22:	f7fe fbff 	bl	8005624 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006e26:	480c      	ldr	r0, [pc, #48]	; (8006e58 <prvInitialiseTaskLists+0x70>)
 8006e28:	f7fe fbfc 	bl	8005624 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006e2c:	480b      	ldr	r0, [pc, #44]	; (8006e5c <prvInitialiseTaskLists+0x74>)
 8006e2e:	f7fe fbf9 	bl	8005624 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <prvInitialiseTaskLists+0x78>)
 8006e34:	4a05      	ldr	r2, [pc, #20]	; (8006e4c <prvInitialiseTaskLists+0x64>)
 8006e36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <prvInitialiseTaskLists+0x7c>)
 8006e3a:	4a05      	ldr	r2, [pc, #20]	; (8006e50 <prvInitialiseTaskLists+0x68>)
 8006e3c:	601a      	str	r2, [r3, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200004e4 	.word	0x200004e4
 8006e4c:	20000548 	.word	0x20000548
 8006e50:	2000055c 	.word	0x2000055c
 8006e54:	20000578 	.word	0x20000578
 8006e58:	2000058c 	.word	0x2000058c
 8006e5c:	200005a4 	.word	0x200005a4
 8006e60:	20000570 	.word	0x20000570
 8006e64:	20000574 	.word	0x20000574

08006e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e6e:	e019      	b.n	8006ea4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006e70:	f000 fbee 	bl	8007650 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e74:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <prvCheckTasksWaitingTermination+0x50>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fc35 	bl	80056f0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <prvCheckTasksWaitingTermination+0x54>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a0b      	ldr	r2, [pc, #44]	; (8006ebc <prvCheckTasksWaitingTermination+0x54>)
 8006e8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <prvCheckTasksWaitingTermination+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <prvCheckTasksWaitingTermination+0x58>)
 8006e98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006e9a:	f000 fc05 	bl	80076a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f810 	bl	8006ec4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <prvCheckTasksWaitingTermination+0x58>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e1      	bne.n	8006e70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000058c 	.word	0x2000058c
 8006ebc:	200005b8 	.word	0x200005b8
 8006ec0:	200005a0 	.word	0x200005a0

08006ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fda7 	bl	8007a24 <vPortFree>
                vPortFree( pxTCB );
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fda4 	bl	8007a24 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvResetNextTaskUnblockTime+0x30>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <prvResetNextTaskUnblockTime+0x34>)
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006efa:	e005      	b.n	8006f08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <prvResetNextTaskUnblockTime+0x30>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <prvResetNextTaskUnblockTime+0x34>)
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000570 	.word	0x20000570
 8006f18:	200005d8 	.word	0x200005d8

08006f1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8087 	beq.w	8007042 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4b44      	ldr	r3, [pc, #272]	; (800704c <xTaskPriorityInherit+0x130>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d276      	bcs.n	8007030 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	db06      	blt.n	8006f58 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4a:	4b40      	ldr	r3, [pc, #256]	; (800704c <xTaskPriorityInherit+0x130>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	f1c3 0205 	rsb	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6959      	ldr	r1, [r3, #20]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a39      	ldr	r2, [pc, #228]	; (8007050 <xTaskPriorityInherit+0x134>)
 8006f6a:	4413      	add	r3, r2
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	d157      	bne.n	8007020 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fbbb 	bl	80056f0 <uxListRemove>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2201      	movs	r2, #1
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	4b31      	ldr	r3, [pc, #196]	; (8007054 <xTaskPriorityInherit+0x138>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	4a30      	ldr	r2, [pc, #192]	; (8007054 <xTaskPriorityInherit+0x138>)
 8006f94:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <xTaskPriorityInherit+0x130>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <xTaskPriorityInherit+0x138>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	4a29      	ldr	r2, [pc, #164]	; (8007054 <xTaskPriorityInherit+0x138>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4926      	ldr	r1, [pc, #152]	; (8007050 <xTaskPriorityInherit+0x134>)
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	3204      	adds	r2, #4
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a16      	ldr	r2, [pc, #88]	; (8007050 <xTaskPriorityInherit+0x134>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	615a      	str	r2, [r3, #20]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	4913      	ldr	r1, [pc, #76]	; (8007050 <xTaskPriorityInherit+0x134>)
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	480f      	ldr	r0, [pc, #60]	; (8007050 <xTaskPriorityInherit+0x134>)
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4403      	add	r3, r0
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	e004      	b.n	800702a <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <xTaskPriorityInherit+0x130>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e008      	b.n	8007042 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <xTaskPriorityInherit+0x130>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d201      	bcs.n	8007042 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800703e:	2301      	movs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007042:	697b      	ldr	r3, [r7, #20]
    }
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200004e0 	.word	0x200004e0
 8007050:	200004e4 	.word	0x200004e4
 8007054:	200005c0 	.word	0x200005c0

08007058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8084 	beq.w	8007178 <xTaskPriorityDisinherit+0x120>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <xTaskPriorityDisinherit+0x12c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	429a      	cmp	r2, r3
 8007078:	d006      	beq.n	8007088 <xTaskPriorityDisinherit+0x30>
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f383 8811 	msr	BASEPRI, r3
    }
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xTaskPriorityDisinherit+0x2e>
            configASSERT( pxTCB->uxMutexesHeld );
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <xTaskPriorityDisinherit+0x46>
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f383 8811 	msr	BASEPRI, r3
    }
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xTaskPriorityDisinherit+0x44>
            ( pxTCB->uxMutexesHeld )--;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a2:	1e5a      	subs	r2, r3, #1
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d061      	beq.n	8007178 <xTaskPriorityDisinherit+0x120>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d15d      	bne.n	8007178 <xTaskPriorityDisinherit+0x120>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fb15 	bl	80056f0 <uxListRemove>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xTaskPriorityDisinherit+0x8a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	2201      	movs	r2, #1
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43da      	mvns	r2, r3
 80070d8:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <xTaskPriorityDisinherit+0x130>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4013      	ands	r3, r2
 80070de:	4a2a      	ldr	r2, [pc, #168]	; (8007188 <xTaskPriorityDisinherit+0x130>)
 80070e0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	f1c3 0205 	rsb	r2, r3, #5
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	2201      	movs	r2, #1
 80070fc:	409a      	lsls	r2, r3
 80070fe:	4b22      	ldr	r3, [pc, #136]	; (8007188 <xTaskPriorityDisinherit+0x130>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <xTaskPriorityDisinherit+0x130>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	491f      	ldr	r1, [pc, #124]	; (800718c <xTaskPriorityDisinherit+0x134>)
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	3304      	adds	r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	609a      	str	r2, [r3, #8]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	3204      	adds	r2, #4
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	609a      	str	r2, [r3, #8]
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4a10      	ldr	r2, [pc, #64]	; (800718c <xTaskPriorityDisinherit+0x134>)
 800714c:	441a      	add	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	615a      	str	r2, [r3, #20]
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007156:	490d      	ldr	r1, [pc, #52]	; (800718c <xTaskPriorityDisinherit+0x134>)
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	1c59      	adds	r1, r3, #1
 8007166:	4809      	ldr	r0, [pc, #36]	; (800718c <xTaskPriorityDisinherit+0x134>)
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4403      	add	r3, r0
 8007172:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007178:	69fb      	ldr	r3, [r7, #28]
    }
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200004e0 	.word	0x200004e0
 8007188:	200005c0 	.word	0x200005c0
 800718c:	200004e4 	.word	0x200004e4

08007190 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8098 	beq.w	80072da <vTaskPriorityDisinheritAfterTimeout+0x14a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
        __asm volatile
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f383 8811 	msr	BASEPRI, r3
    }
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <vTaskPriorityDisinheritAfterTimeout+0x2e>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d902      	bls.n	80071d0 <vTaskPriorityDisinheritAfterTimeout+0x40>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
 80071ce:	e002      	b.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071dc:	429a      	cmp	r2, r3
 80071de:	d07c      	beq.n	80072da <vTaskPriorityDisinheritAfterTimeout+0x14a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d177      	bne.n	80072da <vTaskPriorityDisinheritAfterTimeout+0x14a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80071ea:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a3a      	ldr	r2, [r7, #32]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d106      	bne.n	8007202 <vTaskPriorityDisinheritAfterTimeout+0x72>
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f383 8811 	msr	BASEPRI, r3
    }
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0x70>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	db04      	blt.n	8007220 <vTaskPriorityDisinheritAfterTimeout+0x90>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	f1c3 0205 	rsb	r2, r3, #5
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	6959      	ldr	r1, [r3, #20]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8007230:	4413      	add	r3, r2
 8007232:	4299      	cmp	r1, r3
 8007234:	d151      	bne.n	80072da <vTaskPriorityDisinheritAfterTimeout+0x14a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fa58 	bl	80056f0 <uxListRemove>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <vTaskPriorityDisinheritAfterTimeout+0xcc>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	2201      	movs	r2, #1
 800724c:	fa02 f303 	lsl.w	r3, r2, r3
 8007250:	43da      	mvns	r2, r3
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4013      	ands	r3, r2
 8007258:	4a24      	ldr	r2, [pc, #144]	; (80072ec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800725a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	4b21      	ldr	r3, [pc, #132]	; (80072ec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4a20      	ldr	r2, [pc, #128]	; (80072ec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	491d      	ldr	r1, [pc, #116]	; (80072e8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	3304      	adds	r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	60da      	str	r2, [r3, #12]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	3204      	adds	r2, #4
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	609a      	str	r2, [r3, #8]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a0d      	ldr	r2, [pc, #52]	; (80072e8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80072b2:	441a      	add	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	615a      	str	r2, [r3, #20]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	490a      	ldr	r1, [pc, #40]	; (80072e8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	4806      	ldr	r0, [pc, #24]	; (80072e8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4403      	add	r3, r0
 80072d8:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80072da:	bf00      	nop
 80072dc:	3728      	adds	r7, #40	; 0x28
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200004e0 	.word	0x200004e0
 80072e8:	200004e4 	.word	0x200004e4
 80072ec:	200005c0 	.word	0x200005c0

080072f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80072f4:	4b07      	ldr	r3, [pc, #28]	; (8007314 <pvTaskIncrementMutexHeldCount+0x24>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <pvTaskIncrementMutexHeldCount+0x24>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007302:	3201      	adds	r2, #1
 8007304:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8007306:	4b03      	ldr	r3, [pc, #12]	; (8007314 <pvTaskIncrementMutexHeldCount+0x24>)
 8007308:	681b      	ldr	r3, [r3, #0]
    }
 800730a:	4618      	mov	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	200004e0 	.word	0x200004e0

08007318 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007322:	4b36      	ldr	r3, [pc, #216]	; (80073fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007328:	4b35      	ldr	r3, [pc, #212]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe f9de 	bl	80056f0 <uxListRemove>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800733a:	4b31      	ldr	r3, [pc, #196]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	2201      	movs	r2, #1
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	43da      	mvns	r2, r3
 8007348:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <prvAddCurrentTaskToDelayedList+0xec>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4013      	ands	r3, r2
 800734e:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <prvAddCurrentTaskToDelayedList+0xec>)
 8007350:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d124      	bne.n	80073a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d021      	beq.n	80073a4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007360:	4b29      	ldr	r3, [pc, #164]	; (8007408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	4b26      	ldr	r3, [pc, #152]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	609a      	str	r2, [r3, #8]
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	6892      	ldr	r2, [r2, #8]
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	4b21      	ldr	r3, [pc, #132]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	3204      	adds	r2, #4
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	1d1a      	adds	r2, r3, #4
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	609a      	str	r2, [r3, #8]
 800738e:	4b1c      	ldr	r3, [pc, #112]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007394:	615a      	str	r2, [r3, #20]
 8007396:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	4a1a      	ldr	r2, [pc, #104]	; (8007408 <prvAddCurrentTaskToDelayedList+0xf0>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80073a2:	e026      	b.n	80073f2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d209      	bcs.n	80073d0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073bc:	4b13      	ldr	r3, [pc, #76]	; (800740c <prvAddCurrentTaskToDelayedList+0xf4>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7fe f958 	bl	800567e <vListInsert>
}
 80073ce:	e010      	b.n	80073f2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvAddCurrentTaskToDelayedList+0xf8>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe f94e 	bl	800567e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <prvAddCurrentTaskToDelayedList+0xfc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d202      	bcs.n	80073f2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <prvAddCurrentTaskToDelayedList+0xfc>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6013      	str	r3, [r2, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200005bc 	.word	0x200005bc
 8007400:	200004e0 	.word	0x200004e0
 8007404:	200005c0 	.word	0x200005c0
 8007408:	200005a4 	.word	0x200005a4
 800740c:	20000574 	.word	0x20000574
 8007410:	20000570 	.word	0x20000570
 8007414:	200005d8 	.word	0x200005d8

08007418 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b04      	subs	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007430:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0201 	bic.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007448:	4a0c      	ldr	r2, [pc, #48]	; (800747c <pxPortInitialiseStack+0x64>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b14      	subs	r3, #20
 8007452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b04      	subs	r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f06f 0202 	mvn.w	r2, #2
 8007466:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3b20      	subs	r3, #32
 800746c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	08007481 	.word	0x08007481

08007480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <prvTaskExitError+0x4c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d006      	beq.n	80074a2 <prvTaskExitError+0x22>
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f383 8811 	msr	BASEPRI, r3
    }
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <prvTaskExitError+0x20>
        __asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
    }
 80074b4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80074b6:	bf00      	nop
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0fc      	beq.n	80074b8 <prvTaskExitError+0x38>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	200000e0 	.word	0x200000e0

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	200004e0 	.word	0x200004e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
 800751a:	0000      	.short	0x0000
 800751c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop

08007524 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800752a:	4b40      	ldr	r3, [pc, #256]	; (800762c <xPortStartScheduler+0x108>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a40      	ldr	r2, [pc, #256]	; (8007630 <xPortStartScheduler+0x10c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d106      	bne.n	8007542 <xPortStartScheduler+0x1e>
 8007534:	2300      	movs	r3, #0
 8007536:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f383 8811 	msr	BASEPRI, r3
    }
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xPortStartScheduler+0x1c>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007542:	4b3a      	ldr	r3, [pc, #232]	; (800762c <xPortStartScheduler+0x108>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <xPortStartScheduler+0x110>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d106      	bne.n	800755a <xPortStartScheduler+0x36>
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f383 8811 	msr	BASEPRI, r3
    }
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xPortStartScheduler+0x34>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800755a:	4b37      	ldr	r3, [pc, #220]	; (8007638 <xPortStartScheduler+0x114>)
 800755c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b2f      	ldr	r3, [pc, #188]	; (800763c <xPortStartScheduler+0x118>)
 8007580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007582:	4b2f      	ldr	r3, [pc, #188]	; (8007640 <xPortStartScheduler+0x11c>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007588:	e009      	b.n	800759e <xPortStartScheduler+0x7a>
            {
                ulMaxPRIGROUPValue--;
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <xPortStartScheduler+0x11c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a2b      	ldr	r2, [pc, #172]	; (8007640 <xPortStartScheduler+0x11c>)
 8007592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d0ef      	beq.n	800758a <xPortStartScheduler+0x66>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <xPortStartScheduler+0x11c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1c3 0307 	rsb	r3, r3, #7
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d006      	beq.n	80075c4 <xPortStartScheduler+0xa0>
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f383 8811 	msr	BASEPRI, r3
    }
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xPortStartScheduler+0x9e>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075c4:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <xPortStartScheduler+0x11c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <xPortStartScheduler+0x11c>)
 80075cc:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075ce:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <xPortStartScheduler+0x11c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075d6:	4a1a      	ldr	r2, [pc, #104]	; (8007640 <xPortStartScheduler+0x11c>)
 80075d8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80075e2:	4b18      	ldr	r3, [pc, #96]	; (8007644 <xPortStartScheduler+0x120>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <xPortStartScheduler+0x120>)
 80075e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075ec:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <xPortStartScheduler+0x120>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a14      	ldr	r2, [pc, #80]	; (8007644 <xPortStartScheduler+0x120>)
 80075f4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075f8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80075fa:	f000 f8d7 	bl	80077ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <xPortStartScheduler+0x124>)
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007604:	f000 f8f6 	bl	80077f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007608:	4b10      	ldr	r3, [pc, #64]	; (800764c <xPortStartScheduler+0x128>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a0f      	ldr	r2, [pc, #60]	; (800764c <xPortStartScheduler+0x128>)
 800760e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007612:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007614:	f7ff ff70 	bl	80074f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007618:	f7ff fa04 	bl	8006a24 <vTaskSwitchContext>
    prvTaskExitError();
 800761c:	f7ff ff30 	bl	8007480 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	e000ed00 	.word	0xe000ed00
 8007630:	410fc271 	.word	0x410fc271
 8007634:	410fc270 	.word	0x410fc270
 8007638:	e000e400 	.word	0xe000e400
 800763c:	200005e4 	.word	0x200005e4
 8007640:	200005e8 	.word	0x200005e8
 8007644:	e000ed20 	.word	0xe000ed20
 8007648:	200000e0 	.word	0x200000e0
 800764c:	e000ef34 	.word	0xe000ef34

08007650 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
        __asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	607b      	str	r3, [r7, #4]
    }
 8007668:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <vPortEnterCritical+0x50>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <vPortEnterCritical+0x50>)
 8007672:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <vPortEnterCritical+0x50>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10b      	bne.n	8007694 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <vPortEnterCritical+0x54>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d006      	beq.n	8007694 <vPortEnterCritical+0x44>
 8007686:	2300      	movs	r3, #0
 8007688:	603b      	str	r3, [r7, #0]
        __asm volatile
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	f383 8811 	msr	BASEPRI, r3
    }
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <vPortEnterCritical+0x42>
    }
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	200000e0 	.word	0x200000e0
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80076ae:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <vPortExitCritical+0x48>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <vPortExitCritical+0x1c>
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
        __asm volatile
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f383 8811 	msr	BASEPRI, r3
    }
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <vPortExitCritical+0x1a>
    uxCriticalNesting--;
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <vPortExitCritical+0x48>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <vPortExitCritical+0x48>)
 80076cc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <vPortExitCritical+0x48>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d105      	bne.n	80076e2 <vPortExitCritical+0x3a>
 80076d6:	2300      	movs	r3, #0
 80076d8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f383 8811 	msr	BASEPRI, r3
    }
 80076e0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	200000e0 	.word	0x200000e0
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7ff f978 	bl	8006a24 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	200004e0 	.word	0x200004e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
        __asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
    }
 8007780:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7ff f83d 	bl	8006800 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <SysTick_Handler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
    }
 800779e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
 8007802:	0000      	.short	0x0000
 8007804:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop

0800780c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007812:	f3ef 8305 	mrs	r3, IPSR
 8007816:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d910      	bls.n	8007840 <vPortValidateInterruptPriority+0x34>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781e:	4a13      	ldr	r2, [pc, #76]	; (800786c <vPortValidateInterruptPriority+0x60>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007828:	4b11      	ldr	r3, [pc, #68]	; (8007870 <vPortValidateInterruptPriority+0x64>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	429a      	cmp	r2, r3
 8007830:	d206      	bcs.n	8007840 <vPortValidateInterruptPriority+0x34>
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
        __asm volatile
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f383 8811 	msr	BASEPRI, r3
    }
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <vPortValidateInterruptPriority+0x32>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <vPortValidateInterruptPriority+0x68>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <vPortValidateInterruptPriority+0x6c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d906      	bls.n	800785e <vPortValidateInterruptPriority+0x52>
 8007850:	2300      	movs	r3, #0
 8007852:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f383 8811 	msr	BASEPRI, r3
    }
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <vPortValidateInterruptPriority+0x50>
    }
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	e000e3f0 	.word	0xe000e3f0
 8007870:	200005e4 	.word	0x200005e4
 8007874:	e000ed0c 	.word	0xe000ed0c
 8007878:	200005e8 	.word	0x200005e8

0800787c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007888:	f7fe feb4 	bl	80065f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800788c:	4b5f      	ldr	r3, [pc, #380]	; (8007a0c <pvPortMalloc+0x190>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007894:	f000 f920 	bl	8007ad8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007898:	4b5d      	ldr	r3, [pc, #372]	; (8007a10 <pvPortMalloc+0x194>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 809f 	bne.w	80079e4 <pvPortMalloc+0x168>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d029      	beq.n	8007900 <pvPortMalloc+0x84>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80078ac:	2208      	movs	r2, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d223      	bcs.n	8007900 <pvPortMalloc+0x84>
            {
                xWantedSize += xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01d      	beq.n	8007906 <pvPortMalloc+0x8a>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	3308      	adds	r3, #8
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d210      	bcs.n	80078fa <pvPortMalloc+0x7e>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	3308      	adds	r3, #8
 80078e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00c      	beq.n	8007906 <pvPortMalloc+0x8a>
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
        __asm volatile
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f383 8811 	msr	BASEPRI, r3
    }
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <pvPortMalloc+0x7c>
                    }
                    else
                    {
                        xWantedSize = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078fe:	e002      	b.n	8007906 <pvPortMalloc+0x8a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	e000      	b.n	8007908 <pvPortMalloc+0x8c>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007906:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d06a      	beq.n	80079e4 <pvPortMalloc+0x168>
 800790e:	4b41      	ldr	r3, [pc, #260]	; (8007a14 <pvPortMalloc+0x198>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d865      	bhi.n	80079e4 <pvPortMalloc+0x168>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007918:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <pvPortMalloc+0x19c>)
 800791a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800791c:	4b3e      	ldr	r3, [pc, #248]	; (8007a18 <pvPortMalloc+0x19c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007922:	e004      	b.n	800792e <pvPortMalloc+0xb2>
                {
                    pxPreviousBlock = pxBlock;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d903      	bls.n	8007940 <pvPortMalloc+0xc4>
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f1      	bne.n	8007924 <pvPortMalloc+0xa8>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007940:	4b32      	ldr	r3, [pc, #200]	; (8007a0c <pvPortMalloc+0x190>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	429a      	cmp	r2, r3
 8007948:	d04c      	beq.n	80079e4 <pvPortMalloc+0x168>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2208      	movs	r2, #8
 8007950:	4413      	add	r3, r2
 8007952:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	2308      	movs	r3, #8
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	429a      	cmp	r2, r3
 800796a:	d91b      	bls.n	80079a4 <pvPortMalloc+0x128>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <pvPortMalloc+0x110>
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f383 8811 	msr	BASEPRI, r3
    }
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <pvPortMalloc+0x10e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800799e:	69b8      	ldr	r0, [r7, #24]
 80079a0:	f000 f8fc 	bl	8007b9c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a4:	4b1b      	ldr	r3, [pc, #108]	; (8007a14 <pvPortMalloc+0x198>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <pvPortMalloc+0x198>)
 80079b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079b2:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <pvPortMalloc+0x198>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <pvPortMalloc+0x1a0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d203      	bcs.n	80079c6 <pvPortMalloc+0x14a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <pvPortMalloc+0x198>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a16      	ldr	r2, [pc, #88]	; (8007a1c <pvPortMalloc+0x1a0>)
 80079c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <pvPortMalloc+0x194>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80079da:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <pvPortMalloc+0x1a4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <pvPortMalloc+0x1a4>)
 80079e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80079e4:	f7fe fe14 	bl	8006610 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d006      	beq.n	8007a00 <pvPortMalloc+0x184>
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f383 8811 	msr	BASEPRI, r3
    }
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <pvPortMalloc+0x182>
    return pvReturn;
 8007a00:	69fb      	ldr	r3, [r7, #28]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3728      	adds	r7, #40	; 0x28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200131f4 	.word	0x200131f4
 8007a10:	20013208 	.word	0x20013208
 8007a14:	200131f8 	.word	0x200131f8
 8007a18:	200131ec 	.word	0x200131ec
 8007a1c:	200131fc 	.word	0x200131fc
 8007a20:	20013200 	.word	0x20013200

08007a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d045      	beq.n	8007ac2 <vPortFree+0x9e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007a36:	2308      	movs	r3, #8
 8007a38:	425b      	negs	r3, r3
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b20      	ldr	r3, [pc, #128]	; (8007acc <vPortFree+0xa8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <vPortFree+0x3c>
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f383 8811 	msr	BASEPRI, r3
    }
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d006      	beq.n	8007a76 <vPortFree+0x52>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f383 8811 	msr	BASEPRI, r3
    }
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <vPortFree+0x50>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <vPortFree+0xa8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01e      	beq.n	8007ac2 <vPortFree+0x9e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d11a      	bne.n	8007ac2 <vPortFree+0x9e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <vPortFree+0xa8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	43db      	mvns	r3, r3
 8007a96:	401a      	ands	r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007a9c:	f7fe fdaa 	bl	80065f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <vPortFree+0xac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <vPortFree+0xac>)
 8007aac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aae:	6938      	ldr	r0, [r7, #16]
 8007ab0:	f000 f874 	bl	8007b9c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <vPortFree+0xb0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a06      	ldr	r2, [pc, #24]	; (8007ad4 <vPortFree+0xb0>)
 8007abc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007abe:	f7fe fda7 	bl	8006610 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20013208 	.word	0x20013208
 8007ad0:	200131f8 	.word	0x200131f8
 8007ad4:	20013204 	.word	0x20013204

08007ad8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ade:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007ae2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007ae4:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <prvHeapInit+0xac>)
 8007ae6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3307      	adds	r3, #7
 8007af6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <prvHeapInit+0xac>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <prvHeapInit+0xb0>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007b16:	4b1c      	ldr	r3, [pc, #112]	; (8007b88 <prvHeapInit+0xb0>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007b24:	2208      	movs	r2, #8
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <prvHeapInit+0xb4>)
 8007b38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007b3a:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <prvHeapInit+0xb4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <prvHeapInit+0xb4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <prvHeapInit+0xb4>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	4a0a      	ldr	r2, [pc, #40]	; (8007b90 <prvHeapInit+0xb8>)
 8007b66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <prvHeapInit+0xbc>)
 8007b6e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <prvHeapInit+0xc0>)
 8007b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b76:	601a      	str	r2, [r3, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	200005ec 	.word	0x200005ec
 8007b88:	200131ec 	.word	0x200131ec
 8007b8c:	200131f4 	.word	0x200131f4
 8007b90:	200131fc 	.word	0x200131fc
 8007b94:	200131f8 	.word	0x200131f8
 8007b98:	20013208 	.word	0x20013208

08007b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <prvInsertBlockIntoFreeList+0xac>)
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e002      	b.n	8007bb0 <prvInsertBlockIntoFreeList+0x14>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d8f7      	bhi.n	8007baa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d108      	bne.n	8007bde <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d118      	bne.n	8007c24 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <prvInsertBlockIntoFreeList+0xb0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d00d      	beq.n	8007c1a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e008      	b.n	8007c2c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c1a:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <prvInsertBlockIntoFreeList+0xb0>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e003      	b.n	8007c2c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d002      	beq.n	8007c3a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	200131ec 	.word	0x200131ec
 8007c4c:	200131f4 	.word	0x200131f4

08007c50 <__errno>:
 8007c50:	4b01      	ldr	r3, [pc, #4]	; (8007c58 <__errno+0x8>)
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	200000e4 	.word	0x200000e4

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4d0d      	ldr	r5, [pc, #52]	; (8007c94 <__libc_init_array+0x38>)
 8007c60:	4c0d      	ldr	r4, [pc, #52]	; (8007c98 <__libc_init_array+0x3c>)
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	2600      	movs	r6, #0
 8007c68:	42a6      	cmp	r6, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	4d0b      	ldr	r5, [pc, #44]	; (8007c9c <__libc_init_array+0x40>)
 8007c6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ca0 <__libc_init_array+0x44>)
 8007c70:	f004 fcb8 	bl	800c5e4 <_init>
 8007c74:	1b64      	subs	r4, r4, r5
 8007c76:	10a4      	asrs	r4, r4, #2
 8007c78:	2600      	movs	r6, #0
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c84:	4798      	blx	r3
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8e:	4798      	blx	r3
 8007c90:	3601      	adds	r6, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	0800d2d4 	.word	0x0800d2d4
 8007c98:	0800d2d4 	.word	0x0800d2d4
 8007c9c:	0800d2d4 	.word	0x0800d2d4
 8007ca0:	0800d2d8 	.word	0x0800d2d8

08007ca4 <memcpy>:
 8007ca4:	440a      	add	r2, r1
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cac:	d100      	bne.n	8007cb0 <memcpy+0xc>
 8007cae:	4770      	bx	lr
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d1f9      	bne.n	8007cb2 <memcpy+0xe>
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <memset>:
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d100      	bne.n	8007cca <memset+0xa>
 8007cc8:	4770      	bx	lr
 8007cca:	f803 1b01 	strb.w	r1, [r3], #1
 8007cce:	e7f9      	b.n	8007cc4 <memset+0x4>

08007cd0 <__cvt>:
 8007cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	ec55 4b10 	vmov	r4, r5, d0
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	460e      	mov	r6, r1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	462b      	mov	r3, r5
 8007ce0:	bfbb      	ittet	lt
 8007ce2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ce6:	461d      	movlt	r5, r3
 8007ce8:	2300      	movge	r3, #0
 8007cea:	232d      	movlt	r3, #45	; 0x2d
 8007cec:	700b      	strb	r3, [r1, #0]
 8007cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cf4:	4691      	mov	r9, r2
 8007cf6:	f023 0820 	bic.w	r8, r3, #32
 8007cfa:	bfbc      	itt	lt
 8007cfc:	4622      	movlt	r2, r4
 8007cfe:	4614      	movlt	r4, r2
 8007d00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d04:	d005      	beq.n	8007d12 <__cvt+0x42>
 8007d06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d0a:	d100      	bne.n	8007d0e <__cvt+0x3e>
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	2102      	movs	r1, #2
 8007d10:	e000      	b.n	8007d14 <__cvt+0x44>
 8007d12:	2103      	movs	r1, #3
 8007d14:	ab03      	add	r3, sp, #12
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	ab02      	add	r3, sp, #8
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	ec45 4b10 	vmov	d0, r4, r5
 8007d20:	4653      	mov	r3, sl
 8007d22:	4632      	mov	r2, r6
 8007d24:	f001 fdc4 	bl	80098b0 <_dtoa_r>
 8007d28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	d102      	bne.n	8007d36 <__cvt+0x66>
 8007d30:	f019 0f01 	tst.w	r9, #1
 8007d34:	d022      	beq.n	8007d7c <__cvt+0xac>
 8007d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d3a:	eb07 0906 	add.w	r9, r7, r6
 8007d3e:	d110      	bne.n	8007d62 <__cvt+0x92>
 8007d40:	783b      	ldrb	r3, [r7, #0]
 8007d42:	2b30      	cmp	r3, #48	; 0x30
 8007d44:	d10a      	bne.n	8007d5c <__cvt+0x8c>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7f8 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d52:	b918      	cbnz	r0, 8007d5c <__cvt+0x8c>
 8007d54:	f1c6 0601 	rsb	r6, r6, #1
 8007d58:	f8ca 6000 	str.w	r6, [sl]
 8007d5c:	f8da 3000 	ldr.w	r3, [sl]
 8007d60:	4499      	add	r9, r3
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d6e:	b108      	cbz	r0, 8007d74 <__cvt+0xa4>
 8007d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d74:	2230      	movs	r2, #48	; 0x30
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	454b      	cmp	r3, r9
 8007d7a:	d307      	bcc.n	8007d8c <__cvt+0xbc>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d80:	1bdb      	subs	r3, r3, r7
 8007d82:	4638      	mov	r0, r7
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	b004      	add	sp, #16
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	1c59      	adds	r1, r3, #1
 8007d8e:	9103      	str	r1, [sp, #12]
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	e7f0      	b.n	8007d76 <__cvt+0xa6>

08007d94 <__exponent>:
 8007d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d96:	4603      	mov	r3, r0
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	bfb8      	it	lt
 8007d9c:	4249      	neglt	r1, r1
 8007d9e:	f803 2b02 	strb.w	r2, [r3], #2
 8007da2:	bfb4      	ite	lt
 8007da4:	222d      	movlt	r2, #45	; 0x2d
 8007da6:	222b      	movge	r2, #43	; 0x2b
 8007da8:	2909      	cmp	r1, #9
 8007daa:	7042      	strb	r2, [r0, #1]
 8007dac:	dd2a      	ble.n	8007e04 <__exponent+0x70>
 8007dae:	f10d 0407 	add.w	r4, sp, #7
 8007db2:	46a4      	mov	ip, r4
 8007db4:	270a      	movs	r7, #10
 8007db6:	46a6      	mov	lr, r4
 8007db8:	460a      	mov	r2, r1
 8007dba:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dbe:	fb07 1516 	mls	r5, r7, r6, r1
 8007dc2:	3530      	adds	r5, #48	; 0x30
 8007dc4:	2a63      	cmp	r2, #99	; 0x63
 8007dc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dce:	4631      	mov	r1, r6
 8007dd0:	dcf1      	bgt.n	8007db6 <__exponent+0x22>
 8007dd2:	3130      	adds	r1, #48	; 0x30
 8007dd4:	f1ae 0502 	sub.w	r5, lr, #2
 8007dd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ddc:	1c44      	adds	r4, r0, #1
 8007dde:	4629      	mov	r1, r5
 8007de0:	4561      	cmp	r1, ip
 8007de2:	d30a      	bcc.n	8007dfa <__exponent+0x66>
 8007de4:	f10d 0209 	add.w	r2, sp, #9
 8007de8:	eba2 020e 	sub.w	r2, r2, lr
 8007dec:	4565      	cmp	r5, ip
 8007dee:	bf88      	it	hi
 8007df0:	2200      	movhi	r2, #0
 8007df2:	4413      	add	r3, r2
 8007df4:	1a18      	subs	r0, r3, r0
 8007df6:	b003      	add	sp, #12
 8007df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e02:	e7ed      	b.n	8007de0 <__exponent+0x4c>
 8007e04:	2330      	movs	r3, #48	; 0x30
 8007e06:	3130      	adds	r1, #48	; 0x30
 8007e08:	7083      	strb	r3, [r0, #2]
 8007e0a:	70c1      	strb	r1, [r0, #3]
 8007e0c:	1d03      	adds	r3, r0, #4
 8007e0e:	e7f1      	b.n	8007df4 <__exponent+0x60>

08007e10 <_printf_float>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	ed2d 8b02 	vpush	{d8}
 8007e18:	b08d      	sub	sp, #52	; 0x34
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e20:	4616      	mov	r6, r2
 8007e22:	461f      	mov	r7, r3
 8007e24:	4605      	mov	r5, r0
 8007e26:	f002 ff95 	bl	800ad54 <_localeconv_r>
 8007e2a:	f8d0 a000 	ldr.w	sl, [r0]
 8007e2e:	4650      	mov	r0, sl
 8007e30:	f7f8 f9ce 	bl	80001d0 <strlen>
 8007e34:	2300      	movs	r3, #0
 8007e36:	930a      	str	r3, [sp, #40]	; 0x28
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	9305      	str	r3, [sp, #20]
 8007e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e44:	3307      	adds	r3, #7
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	f103 0208 	add.w	r2, r3, #8
 8007e4e:	f8c8 2000 	str.w	r2, [r8]
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e62:	9307      	str	r3, [sp, #28]
 8007e64:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e68:	ee08 0a10 	vmov	s16, r0
 8007e6c:	4b9f      	ldr	r3, [pc, #636]	; (80080ec <_printf_float+0x2dc>)
 8007e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e72:	f04f 32ff 	mov.w	r2, #4294967295
 8007e76:	f7f8 fe59 	bl	8000b2c <__aeabi_dcmpun>
 8007e7a:	bb88      	cbnz	r0, 8007ee0 <_printf_float+0xd0>
 8007e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e80:	4b9a      	ldr	r3, [pc, #616]	; (80080ec <_printf_float+0x2dc>)
 8007e82:	f04f 32ff 	mov.w	r2, #4294967295
 8007e86:	f7f8 fe33 	bl	8000af0 <__aeabi_dcmple>
 8007e8a:	bb48      	cbnz	r0, 8007ee0 <_printf_float+0xd0>
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fe22 	bl	8000adc <__aeabi_dcmplt>
 8007e98:	b110      	cbz	r0, 8007ea0 <_printf_float+0x90>
 8007e9a:	232d      	movs	r3, #45	; 0x2d
 8007e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea0:	4b93      	ldr	r3, [pc, #588]	; (80080f0 <_printf_float+0x2e0>)
 8007ea2:	4894      	ldr	r0, [pc, #592]	; (80080f4 <_printf_float+0x2e4>)
 8007ea4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ea8:	bf94      	ite	ls
 8007eaa:	4698      	movls	r8, r3
 8007eac:	4680      	movhi	r8, r0
 8007eae:	2303      	movs	r3, #3
 8007eb0:	6123      	str	r3, [r4, #16]
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	f023 0204 	bic.w	r2, r3, #4
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	9700      	str	r7, [sp, #0]
 8007ec0:	4633      	mov	r3, r6
 8007ec2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 f9d8 	bl	800827c <_printf_common>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	f040 8090 	bne.w	8007ff2 <_printf_float+0x1e2>
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed6:	b00d      	add	sp, #52	; 0x34
 8007ed8:	ecbd 8b02 	vpop	{d8}
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fe20 	bl	8000b2c <__aeabi_dcmpun>
 8007eec:	b140      	cbz	r0, 8007f00 <_printf_float+0xf0>
 8007eee:	464b      	mov	r3, r9
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bfbc      	itt	lt
 8007ef4:	232d      	movlt	r3, #45	; 0x2d
 8007ef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007efa:	487f      	ldr	r0, [pc, #508]	; (80080f8 <_printf_float+0x2e8>)
 8007efc:	4b7f      	ldr	r3, [pc, #508]	; (80080fc <_printf_float+0x2ec>)
 8007efe:	e7d1      	b.n	8007ea4 <_printf_float+0x94>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f06:	9206      	str	r2, [sp, #24]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	d13f      	bne.n	8007f8c <_printf_float+0x17c>
 8007f0c:	2306      	movs	r3, #6
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	6861      	ldr	r1, [r4, #4]
 8007f14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	ab0a      	add	r3, sp, #40	; 0x28
 8007f1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f22:	ab09      	add	r3, sp, #36	; 0x24
 8007f24:	ec49 8b10 	vmov	d0, r8, r9
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7ff fecd 	bl	8007cd0 <__cvt>
 8007f36:	9b06      	ldr	r3, [sp, #24]
 8007f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f3a:	2b47      	cmp	r3, #71	; 0x47
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	d108      	bne.n	8007f52 <_printf_float+0x142>
 8007f40:	1cc8      	adds	r0, r1, #3
 8007f42:	db02      	blt.n	8007f4a <_printf_float+0x13a>
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	4299      	cmp	r1, r3
 8007f48:	dd41      	ble.n	8007fce <_printf_float+0x1be>
 8007f4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f4e:	fa5f fb8b 	uxtb.w	fp, fp
 8007f52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f56:	d820      	bhi.n	8007f9a <_printf_float+0x18a>
 8007f58:	3901      	subs	r1, #1
 8007f5a:	465a      	mov	r2, fp
 8007f5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f60:	9109      	str	r1, [sp, #36]	; 0x24
 8007f62:	f7ff ff17 	bl	8007d94 <__exponent>
 8007f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f68:	1813      	adds	r3, r2, r0
 8007f6a:	2a01      	cmp	r2, #1
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	dc02      	bgt.n	8007f78 <_printf_float+0x168>
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	07d2      	lsls	r2, r2, #31
 8007f76:	d501      	bpl.n	8007f7c <_printf_float+0x16c>
 8007f78:	3301      	adds	r3, #1
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d09c      	beq.n	8007ebe <_printf_float+0xae>
 8007f84:	232d      	movs	r3, #45	; 0x2d
 8007f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f8a:	e798      	b.n	8007ebe <_printf_float+0xae>
 8007f8c:	9a06      	ldr	r2, [sp, #24]
 8007f8e:	2a47      	cmp	r2, #71	; 0x47
 8007f90:	d1be      	bne.n	8007f10 <_printf_float+0x100>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1bc      	bne.n	8007f10 <_printf_float+0x100>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7b9      	b.n	8007f0e <_printf_float+0xfe>
 8007f9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f9e:	d118      	bne.n	8007fd2 <_printf_float+0x1c2>
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	dd0b      	ble.n	8007fbe <_printf_float+0x1ae>
 8007fa6:	6121      	str	r1, [r4, #16]
 8007fa8:	b913      	cbnz	r3, 8007fb0 <_printf_float+0x1a0>
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	07d0      	lsls	r0, r2, #31
 8007fae:	d502      	bpl.n	8007fb6 <_printf_float+0x1a6>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	440b      	add	r3, r1
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fb8:	f04f 0900 	mov.w	r9, #0
 8007fbc:	e7de      	b.n	8007f7c <_printf_float+0x16c>
 8007fbe:	b913      	cbnz	r3, 8007fc6 <_printf_float+0x1b6>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	07d2      	lsls	r2, r2, #31
 8007fc4:	d501      	bpl.n	8007fca <_printf_float+0x1ba>
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	e7f4      	b.n	8007fb4 <_printf_float+0x1a4>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e7f2      	b.n	8007fb4 <_printf_float+0x1a4>
 8007fce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	db05      	blt.n	8007fe4 <_printf_float+0x1d4>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	6121      	str	r1, [r4, #16]
 8007fdc:	07d8      	lsls	r0, r3, #31
 8007fde:	d5ea      	bpl.n	8007fb6 <_printf_float+0x1a6>
 8007fe0:	1c4b      	adds	r3, r1, #1
 8007fe2:	e7e7      	b.n	8007fb4 <_printf_float+0x1a4>
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	bfd4      	ite	le
 8007fe8:	f1c1 0202 	rsble	r2, r1, #2
 8007fec:	2201      	movgt	r2, #1
 8007fee:	4413      	add	r3, r2
 8007ff0:	e7e0      	b.n	8007fb4 <_printf_float+0x1a4>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	055a      	lsls	r2, r3, #21
 8007ff6:	d407      	bmi.n	8008008 <_printf_float+0x1f8>
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	d12c      	bne.n	8008060 <_printf_float+0x250>
 8008006:	e764      	b.n	8007ed2 <_printf_float+0xc2>
 8008008:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800800c:	f240 80e0 	bls.w	80081d0 <_printf_float+0x3c0>
 8008010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	f7f8 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800801c:	2800      	cmp	r0, #0
 800801e:	d034      	beq.n	800808a <_printf_float+0x27a>
 8008020:	4a37      	ldr	r2, [pc, #220]	; (8008100 <_printf_float+0x2f0>)
 8008022:	2301      	movs	r3, #1
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f af51 	beq.w	8007ed2 <_printf_float+0xc2>
 8008030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008034:	429a      	cmp	r2, r3
 8008036:	db02      	blt.n	800803e <_printf_float+0x22e>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	07d8      	lsls	r0, r3, #31
 800803c:	d510      	bpl.n	8008060 <_printf_float+0x250>
 800803e:	ee18 3a10 	vmov	r3, s16
 8008042:	4652      	mov	r2, sl
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f af41 	beq.w	8007ed2 <_printf_float+0xc2>
 8008050:	f04f 0800 	mov.w	r8, #0
 8008054:	f104 091a 	add.w	r9, r4, #26
 8008058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805a:	3b01      	subs	r3, #1
 800805c:	4543      	cmp	r3, r8
 800805e:	dc09      	bgt.n	8008074 <_printf_float+0x264>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	f100 8105 	bmi.w	8008272 <_printf_float+0x462>
 8008068:	68e0      	ldr	r0, [r4, #12]
 800806a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806c:	4298      	cmp	r0, r3
 800806e:	bfb8      	it	lt
 8008070:	4618      	movlt	r0, r3
 8008072:	e730      	b.n	8007ed6 <_printf_float+0xc6>
 8008074:	2301      	movs	r3, #1
 8008076:	464a      	mov	r2, r9
 8008078:	4631      	mov	r1, r6
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	f43f af27 	beq.w	8007ed2 <_printf_float+0xc2>
 8008084:	f108 0801 	add.w	r8, r8, #1
 8008088:	e7e6      	b.n	8008058 <_printf_float+0x248>
 800808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc39      	bgt.n	8008104 <_printf_float+0x2f4>
 8008090:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <_printf_float+0x2f0>)
 8008092:	2301      	movs	r3, #1
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f af19 	beq.w	8007ed2 <_printf_float+0xc2>
 80080a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a4:	4313      	orrs	r3, r2
 80080a6:	d102      	bne.n	80080ae <_printf_float+0x29e>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	07d9      	lsls	r1, r3, #31
 80080ac:	d5d8      	bpl.n	8008060 <_printf_float+0x250>
 80080ae:	ee18 3a10 	vmov	r3, s16
 80080b2:	4652      	mov	r2, sl
 80080b4:	4631      	mov	r1, r6
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	f43f af09 	beq.w	8007ed2 <_printf_float+0xc2>
 80080c0:	f04f 0900 	mov.w	r9, #0
 80080c4:	f104 0a1a 	add.w	sl, r4, #26
 80080c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ca:	425b      	negs	r3, r3
 80080cc:	454b      	cmp	r3, r9
 80080ce:	dc01      	bgt.n	80080d4 <_printf_float+0x2c4>
 80080d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d2:	e792      	b.n	8007ffa <_printf_float+0x1ea>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4652      	mov	r2, sl
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f aef7 	beq.w	8007ed2 <_printf_float+0xc2>
 80080e4:	f109 0901 	add.w	r9, r9, #1
 80080e8:	e7ee      	b.n	80080c8 <_printf_float+0x2b8>
 80080ea:	bf00      	nop
 80080ec:	7fefffff 	.word	0x7fefffff
 80080f0:	0800ce20 	.word	0x0800ce20
 80080f4:	0800ce24 	.word	0x0800ce24
 80080f8:	0800ce2c 	.word	0x0800ce2c
 80080fc:	0800ce28 	.word	0x0800ce28
 8008100:	0800ce30 	.word	0x0800ce30
 8008104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008108:	429a      	cmp	r2, r3
 800810a:	bfa8      	it	ge
 800810c:	461a      	movge	r2, r3
 800810e:	2a00      	cmp	r2, #0
 8008110:	4691      	mov	r9, r2
 8008112:	dc37      	bgt.n	8008184 <_printf_float+0x374>
 8008114:	f04f 0b00 	mov.w	fp, #0
 8008118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800811c:	f104 021a 	add.w	r2, r4, #26
 8008120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008122:	9305      	str	r3, [sp, #20]
 8008124:	eba3 0309 	sub.w	r3, r3, r9
 8008128:	455b      	cmp	r3, fp
 800812a:	dc33      	bgt.n	8008194 <_printf_float+0x384>
 800812c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008130:	429a      	cmp	r2, r3
 8008132:	db3b      	blt.n	80081ac <_printf_float+0x39c>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d438      	bmi.n	80081ac <_printf_float+0x39c>
 800813a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813c:	9a05      	ldr	r2, [sp, #20]
 800813e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008140:	1a9a      	subs	r2, r3, r2
 8008142:	eba3 0901 	sub.w	r9, r3, r1
 8008146:	4591      	cmp	r9, r2
 8008148:	bfa8      	it	ge
 800814a:	4691      	movge	r9, r2
 800814c:	f1b9 0f00 	cmp.w	r9, #0
 8008150:	dc35      	bgt.n	80081be <_printf_float+0x3ae>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800815a:	f104 0a1a 	add.w	sl, r4, #26
 800815e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	eba3 0309 	sub.w	r3, r3, r9
 8008168:	4543      	cmp	r3, r8
 800816a:	f77f af79 	ble.w	8008060 <_printf_float+0x250>
 800816e:	2301      	movs	r3, #1
 8008170:	4652      	mov	r2, sl
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	f43f aeaa 	beq.w	8007ed2 <_printf_float+0xc2>
 800817e:	f108 0801 	add.w	r8, r8, #1
 8008182:	e7ec      	b.n	800815e <_printf_float+0x34e>
 8008184:	4613      	mov	r3, r2
 8008186:	4631      	mov	r1, r6
 8008188:	4642      	mov	r2, r8
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	d1c0      	bne.n	8008114 <_printf_float+0x304>
 8008192:	e69e      	b.n	8007ed2 <_printf_float+0xc2>
 8008194:	2301      	movs	r3, #1
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	9205      	str	r2, [sp, #20]
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f ae97 	beq.w	8007ed2 <_printf_float+0xc2>
 80081a4:	9a05      	ldr	r2, [sp, #20]
 80081a6:	f10b 0b01 	add.w	fp, fp, #1
 80081aa:	e7b9      	b.n	8008120 <_printf_float+0x310>
 80081ac:	ee18 3a10 	vmov	r3, s16
 80081b0:	4652      	mov	r2, sl
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	d1be      	bne.n	800813a <_printf_float+0x32a>
 80081bc:	e689      	b.n	8007ed2 <_printf_float+0xc2>
 80081be:	9a05      	ldr	r2, [sp, #20]
 80081c0:	464b      	mov	r3, r9
 80081c2:	4442      	add	r2, r8
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	d1c1      	bne.n	8008152 <_printf_float+0x342>
 80081ce:	e680      	b.n	8007ed2 <_printf_float+0xc2>
 80081d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d2:	2a01      	cmp	r2, #1
 80081d4:	dc01      	bgt.n	80081da <_printf_float+0x3ca>
 80081d6:	07db      	lsls	r3, r3, #31
 80081d8:	d538      	bpl.n	800824c <_printf_float+0x43c>
 80081da:	2301      	movs	r3, #1
 80081dc:	4642      	mov	r2, r8
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f ae74 	beq.w	8007ed2 <_printf_float+0xc2>
 80081ea:	ee18 3a10 	vmov	r3, s16
 80081ee:	4652      	mov	r2, sl
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f ae6b 	beq.w	8007ed2 <_printf_float+0xc2>
 80081fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008200:	2200      	movs	r2, #0
 8008202:	2300      	movs	r3, #0
 8008204:	f7f8 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008208:	b9d8      	cbnz	r0, 8008242 <_printf_float+0x432>
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	f108 0201 	add.w	r2, r8, #1
 8008210:	3b01      	subs	r3, #1
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	d10e      	bne.n	800823a <_printf_float+0x42a>
 800821c:	e659      	b.n	8007ed2 <_printf_float+0xc2>
 800821e:	2301      	movs	r3, #1
 8008220:	4652      	mov	r2, sl
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	f43f ae52 	beq.w	8007ed2 <_printf_float+0xc2>
 800822e:	f108 0801 	add.w	r8, r8, #1
 8008232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008234:	3b01      	subs	r3, #1
 8008236:	4543      	cmp	r3, r8
 8008238:	dcf1      	bgt.n	800821e <_printf_float+0x40e>
 800823a:	464b      	mov	r3, r9
 800823c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008240:	e6dc      	b.n	8007ffc <_printf_float+0x1ec>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	f104 0a1a 	add.w	sl, r4, #26
 800824a:	e7f2      	b.n	8008232 <_printf_float+0x422>
 800824c:	2301      	movs	r3, #1
 800824e:	4642      	mov	r2, r8
 8008250:	e7df      	b.n	8008212 <_printf_float+0x402>
 8008252:	2301      	movs	r3, #1
 8008254:	464a      	mov	r2, r9
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	f43f ae38 	beq.w	8007ed2 <_printf_float+0xc2>
 8008262:	f108 0801 	add.w	r8, r8, #1
 8008266:	68e3      	ldr	r3, [r4, #12]
 8008268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800826a:	1a5b      	subs	r3, r3, r1
 800826c:	4543      	cmp	r3, r8
 800826e:	dcf0      	bgt.n	8008252 <_printf_float+0x442>
 8008270:	e6fa      	b.n	8008068 <_printf_float+0x258>
 8008272:	f04f 0800 	mov.w	r8, #0
 8008276:	f104 0919 	add.w	r9, r4, #25
 800827a:	e7f4      	b.n	8008266 <_printf_float+0x456>

0800827c <_printf_common>:
 800827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	4616      	mov	r6, r2
 8008282:	4699      	mov	r9, r3
 8008284:	688a      	ldr	r2, [r1, #8]
 8008286:	690b      	ldr	r3, [r1, #16]
 8008288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800828c:	4293      	cmp	r3, r2
 800828e:	bfb8      	it	lt
 8008290:	4613      	movlt	r3, r2
 8008292:	6033      	str	r3, [r6, #0]
 8008294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008298:	4607      	mov	r7, r0
 800829a:	460c      	mov	r4, r1
 800829c:	b10a      	cbz	r2, 80082a2 <_printf_common+0x26>
 800829e:	3301      	adds	r3, #1
 80082a0:	6033      	str	r3, [r6, #0]
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	0699      	lsls	r1, r3, #26
 80082a6:	bf42      	ittt	mi
 80082a8:	6833      	ldrmi	r3, [r6, #0]
 80082aa:	3302      	addmi	r3, #2
 80082ac:	6033      	strmi	r3, [r6, #0]
 80082ae:	6825      	ldr	r5, [r4, #0]
 80082b0:	f015 0506 	ands.w	r5, r5, #6
 80082b4:	d106      	bne.n	80082c4 <_printf_common+0x48>
 80082b6:	f104 0a19 	add.w	sl, r4, #25
 80082ba:	68e3      	ldr	r3, [r4, #12]
 80082bc:	6832      	ldr	r2, [r6, #0]
 80082be:	1a9b      	subs	r3, r3, r2
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	dc26      	bgt.n	8008312 <_printf_common+0x96>
 80082c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082c8:	1e13      	subs	r3, r2, #0
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	bf18      	it	ne
 80082ce:	2301      	movne	r3, #1
 80082d0:	0692      	lsls	r2, r2, #26
 80082d2:	d42b      	bmi.n	800832c <_printf_common+0xb0>
 80082d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082d8:	4649      	mov	r1, r9
 80082da:	4638      	mov	r0, r7
 80082dc:	47c0      	blx	r8
 80082de:	3001      	adds	r0, #1
 80082e0:	d01e      	beq.n	8008320 <_printf_common+0xa4>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	68e5      	ldr	r5, [r4, #12]
 80082e6:	6832      	ldr	r2, [r6, #0]
 80082e8:	f003 0306 	and.w	r3, r3, #6
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	bf08      	it	eq
 80082f0:	1aad      	subeq	r5, r5, r2
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	6922      	ldr	r2, [r4, #16]
 80082f6:	bf0c      	ite	eq
 80082f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082fc:	2500      	movne	r5, #0
 80082fe:	4293      	cmp	r3, r2
 8008300:	bfc4      	itt	gt
 8008302:	1a9b      	subgt	r3, r3, r2
 8008304:	18ed      	addgt	r5, r5, r3
 8008306:	2600      	movs	r6, #0
 8008308:	341a      	adds	r4, #26
 800830a:	42b5      	cmp	r5, r6
 800830c:	d11a      	bne.n	8008344 <_printf_common+0xc8>
 800830e:	2000      	movs	r0, #0
 8008310:	e008      	b.n	8008324 <_printf_common+0xa8>
 8008312:	2301      	movs	r3, #1
 8008314:	4652      	mov	r2, sl
 8008316:	4649      	mov	r1, r9
 8008318:	4638      	mov	r0, r7
 800831a:	47c0      	blx	r8
 800831c:	3001      	adds	r0, #1
 800831e:	d103      	bne.n	8008328 <_printf_common+0xac>
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	3501      	adds	r5, #1
 800832a:	e7c6      	b.n	80082ba <_printf_common+0x3e>
 800832c:	18e1      	adds	r1, r4, r3
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	2030      	movs	r0, #48	; 0x30
 8008332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008336:	4422      	add	r2, r4
 8008338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800833c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008340:	3302      	adds	r3, #2
 8008342:	e7c7      	b.n	80082d4 <_printf_common+0x58>
 8008344:	2301      	movs	r3, #1
 8008346:	4622      	mov	r2, r4
 8008348:	4649      	mov	r1, r9
 800834a:	4638      	mov	r0, r7
 800834c:	47c0      	blx	r8
 800834e:	3001      	adds	r0, #1
 8008350:	d0e6      	beq.n	8008320 <_printf_common+0xa4>
 8008352:	3601      	adds	r6, #1
 8008354:	e7d9      	b.n	800830a <_printf_common+0x8e>
	...

08008358 <_printf_i>:
 8008358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	7e0f      	ldrb	r7, [r1, #24]
 800835e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008360:	2f78      	cmp	r7, #120	; 0x78
 8008362:	4691      	mov	r9, r2
 8008364:	4680      	mov	r8, r0
 8008366:	460c      	mov	r4, r1
 8008368:	469a      	mov	sl, r3
 800836a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800836e:	d807      	bhi.n	8008380 <_printf_i+0x28>
 8008370:	2f62      	cmp	r7, #98	; 0x62
 8008372:	d80a      	bhi.n	800838a <_printf_i+0x32>
 8008374:	2f00      	cmp	r7, #0
 8008376:	f000 80d8 	beq.w	800852a <_printf_i+0x1d2>
 800837a:	2f58      	cmp	r7, #88	; 0x58
 800837c:	f000 80a3 	beq.w	80084c6 <_printf_i+0x16e>
 8008380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008388:	e03a      	b.n	8008400 <_printf_i+0xa8>
 800838a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800838e:	2b15      	cmp	r3, #21
 8008390:	d8f6      	bhi.n	8008380 <_printf_i+0x28>
 8008392:	a101      	add	r1, pc, #4	; (adr r1, 8008398 <_printf_i+0x40>)
 8008394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008398:	080083f1 	.word	0x080083f1
 800839c:	08008405 	.word	0x08008405
 80083a0:	08008381 	.word	0x08008381
 80083a4:	08008381 	.word	0x08008381
 80083a8:	08008381 	.word	0x08008381
 80083ac:	08008381 	.word	0x08008381
 80083b0:	08008405 	.word	0x08008405
 80083b4:	08008381 	.word	0x08008381
 80083b8:	08008381 	.word	0x08008381
 80083bc:	08008381 	.word	0x08008381
 80083c0:	08008381 	.word	0x08008381
 80083c4:	08008511 	.word	0x08008511
 80083c8:	08008435 	.word	0x08008435
 80083cc:	080084f3 	.word	0x080084f3
 80083d0:	08008381 	.word	0x08008381
 80083d4:	08008381 	.word	0x08008381
 80083d8:	08008533 	.word	0x08008533
 80083dc:	08008381 	.word	0x08008381
 80083e0:	08008435 	.word	0x08008435
 80083e4:	08008381 	.word	0x08008381
 80083e8:	08008381 	.word	0x08008381
 80083ec:	080084fb 	.word	0x080084fb
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	1d1a      	adds	r2, r3, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	602a      	str	r2, [r5, #0]
 80083f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008400:	2301      	movs	r3, #1
 8008402:	e0a3      	b.n	800854c <_printf_i+0x1f4>
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	6829      	ldr	r1, [r5, #0]
 8008408:	0606      	lsls	r6, r0, #24
 800840a:	f101 0304 	add.w	r3, r1, #4
 800840e:	d50a      	bpl.n	8008426 <_printf_i+0xce>
 8008410:	680e      	ldr	r6, [r1, #0]
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	2e00      	cmp	r6, #0
 8008416:	da03      	bge.n	8008420 <_printf_i+0xc8>
 8008418:	232d      	movs	r3, #45	; 0x2d
 800841a:	4276      	negs	r6, r6
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008420:	485e      	ldr	r0, [pc, #376]	; (800859c <_printf_i+0x244>)
 8008422:	230a      	movs	r3, #10
 8008424:	e019      	b.n	800845a <_printf_i+0x102>
 8008426:	680e      	ldr	r6, [r1, #0]
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800842e:	bf18      	it	ne
 8008430:	b236      	sxthne	r6, r6
 8008432:	e7ef      	b.n	8008414 <_printf_i+0xbc>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	1d19      	adds	r1, r3, #4
 800843a:	6029      	str	r1, [r5, #0]
 800843c:	0601      	lsls	r1, r0, #24
 800843e:	d501      	bpl.n	8008444 <_printf_i+0xec>
 8008440:	681e      	ldr	r6, [r3, #0]
 8008442:	e002      	b.n	800844a <_printf_i+0xf2>
 8008444:	0646      	lsls	r6, r0, #25
 8008446:	d5fb      	bpl.n	8008440 <_printf_i+0xe8>
 8008448:	881e      	ldrh	r6, [r3, #0]
 800844a:	4854      	ldr	r0, [pc, #336]	; (800859c <_printf_i+0x244>)
 800844c:	2f6f      	cmp	r7, #111	; 0x6f
 800844e:	bf0c      	ite	eq
 8008450:	2308      	moveq	r3, #8
 8008452:	230a      	movne	r3, #10
 8008454:	2100      	movs	r1, #0
 8008456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800845a:	6865      	ldr	r5, [r4, #4]
 800845c:	60a5      	str	r5, [r4, #8]
 800845e:	2d00      	cmp	r5, #0
 8008460:	bfa2      	ittt	ge
 8008462:	6821      	ldrge	r1, [r4, #0]
 8008464:	f021 0104 	bicge.w	r1, r1, #4
 8008468:	6021      	strge	r1, [r4, #0]
 800846a:	b90e      	cbnz	r6, 8008470 <_printf_i+0x118>
 800846c:	2d00      	cmp	r5, #0
 800846e:	d04d      	beq.n	800850c <_printf_i+0x1b4>
 8008470:	4615      	mov	r5, r2
 8008472:	fbb6 f1f3 	udiv	r1, r6, r3
 8008476:	fb03 6711 	mls	r7, r3, r1, r6
 800847a:	5dc7      	ldrb	r7, [r0, r7]
 800847c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008480:	4637      	mov	r7, r6
 8008482:	42bb      	cmp	r3, r7
 8008484:	460e      	mov	r6, r1
 8008486:	d9f4      	bls.n	8008472 <_printf_i+0x11a>
 8008488:	2b08      	cmp	r3, #8
 800848a:	d10b      	bne.n	80084a4 <_printf_i+0x14c>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07de      	lsls	r6, r3, #31
 8008490:	d508      	bpl.n	80084a4 <_printf_i+0x14c>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	4299      	cmp	r1, r3
 8008498:	bfde      	ittt	le
 800849a:	2330      	movle	r3, #48	; 0x30
 800849c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084a4:	1b52      	subs	r2, r2, r5
 80084a6:	6122      	str	r2, [r4, #16]
 80084a8:	f8cd a000 	str.w	sl, [sp]
 80084ac:	464b      	mov	r3, r9
 80084ae:	aa03      	add	r2, sp, #12
 80084b0:	4621      	mov	r1, r4
 80084b2:	4640      	mov	r0, r8
 80084b4:	f7ff fee2 	bl	800827c <_printf_common>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d14c      	bne.n	8008556 <_printf_i+0x1fe>
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	b004      	add	sp, #16
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	4835      	ldr	r0, [pc, #212]	; (800859c <_printf_i+0x244>)
 80084c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084cc:	6829      	ldr	r1, [r5, #0]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80084d4:	6029      	str	r1, [r5, #0]
 80084d6:	061d      	lsls	r5, r3, #24
 80084d8:	d514      	bpl.n	8008504 <_printf_i+0x1ac>
 80084da:	07df      	lsls	r7, r3, #31
 80084dc:	bf44      	itt	mi
 80084de:	f043 0320 	orrmi.w	r3, r3, #32
 80084e2:	6023      	strmi	r3, [r4, #0]
 80084e4:	b91e      	cbnz	r6, 80084ee <_printf_i+0x196>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	f023 0320 	bic.w	r3, r3, #32
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	2310      	movs	r3, #16
 80084f0:	e7b0      	b.n	8008454 <_printf_i+0xfc>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f043 0320 	orr.w	r3, r3, #32
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	2378      	movs	r3, #120	; 0x78
 80084fc:	4828      	ldr	r0, [pc, #160]	; (80085a0 <_printf_i+0x248>)
 80084fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008502:	e7e3      	b.n	80084cc <_printf_i+0x174>
 8008504:	0659      	lsls	r1, r3, #25
 8008506:	bf48      	it	mi
 8008508:	b2b6      	uxthmi	r6, r6
 800850a:	e7e6      	b.n	80084da <_printf_i+0x182>
 800850c:	4615      	mov	r5, r2
 800850e:	e7bb      	b.n	8008488 <_printf_i+0x130>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	6826      	ldr	r6, [r4, #0]
 8008514:	6961      	ldr	r1, [r4, #20]
 8008516:	1d18      	adds	r0, r3, #4
 8008518:	6028      	str	r0, [r5, #0]
 800851a:	0635      	lsls	r5, r6, #24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	d501      	bpl.n	8008524 <_printf_i+0x1cc>
 8008520:	6019      	str	r1, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0x1d2>
 8008524:	0670      	lsls	r0, r6, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0x1c8>
 8008528:	8019      	strh	r1, [r3, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	4615      	mov	r5, r2
 8008530:	e7ba      	b.n	80084a8 <_printf_i+0x150>
 8008532:	682b      	ldr	r3, [r5, #0]
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	602a      	str	r2, [r5, #0]
 8008538:	681d      	ldr	r5, [r3, #0]
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	2100      	movs	r1, #0
 800853e:	4628      	mov	r0, r5
 8008540:	f7f7 fe4e 	bl	80001e0 <memchr>
 8008544:	b108      	cbz	r0, 800854a <_printf_i+0x1f2>
 8008546:	1b40      	subs	r0, r0, r5
 8008548:	6060      	str	r0, [r4, #4]
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	2300      	movs	r3, #0
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008554:	e7a8      	b.n	80084a8 <_printf_i+0x150>
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	462a      	mov	r2, r5
 800855a:	4649      	mov	r1, r9
 800855c:	4640      	mov	r0, r8
 800855e:	47d0      	blx	sl
 8008560:	3001      	adds	r0, #1
 8008562:	d0ab      	beq.n	80084bc <_printf_i+0x164>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	079b      	lsls	r3, r3, #30
 8008568:	d413      	bmi.n	8008592 <_printf_i+0x23a>
 800856a:	68e0      	ldr	r0, [r4, #12]
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	4298      	cmp	r0, r3
 8008570:	bfb8      	it	lt
 8008572:	4618      	movlt	r0, r3
 8008574:	e7a4      	b.n	80084c0 <_printf_i+0x168>
 8008576:	2301      	movs	r3, #1
 8008578:	4632      	mov	r2, r6
 800857a:	4649      	mov	r1, r9
 800857c:	4640      	mov	r0, r8
 800857e:	47d0      	blx	sl
 8008580:	3001      	adds	r0, #1
 8008582:	d09b      	beq.n	80084bc <_printf_i+0x164>
 8008584:	3501      	adds	r5, #1
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	9903      	ldr	r1, [sp, #12]
 800858a:	1a5b      	subs	r3, r3, r1
 800858c:	42ab      	cmp	r3, r5
 800858e:	dcf2      	bgt.n	8008576 <_printf_i+0x21e>
 8008590:	e7eb      	b.n	800856a <_printf_i+0x212>
 8008592:	2500      	movs	r5, #0
 8008594:	f104 0619 	add.w	r6, r4, #25
 8008598:	e7f5      	b.n	8008586 <_printf_i+0x22e>
 800859a:	bf00      	nop
 800859c:	0800ce32 	.word	0x0800ce32
 80085a0:	0800ce43 	.word	0x0800ce43

080085a4 <_scanf_float>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	b087      	sub	sp, #28
 80085aa:	4617      	mov	r7, r2
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	688b      	ldr	r3, [r1, #8]
 80085b0:	1e5a      	subs	r2, r3, #1
 80085b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085b6:	bf83      	ittte	hi
 80085b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085bc:	195b      	addhi	r3, r3, r5
 80085be:	9302      	strhi	r3, [sp, #8]
 80085c0:	2300      	movls	r3, #0
 80085c2:	bf86      	itte	hi
 80085c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085c8:	608b      	strhi	r3, [r1, #8]
 80085ca:	9302      	strls	r3, [sp, #8]
 80085cc:	680b      	ldr	r3, [r1, #0]
 80085ce:	468b      	mov	fp, r1
 80085d0:	2500      	movs	r5, #0
 80085d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80085d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80085da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80085de:	4680      	mov	r8, r0
 80085e0:	460c      	mov	r4, r1
 80085e2:	465e      	mov	r6, fp
 80085e4:	46aa      	mov	sl, r5
 80085e6:	46a9      	mov	r9, r5
 80085e8:	9501      	str	r5, [sp, #4]
 80085ea:	68a2      	ldr	r2, [r4, #8]
 80085ec:	b152      	cbz	r2, 8008604 <_scanf_float+0x60>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b4e      	cmp	r3, #78	; 0x4e
 80085f4:	d864      	bhi.n	80086c0 <_scanf_float+0x11c>
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d83c      	bhi.n	8008674 <_scanf_float+0xd0>
 80085fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80085fe:	b2c8      	uxtb	r0, r1
 8008600:	280e      	cmp	r0, #14
 8008602:	d93a      	bls.n	800867a <_scanf_float+0xd6>
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	d003      	beq.n	8008612 <_scanf_float+0x6e>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008616:	f1ba 0f01 	cmp.w	sl, #1
 800861a:	f200 8113 	bhi.w	8008844 <_scanf_float+0x2a0>
 800861e:	455e      	cmp	r6, fp
 8008620:	f200 8105 	bhi.w	800882e <_scanf_float+0x28a>
 8008624:	2501      	movs	r5, #1
 8008626:	4628      	mov	r0, r5
 8008628:	b007      	add	sp, #28
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008632:	2a0d      	cmp	r2, #13
 8008634:	d8e6      	bhi.n	8008604 <_scanf_float+0x60>
 8008636:	a101      	add	r1, pc, #4	; (adr r1, 800863c <_scanf_float+0x98>)
 8008638:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800863c:	0800877b 	.word	0x0800877b
 8008640:	08008605 	.word	0x08008605
 8008644:	08008605 	.word	0x08008605
 8008648:	08008605 	.word	0x08008605
 800864c:	080087db 	.word	0x080087db
 8008650:	080087b3 	.word	0x080087b3
 8008654:	08008605 	.word	0x08008605
 8008658:	08008605 	.word	0x08008605
 800865c:	08008789 	.word	0x08008789
 8008660:	08008605 	.word	0x08008605
 8008664:	08008605 	.word	0x08008605
 8008668:	08008605 	.word	0x08008605
 800866c:	08008605 	.word	0x08008605
 8008670:	08008741 	.word	0x08008741
 8008674:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008678:	e7db      	b.n	8008632 <_scanf_float+0x8e>
 800867a:	290e      	cmp	r1, #14
 800867c:	d8c2      	bhi.n	8008604 <_scanf_float+0x60>
 800867e:	a001      	add	r0, pc, #4	; (adr r0, 8008684 <_scanf_float+0xe0>)
 8008680:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008684:	08008733 	.word	0x08008733
 8008688:	08008605 	.word	0x08008605
 800868c:	08008733 	.word	0x08008733
 8008690:	080087c7 	.word	0x080087c7
 8008694:	08008605 	.word	0x08008605
 8008698:	080086e1 	.word	0x080086e1
 800869c:	0800871d 	.word	0x0800871d
 80086a0:	0800871d 	.word	0x0800871d
 80086a4:	0800871d 	.word	0x0800871d
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	0800871d 	.word	0x0800871d
 80086b0:	0800871d 	.word	0x0800871d
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800871d 	.word	0x0800871d
 80086c0:	2b6e      	cmp	r3, #110	; 0x6e
 80086c2:	d809      	bhi.n	80086d8 <_scanf_float+0x134>
 80086c4:	2b60      	cmp	r3, #96	; 0x60
 80086c6:	d8b2      	bhi.n	800862e <_scanf_float+0x8a>
 80086c8:	2b54      	cmp	r3, #84	; 0x54
 80086ca:	d077      	beq.n	80087bc <_scanf_float+0x218>
 80086cc:	2b59      	cmp	r3, #89	; 0x59
 80086ce:	d199      	bne.n	8008604 <_scanf_float+0x60>
 80086d0:	2d07      	cmp	r5, #7
 80086d2:	d197      	bne.n	8008604 <_scanf_float+0x60>
 80086d4:	2508      	movs	r5, #8
 80086d6:	e029      	b.n	800872c <_scanf_float+0x188>
 80086d8:	2b74      	cmp	r3, #116	; 0x74
 80086da:	d06f      	beq.n	80087bc <_scanf_float+0x218>
 80086dc:	2b79      	cmp	r3, #121	; 0x79
 80086de:	e7f6      	b.n	80086ce <_scanf_float+0x12a>
 80086e0:	6821      	ldr	r1, [r4, #0]
 80086e2:	05c8      	lsls	r0, r1, #23
 80086e4:	d51a      	bpl.n	800871c <_scanf_float+0x178>
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80086ec:	6021      	str	r1, [r4, #0]
 80086ee:	f109 0901 	add.w	r9, r9, #1
 80086f2:	b11b      	cbz	r3, 80086fc <_scanf_float+0x158>
 80086f4:	3b01      	subs	r3, #1
 80086f6:	3201      	adds	r2, #1
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	60a2      	str	r2, [r4, #8]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	3b01      	subs	r3, #1
 8008700:	60a3      	str	r3, [r4, #8]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	3301      	adds	r3, #1
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	f340 8084 	ble.w	800881c <_scanf_float+0x278>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	e766      	b.n	80085ea <_scanf_float+0x46>
 800871c:	eb1a 0f05 	cmn.w	sl, r5
 8008720:	f47f af70 	bne.w	8008604 <_scanf_float+0x60>
 8008724:	6822      	ldr	r2, [r4, #0]
 8008726:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	f806 3b01 	strb.w	r3, [r6], #1
 8008730:	e7e4      	b.n	80086fc <_scanf_float+0x158>
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	0610      	lsls	r0, r2, #24
 8008736:	f57f af65 	bpl.w	8008604 <_scanf_float+0x60>
 800873a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800873e:	e7f4      	b.n	800872a <_scanf_float+0x186>
 8008740:	f1ba 0f00 	cmp.w	sl, #0
 8008744:	d10e      	bne.n	8008764 <_scanf_float+0x1c0>
 8008746:	f1b9 0f00 	cmp.w	r9, #0
 800874a:	d10e      	bne.n	800876a <_scanf_float+0x1c6>
 800874c:	6822      	ldr	r2, [r4, #0]
 800874e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008752:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008756:	d108      	bne.n	800876a <_scanf_float+0x1c6>
 8008758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800875c:	6022      	str	r2, [r4, #0]
 800875e:	f04f 0a01 	mov.w	sl, #1
 8008762:	e7e3      	b.n	800872c <_scanf_float+0x188>
 8008764:	f1ba 0f02 	cmp.w	sl, #2
 8008768:	d055      	beq.n	8008816 <_scanf_float+0x272>
 800876a:	2d01      	cmp	r5, #1
 800876c:	d002      	beq.n	8008774 <_scanf_float+0x1d0>
 800876e:	2d04      	cmp	r5, #4
 8008770:	f47f af48 	bne.w	8008604 <_scanf_float+0x60>
 8008774:	3501      	adds	r5, #1
 8008776:	b2ed      	uxtb	r5, r5
 8008778:	e7d8      	b.n	800872c <_scanf_float+0x188>
 800877a:	f1ba 0f01 	cmp.w	sl, #1
 800877e:	f47f af41 	bne.w	8008604 <_scanf_float+0x60>
 8008782:	f04f 0a02 	mov.w	sl, #2
 8008786:	e7d1      	b.n	800872c <_scanf_float+0x188>
 8008788:	b97d      	cbnz	r5, 80087aa <_scanf_float+0x206>
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	f47f af3c 	bne.w	800860a <_scanf_float+0x66>
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008798:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800879c:	f47f af39 	bne.w	8008612 <_scanf_float+0x6e>
 80087a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	2501      	movs	r5, #1
 80087a8:	e7c0      	b.n	800872c <_scanf_float+0x188>
 80087aa:	2d03      	cmp	r5, #3
 80087ac:	d0e2      	beq.n	8008774 <_scanf_float+0x1d0>
 80087ae:	2d05      	cmp	r5, #5
 80087b0:	e7de      	b.n	8008770 <_scanf_float+0x1cc>
 80087b2:	2d02      	cmp	r5, #2
 80087b4:	f47f af26 	bne.w	8008604 <_scanf_float+0x60>
 80087b8:	2503      	movs	r5, #3
 80087ba:	e7b7      	b.n	800872c <_scanf_float+0x188>
 80087bc:	2d06      	cmp	r5, #6
 80087be:	f47f af21 	bne.w	8008604 <_scanf_float+0x60>
 80087c2:	2507      	movs	r5, #7
 80087c4:	e7b2      	b.n	800872c <_scanf_float+0x188>
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	0591      	lsls	r1, r2, #22
 80087ca:	f57f af1b 	bpl.w	8008604 <_scanf_float+0x60>
 80087ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80087d2:	6022      	str	r2, [r4, #0]
 80087d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80087d8:	e7a8      	b.n	800872c <_scanf_float+0x188>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80087e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80087e4:	d006      	beq.n	80087f4 <_scanf_float+0x250>
 80087e6:	0550      	lsls	r0, r2, #21
 80087e8:	f57f af0c 	bpl.w	8008604 <_scanf_float+0x60>
 80087ec:	f1b9 0f00 	cmp.w	r9, #0
 80087f0:	f43f af0f 	beq.w	8008612 <_scanf_float+0x6e>
 80087f4:	0591      	lsls	r1, r2, #22
 80087f6:	bf58      	it	pl
 80087f8:	9901      	ldrpl	r1, [sp, #4]
 80087fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087fe:	bf58      	it	pl
 8008800:	eba9 0101 	subpl.w	r1, r9, r1
 8008804:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008808:	bf58      	it	pl
 800880a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	f04f 0900 	mov.w	r9, #0
 8008814:	e78a      	b.n	800872c <_scanf_float+0x188>
 8008816:	f04f 0a03 	mov.w	sl, #3
 800881a:	e787      	b.n	800872c <_scanf_float+0x188>
 800881c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008820:	4639      	mov	r1, r7
 8008822:	4640      	mov	r0, r8
 8008824:	4798      	blx	r3
 8008826:	2800      	cmp	r0, #0
 8008828:	f43f aedf 	beq.w	80085ea <_scanf_float+0x46>
 800882c:	e6ea      	b.n	8008604 <_scanf_float+0x60>
 800882e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008836:	463a      	mov	r2, r7
 8008838:	4640      	mov	r0, r8
 800883a:	4798      	blx	r3
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	3b01      	subs	r3, #1
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	e6ec      	b.n	800861e <_scanf_float+0x7a>
 8008844:	1e6b      	subs	r3, r5, #1
 8008846:	2b06      	cmp	r3, #6
 8008848:	d825      	bhi.n	8008896 <_scanf_float+0x2f2>
 800884a:	2d02      	cmp	r5, #2
 800884c:	d836      	bhi.n	80088bc <_scanf_float+0x318>
 800884e:	455e      	cmp	r6, fp
 8008850:	f67f aee8 	bls.w	8008624 <_scanf_float+0x80>
 8008854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008858:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800885c:	463a      	mov	r2, r7
 800885e:	4640      	mov	r0, r8
 8008860:	4798      	blx	r3
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	3b01      	subs	r3, #1
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	e7f1      	b.n	800884e <_scanf_float+0x2aa>
 800886a:	9802      	ldr	r0, [sp, #8]
 800886c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008870:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008874:	9002      	str	r0, [sp, #8]
 8008876:	463a      	mov	r2, r7
 8008878:	4640      	mov	r0, r8
 800887a:	4798      	blx	r3
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	3b01      	subs	r3, #1
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008886:	fa5f fa8a 	uxtb.w	sl, sl
 800888a:	f1ba 0f02 	cmp.w	sl, #2
 800888e:	d1ec      	bne.n	800886a <_scanf_float+0x2c6>
 8008890:	3d03      	subs	r5, #3
 8008892:	b2ed      	uxtb	r5, r5
 8008894:	1b76      	subs	r6, r6, r5
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	05da      	lsls	r2, r3, #23
 800889a:	d52f      	bpl.n	80088fc <_scanf_float+0x358>
 800889c:	055b      	lsls	r3, r3, #21
 800889e:	d510      	bpl.n	80088c2 <_scanf_float+0x31e>
 80088a0:	455e      	cmp	r6, fp
 80088a2:	f67f aebf 	bls.w	8008624 <_scanf_float+0x80>
 80088a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ae:	463a      	mov	r2, r7
 80088b0:	4640      	mov	r0, r8
 80088b2:	4798      	blx	r3
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	e7f1      	b.n	80088a0 <_scanf_float+0x2fc>
 80088bc:	46aa      	mov	sl, r5
 80088be:	9602      	str	r6, [sp, #8]
 80088c0:	e7df      	b.n	8008882 <_scanf_float+0x2de>
 80088c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	2965      	cmp	r1, #101	; 0x65
 80088ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80088ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	d00c      	beq.n	80088f0 <_scanf_float+0x34c>
 80088d6:	2945      	cmp	r1, #69	; 0x45
 80088d8:	d00a      	beq.n	80088f0 <_scanf_float+0x34c>
 80088da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088de:	463a      	mov	r2, r7
 80088e0:	4640      	mov	r0, r8
 80088e2:	4798      	blx	r3
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	1eb5      	subs	r5, r6, #2
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088f4:	463a      	mov	r2, r7
 80088f6:	4640      	mov	r0, r8
 80088f8:	4798      	blx	r3
 80088fa:	462e      	mov	r6, r5
 80088fc:	6825      	ldr	r5, [r4, #0]
 80088fe:	f015 0510 	ands.w	r5, r5, #16
 8008902:	d159      	bne.n	80089b8 <_scanf_float+0x414>
 8008904:	7035      	strb	r5, [r6, #0]
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800890c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008910:	d11b      	bne.n	800894a <_scanf_float+0x3a6>
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	454b      	cmp	r3, r9
 8008916:	eba3 0209 	sub.w	r2, r3, r9
 800891a:	d123      	bne.n	8008964 <_scanf_float+0x3c0>
 800891c:	2200      	movs	r2, #0
 800891e:	4659      	mov	r1, fp
 8008920:	4640      	mov	r0, r8
 8008922:	f000 feaf 	bl	8009684 <_strtod_r>
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	f012 0f02 	tst.w	r2, #2
 800892e:	ec57 6b10 	vmov	r6, r7, d0
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	d021      	beq.n	800897a <_scanf_float+0x3d6>
 8008936:	9903      	ldr	r1, [sp, #12]
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	600a      	str	r2, [r1, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	e9c3 6700 	strd	r6, r7, [r3]
 8008942:	68e3      	ldr	r3, [r4, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	60e3      	str	r3, [r4, #12]
 8008948:	e66d      	b.n	8008626 <_scanf_float+0x82>
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0e5      	beq.n	800891c <_scanf_float+0x378>
 8008950:	9905      	ldr	r1, [sp, #20]
 8008952:	230a      	movs	r3, #10
 8008954:	462a      	mov	r2, r5
 8008956:	3101      	adds	r1, #1
 8008958:	4640      	mov	r0, r8
 800895a:	f000 ff1b 	bl	8009794 <_strtol_r>
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	9e05      	ldr	r6, [sp, #20]
 8008962:	1ac2      	subs	r2, r0, r3
 8008964:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008968:	429e      	cmp	r6, r3
 800896a:	bf28      	it	cs
 800896c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008970:	4912      	ldr	r1, [pc, #72]	; (80089bc <_scanf_float+0x418>)
 8008972:	4630      	mov	r0, r6
 8008974:	f000 f844 	bl	8008a00 <siprintf>
 8008978:	e7d0      	b.n	800891c <_scanf_float+0x378>
 800897a:	9903      	ldr	r1, [sp, #12]
 800897c:	f012 0f04 	tst.w	r2, #4
 8008980:	f103 0204 	add.w	r2, r3, #4
 8008984:	600a      	str	r2, [r1, #0]
 8008986:	d1d9      	bne.n	800893c <_scanf_float+0x398>
 8008988:	f8d3 8000 	ldr.w	r8, [r3]
 800898c:	ee10 2a10 	vmov	r2, s0
 8008990:	ee10 0a10 	vmov	r0, s0
 8008994:	463b      	mov	r3, r7
 8008996:	4639      	mov	r1, r7
 8008998:	f7f8 f8c8 	bl	8000b2c <__aeabi_dcmpun>
 800899c:	b128      	cbz	r0, 80089aa <_scanf_float+0x406>
 800899e:	4808      	ldr	r0, [pc, #32]	; (80089c0 <_scanf_float+0x41c>)
 80089a0:	f000 f828 	bl	80089f4 <nanf>
 80089a4:	ed88 0a00 	vstr	s0, [r8]
 80089a8:	e7cb      	b.n	8008942 <_scanf_float+0x39e>
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f8 f91b 	bl	8000be8 <__aeabi_d2f>
 80089b2:	f8c8 0000 	str.w	r0, [r8]
 80089b6:	e7c4      	b.n	8008942 <_scanf_float+0x39e>
 80089b8:	2500      	movs	r5, #0
 80089ba:	e634      	b.n	8008626 <_scanf_float+0x82>
 80089bc:	0800ce54 	.word	0x0800ce54
 80089c0:	0800d2c8 	.word	0x0800d2c8

080089c4 <iprintf>:
 80089c4:	b40f      	push	{r0, r1, r2, r3}
 80089c6:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <iprintf+0x2c>)
 80089c8:	b513      	push	{r0, r1, r4, lr}
 80089ca:	681c      	ldr	r4, [r3, #0]
 80089cc:	b124      	cbz	r4, 80089d8 <iprintf+0x14>
 80089ce:	69a3      	ldr	r3, [r4, #24]
 80089d0:	b913      	cbnz	r3, 80089d8 <iprintf+0x14>
 80089d2:	4620      	mov	r0, r4
 80089d4:	f001 fdb2 	bl	800a53c <__sinit>
 80089d8:	ab05      	add	r3, sp, #20
 80089da:	9a04      	ldr	r2, [sp, #16]
 80089dc:	68a1      	ldr	r1, [r4, #8]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	4620      	mov	r0, r4
 80089e2:	f003 f917 	bl	800bc14 <_vfiprintf_r>
 80089e6:	b002      	add	sp, #8
 80089e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ec:	b004      	add	sp, #16
 80089ee:	4770      	bx	lr
 80089f0:	200000e4 	.word	0x200000e4

080089f4 <nanf>:
 80089f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089fc <nanf+0x8>
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	7fc00000 	.word	0x7fc00000

08008a00 <siprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b500      	push	{lr}
 8008a04:	b09c      	sub	sp, #112	; 0x70
 8008a06:	ab1d      	add	r3, sp, #116	; 0x74
 8008a08:	9002      	str	r0, [sp, #8]
 8008a0a:	9006      	str	r0, [sp, #24]
 8008a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a10:	4809      	ldr	r0, [pc, #36]	; (8008a38 <siprintf+0x38>)
 8008a12:	9107      	str	r1, [sp, #28]
 8008a14:	9104      	str	r1, [sp, #16]
 8008a16:	4909      	ldr	r1, [pc, #36]	; (8008a3c <siprintf+0x3c>)
 8008a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1c:	9105      	str	r1, [sp, #20]
 8008a1e:	6800      	ldr	r0, [r0, #0]
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	a902      	add	r1, sp, #8
 8008a24:	f002 ffcc 	bl	800b9c0 <_svfiprintf_r>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	b01c      	add	sp, #112	; 0x70
 8008a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a34:	b003      	add	sp, #12
 8008a36:	4770      	bx	lr
 8008a38:	200000e4 	.word	0x200000e4
 8008a3c:	ffff0208 	.word	0xffff0208

08008a40 <sulp>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	ec45 4b10 	vmov	d0, r4, r5
 8008a4a:	4616      	mov	r6, r2
 8008a4c:	f002 fd16 	bl	800b47c <__ulp>
 8008a50:	ec51 0b10 	vmov	r0, r1, d0
 8008a54:	b17e      	cbz	r6, 8008a76 <sulp+0x36>
 8008a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd09      	ble.n	8008a76 <sulp+0x36>
 8008a62:	051b      	lsls	r3, r3, #20
 8008a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a68:	2400      	movs	r4, #0
 8008a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a6e:	4622      	mov	r2, r4
 8008a70:	462b      	mov	r3, r5
 8008a72:	f7f7 fdc1 	bl	80005f8 <__aeabi_dmul>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}

08008a78 <_strtod_l>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	ed2d 8b02 	vpush	{d8}
 8008a80:	b09d      	sub	sp, #116	; 0x74
 8008a82:	461f      	mov	r7, r3
 8008a84:	2300      	movs	r3, #0
 8008a86:	9318      	str	r3, [sp, #96]	; 0x60
 8008a88:	4ba2      	ldr	r3, [pc, #648]	; (8008d14 <_strtod_l+0x29c>)
 8008a8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	4604      	mov	r4, r0
 8008a92:	4618      	mov	r0, r3
 8008a94:	4688      	mov	r8, r1
 8008a96:	f7f7 fb9b 	bl	80001d0 <strlen>
 8008a9a:	f04f 0a00 	mov.w	sl, #0
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	f04f 0b00 	mov.w	fp, #0
 8008aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	2a2b      	cmp	r2, #43	; 0x2b
 8008aae:	d04e      	beq.n	8008b4e <_strtod_l+0xd6>
 8008ab0:	d83b      	bhi.n	8008b2a <_strtod_l+0xb2>
 8008ab2:	2a0d      	cmp	r2, #13
 8008ab4:	d834      	bhi.n	8008b20 <_strtod_l+0xa8>
 8008ab6:	2a08      	cmp	r2, #8
 8008ab8:	d834      	bhi.n	8008b24 <_strtod_l+0xac>
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	d03e      	beq.n	8008b3c <_strtod_l+0xc4>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008ac4:	7833      	ldrb	r3, [r6, #0]
 8008ac6:	2b30      	cmp	r3, #48	; 0x30
 8008ac8:	f040 80b0 	bne.w	8008c2c <_strtod_l+0x1b4>
 8008acc:	7873      	ldrb	r3, [r6, #1]
 8008ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ad2:	2b58      	cmp	r3, #88	; 0x58
 8008ad4:	d168      	bne.n	8008ba8 <_strtod_l+0x130>
 8008ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	ab18      	add	r3, sp, #96	; 0x60
 8008adc:	9702      	str	r7, [sp, #8]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	4a8d      	ldr	r2, [pc, #564]	; (8008d18 <_strtod_l+0x2a0>)
 8008ae2:	ab19      	add	r3, sp, #100	; 0x64
 8008ae4:	a917      	add	r1, sp, #92	; 0x5c
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f001 fe2c 	bl	800a744 <__gethex>
 8008aec:	f010 0707 	ands.w	r7, r0, #7
 8008af0:	4605      	mov	r5, r0
 8008af2:	d005      	beq.n	8008b00 <_strtod_l+0x88>
 8008af4:	2f06      	cmp	r7, #6
 8008af6:	d12c      	bne.n	8008b52 <_strtod_l+0xda>
 8008af8:	3601      	adds	r6, #1
 8008afa:	2300      	movs	r3, #0
 8008afc:	9617      	str	r6, [sp, #92]	; 0x5c
 8008afe:	930a      	str	r3, [sp, #40]	; 0x28
 8008b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 8590 	bne.w	8009628 <_strtod_l+0xbb0>
 8008b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0a:	b1eb      	cbz	r3, 8008b48 <_strtod_l+0xd0>
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b12:	ec43 2b10 	vmov	d0, r2, r3
 8008b16:	b01d      	add	sp, #116	; 0x74
 8008b18:	ecbd 8b02 	vpop	{d8}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	2a20      	cmp	r2, #32
 8008b22:	d1cc      	bne.n	8008abe <_strtod_l+0x46>
 8008b24:	3301      	adds	r3, #1
 8008b26:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b28:	e7be      	b.n	8008aa8 <_strtod_l+0x30>
 8008b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b2c:	d1c7      	bne.n	8008abe <_strtod_l+0x46>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	920a      	str	r2, [sp, #40]	; 0x28
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1c2      	bne.n	8008ac2 <_strtod_l+0x4a>
 8008b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 856e 	bne.w	8009624 <_strtod_l+0xbac>
 8008b48:	4652      	mov	r2, sl
 8008b4a:	465b      	mov	r3, fp
 8008b4c:	e7e1      	b.n	8008b12 <_strtod_l+0x9a>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e7ee      	b.n	8008b30 <_strtod_l+0xb8>
 8008b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b54:	b13a      	cbz	r2, 8008b66 <_strtod_l+0xee>
 8008b56:	2135      	movs	r1, #53	; 0x35
 8008b58:	a81a      	add	r0, sp, #104	; 0x68
 8008b5a:	f002 fd9a 	bl	800b692 <__copybits>
 8008b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b60:	4620      	mov	r0, r4
 8008b62:	f002 f959 	bl	800ae18 <_Bfree>
 8008b66:	3f01      	subs	r7, #1
 8008b68:	2f04      	cmp	r7, #4
 8008b6a:	d806      	bhi.n	8008b7a <_strtod_l+0x102>
 8008b6c:	e8df f007 	tbb	[pc, r7]
 8008b70:	1714030a 	.word	0x1714030a
 8008b74:	0a          	.byte	0x0a
 8008b75:	00          	.byte	0x00
 8008b76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b7a:	0728      	lsls	r0, r5, #28
 8008b7c:	d5c0      	bpl.n	8008b00 <_strtod_l+0x88>
 8008b7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b82:	e7bd      	b.n	8008b00 <_strtod_l+0x88>
 8008b84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b96:	e7f0      	b.n	8008b7a <_strtod_l+0x102>
 8008b98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d1c <_strtod_l+0x2a4>
 8008b9c:	e7ed      	b.n	8008b7a <_strtod_l+0x102>
 8008b9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ba6:	e7e8      	b.n	8008b7a <_strtod_l+0x102>
 8008ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	2b30      	cmp	r3, #48	; 0x30
 8008bb2:	d0f9      	beq.n	8008ba8 <_strtod_l+0x130>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0a3      	beq.n	8008b00 <_strtod_l+0x88>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bc2:	9308      	str	r3, [sp, #32]
 8008bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bc8:	464f      	mov	r7, r9
 8008bca:	220a      	movs	r2, #10
 8008bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008bce:	7806      	ldrb	r6, [r0, #0]
 8008bd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008bd4:	b2d9      	uxtb	r1, r3
 8008bd6:	2909      	cmp	r1, #9
 8008bd8:	d92a      	bls.n	8008c30 <_strtod_l+0x1b8>
 8008bda:	9905      	ldr	r1, [sp, #20]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	f003 f9a6 	bl	800bf2e <strncmp>
 8008be2:	b398      	cbz	r0, 8008c4c <_strtod_l+0x1d4>
 8008be4:	2000      	movs	r0, #0
 8008be6:	4632      	mov	r2, r6
 8008be8:	463d      	mov	r5, r7
 8008bea:	9005      	str	r0, [sp, #20]
 8008bec:	4603      	mov	r3, r0
 8008bee:	2a65      	cmp	r2, #101	; 0x65
 8008bf0:	d001      	beq.n	8008bf6 <_strtod_l+0x17e>
 8008bf2:	2a45      	cmp	r2, #69	; 0x45
 8008bf4:	d118      	bne.n	8008c28 <_strtod_l+0x1b0>
 8008bf6:	b91d      	cbnz	r5, 8008c00 <_strtod_l+0x188>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	4302      	orrs	r2, r0
 8008bfc:	d09e      	beq.n	8008b3c <_strtod_l+0xc4>
 8008bfe:	2500      	movs	r5, #0
 8008c00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c04:	f108 0201 	add.w	r2, r8, #1
 8008c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c0e:	2a2b      	cmp	r2, #43	; 0x2b
 8008c10:	d075      	beq.n	8008cfe <_strtod_l+0x286>
 8008c12:	2a2d      	cmp	r2, #45	; 0x2d
 8008c14:	d07b      	beq.n	8008d0e <_strtod_l+0x296>
 8008c16:	f04f 0c00 	mov.w	ip, #0
 8008c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c1e:	2909      	cmp	r1, #9
 8008c20:	f240 8082 	bls.w	8008d28 <_strtod_l+0x2b0>
 8008c24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c28:	2600      	movs	r6, #0
 8008c2a:	e09d      	b.n	8008d68 <_strtod_l+0x2f0>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e7c4      	b.n	8008bba <_strtod_l+0x142>
 8008c30:	2f08      	cmp	r7, #8
 8008c32:	bfd8      	it	le
 8008c34:	9907      	ldrle	r1, [sp, #28]
 8008c36:	f100 0001 	add.w	r0, r0, #1
 8008c3a:	bfda      	itte	le
 8008c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c40:	9307      	strle	r3, [sp, #28]
 8008c42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c46:	3701      	adds	r7, #1
 8008c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c4a:	e7bf      	b.n	8008bcc <_strtod_l+0x154>
 8008c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c4e:	195a      	adds	r2, r3, r5
 8008c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c52:	5d5a      	ldrb	r2, [r3, r5]
 8008c54:	2f00      	cmp	r7, #0
 8008c56:	d037      	beq.n	8008cc8 <_strtod_l+0x250>
 8008c58:	9005      	str	r0, [sp, #20]
 8008c5a:	463d      	mov	r5, r7
 8008c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c60:	2b09      	cmp	r3, #9
 8008c62:	d912      	bls.n	8008c8a <_strtod_l+0x212>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e7c2      	b.n	8008bee <_strtod_l+0x176>
 8008c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c6e:	785a      	ldrb	r2, [r3, #1]
 8008c70:	3001      	adds	r0, #1
 8008c72:	2a30      	cmp	r2, #48	; 0x30
 8008c74:	d0f8      	beq.n	8008c68 <_strtod_l+0x1f0>
 8008c76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	f200 84d9 	bhi.w	8009632 <_strtod_l+0xbba>
 8008c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c82:	9005      	str	r0, [sp, #20]
 8008c84:	2000      	movs	r0, #0
 8008c86:	9308      	str	r3, [sp, #32]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	3a30      	subs	r2, #48	; 0x30
 8008c8c:	f100 0301 	add.w	r3, r0, #1
 8008c90:	d014      	beq.n	8008cbc <_strtod_l+0x244>
 8008c92:	9905      	ldr	r1, [sp, #20]
 8008c94:	4419      	add	r1, r3
 8008c96:	9105      	str	r1, [sp, #20]
 8008c98:	462b      	mov	r3, r5
 8008c9a:	eb00 0e05 	add.w	lr, r0, r5
 8008c9e:	210a      	movs	r1, #10
 8008ca0:	4573      	cmp	r3, lr
 8008ca2:	d113      	bne.n	8008ccc <_strtod_l+0x254>
 8008ca4:	182b      	adds	r3, r5, r0
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	f105 0501 	add.w	r5, r5, #1
 8008cac:	4405      	add	r5, r0
 8008cae:	dc1c      	bgt.n	8008cea <_strtod_l+0x272>
 8008cb0:	9907      	ldr	r1, [sp, #28]
 8008cb2:	230a      	movs	r3, #10
 8008cb4:	fb03 2301 	mla	r3, r3, r1, r2
 8008cb8:	9307      	str	r3, [sp, #28]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cbe:	1c51      	adds	r1, r2, #1
 8008cc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cc2:	7852      	ldrb	r2, [r2, #1]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	e7c9      	b.n	8008c5c <_strtod_l+0x1e4>
 8008cc8:	4638      	mov	r0, r7
 8008cca:	e7d2      	b.n	8008c72 <_strtod_l+0x1fa>
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	dc04      	bgt.n	8008cda <_strtod_l+0x262>
 8008cd0:	9e07      	ldr	r6, [sp, #28]
 8008cd2:	434e      	muls	r6, r1
 8008cd4:	9607      	str	r6, [sp, #28]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	e7e2      	b.n	8008ca0 <_strtod_l+0x228>
 8008cda:	f103 0c01 	add.w	ip, r3, #1
 8008cde:	f1bc 0f10 	cmp.w	ip, #16
 8008ce2:	bfd8      	it	le
 8008ce4:	fb01 f909 	mulle.w	r9, r1, r9
 8008ce8:	e7f5      	b.n	8008cd6 <_strtod_l+0x25e>
 8008cea:	2d10      	cmp	r5, #16
 8008cec:	bfdc      	itt	le
 8008cee:	230a      	movle	r3, #10
 8008cf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008cf4:	e7e1      	b.n	8008cba <_strtod_l+0x242>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9305      	str	r3, [sp, #20]
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e77c      	b.n	8008bf8 <_strtod_l+0x180>
 8008cfe:	f04f 0c00 	mov.w	ip, #0
 8008d02:	f108 0202 	add.w	r2, r8, #2
 8008d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d0c:	e785      	b.n	8008c1a <_strtod_l+0x1a2>
 8008d0e:	f04f 0c01 	mov.w	ip, #1
 8008d12:	e7f6      	b.n	8008d02 <_strtod_l+0x28a>
 8008d14:	0800d10c 	.word	0x0800d10c
 8008d18:	0800ce5c 	.word	0x0800ce5c
 8008d1c:	7ff00000 	.word	0x7ff00000
 8008d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d22:	1c51      	adds	r1, r2, #1
 8008d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d26:	7852      	ldrb	r2, [r2, #1]
 8008d28:	2a30      	cmp	r2, #48	; 0x30
 8008d2a:	d0f9      	beq.n	8008d20 <_strtod_l+0x2a8>
 8008d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d30:	2908      	cmp	r1, #8
 8008d32:	f63f af79 	bhi.w	8008c28 <_strtod_l+0x1b0>
 8008d36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d3c:	9206      	str	r2, [sp, #24]
 8008d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d40:	1c51      	adds	r1, r2, #1
 8008d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d44:	7852      	ldrb	r2, [r2, #1]
 8008d46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d4a:	2e09      	cmp	r6, #9
 8008d4c:	d937      	bls.n	8008dbe <_strtod_l+0x346>
 8008d4e:	9e06      	ldr	r6, [sp, #24]
 8008d50:	1b89      	subs	r1, r1, r6
 8008d52:	2908      	cmp	r1, #8
 8008d54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d58:	dc02      	bgt.n	8008d60 <_strtod_l+0x2e8>
 8008d5a:	4576      	cmp	r6, lr
 8008d5c:	bfa8      	it	ge
 8008d5e:	4676      	movge	r6, lr
 8008d60:	f1bc 0f00 	cmp.w	ip, #0
 8008d64:	d000      	beq.n	8008d68 <_strtod_l+0x2f0>
 8008d66:	4276      	negs	r6, r6
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	d14d      	bne.n	8008e08 <_strtod_l+0x390>
 8008d6c:	9904      	ldr	r1, [sp, #16]
 8008d6e:	4301      	orrs	r1, r0
 8008d70:	f47f aec6 	bne.w	8008b00 <_strtod_l+0x88>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f aee1 	bne.w	8008b3c <_strtod_l+0xc4>
 8008d7a:	2a69      	cmp	r2, #105	; 0x69
 8008d7c:	d027      	beq.n	8008dce <_strtod_l+0x356>
 8008d7e:	dc24      	bgt.n	8008dca <_strtod_l+0x352>
 8008d80:	2a49      	cmp	r2, #73	; 0x49
 8008d82:	d024      	beq.n	8008dce <_strtod_l+0x356>
 8008d84:	2a4e      	cmp	r2, #78	; 0x4e
 8008d86:	f47f aed9 	bne.w	8008b3c <_strtod_l+0xc4>
 8008d8a:	499f      	ldr	r1, [pc, #636]	; (8009008 <_strtod_l+0x590>)
 8008d8c:	a817      	add	r0, sp, #92	; 0x5c
 8008d8e:	f001 ff31 	bl	800abf4 <__match>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f43f aed2 	beq.w	8008b3c <_strtod_l+0xc4>
 8008d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b28      	cmp	r3, #40	; 0x28
 8008d9e:	d12d      	bne.n	8008dfc <_strtod_l+0x384>
 8008da0:	499a      	ldr	r1, [pc, #616]	; (800900c <_strtod_l+0x594>)
 8008da2:	aa1a      	add	r2, sp, #104	; 0x68
 8008da4:	a817      	add	r0, sp, #92	; 0x5c
 8008da6:	f001 ff39 	bl	800ac1c <__hexnan>
 8008daa:	2805      	cmp	r0, #5
 8008dac:	d126      	bne.n	8008dfc <_strtod_l+0x384>
 8008dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008db0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008db4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008db8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dbc:	e6a0      	b.n	8008b00 <_strtod_l+0x88>
 8008dbe:	210a      	movs	r1, #10
 8008dc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008dc8:	e7b9      	b.n	8008d3e <_strtod_l+0x2c6>
 8008dca:	2a6e      	cmp	r2, #110	; 0x6e
 8008dcc:	e7db      	b.n	8008d86 <_strtod_l+0x30e>
 8008dce:	4990      	ldr	r1, [pc, #576]	; (8009010 <_strtod_l+0x598>)
 8008dd0:	a817      	add	r0, sp, #92	; 0x5c
 8008dd2:	f001 ff0f 	bl	800abf4 <__match>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f aeb0 	beq.w	8008b3c <_strtod_l+0xc4>
 8008ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dde:	498d      	ldr	r1, [pc, #564]	; (8009014 <_strtod_l+0x59c>)
 8008de0:	3b01      	subs	r3, #1
 8008de2:	a817      	add	r0, sp, #92	; 0x5c
 8008de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008de6:	f001 ff05 	bl	800abf4 <__match>
 8008dea:	b910      	cbnz	r0, 8008df2 <_strtod_l+0x37a>
 8008dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dee:	3301      	adds	r3, #1
 8008df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008df2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009024 <_strtod_l+0x5ac>
 8008df6:	f04f 0a00 	mov.w	sl, #0
 8008dfa:	e681      	b.n	8008b00 <_strtod_l+0x88>
 8008dfc:	4886      	ldr	r0, [pc, #536]	; (8009018 <_strtod_l+0x5a0>)
 8008dfe:	f003 f83b 	bl	800be78 <nan>
 8008e02:	ec5b ab10 	vmov	sl, fp, d0
 8008e06:	e67b      	b.n	8008b00 <_strtod_l+0x88>
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	9807      	ldr	r0, [sp, #28]
 8008e0c:	1af3      	subs	r3, r6, r3
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	bf08      	it	eq
 8008e12:	462f      	moveq	r7, r5
 8008e14:	2d10      	cmp	r5, #16
 8008e16:	9306      	str	r3, [sp, #24]
 8008e18:	46a8      	mov	r8, r5
 8008e1a:	bfa8      	it	ge
 8008e1c:	f04f 0810 	movge.w	r8, #16
 8008e20:	f7f7 fb70 	bl	8000504 <__aeabi_ui2d>
 8008e24:	2d09      	cmp	r5, #9
 8008e26:	4682      	mov	sl, r0
 8008e28:	468b      	mov	fp, r1
 8008e2a:	dd13      	ble.n	8008e54 <_strtod_l+0x3dc>
 8008e2c:	4b7b      	ldr	r3, [pc, #492]	; (800901c <_strtod_l+0x5a4>)
 8008e2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4682      	mov	sl, r0
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	468b      	mov	fp, r1
 8008e40:	f7f7 fb60 	bl	8000504 <__aeabi_ui2d>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	f7f7 fa1e 	bl	800028c <__adddf3>
 8008e50:	4682      	mov	sl, r0
 8008e52:	468b      	mov	fp, r1
 8008e54:	2d0f      	cmp	r5, #15
 8008e56:	dc38      	bgt.n	8008eca <_strtod_l+0x452>
 8008e58:	9b06      	ldr	r3, [sp, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f43f ae50 	beq.w	8008b00 <_strtod_l+0x88>
 8008e60:	dd24      	ble.n	8008eac <_strtod_l+0x434>
 8008e62:	2b16      	cmp	r3, #22
 8008e64:	dc0b      	bgt.n	8008e7e <_strtod_l+0x406>
 8008e66:	496d      	ldr	r1, [pc, #436]	; (800901c <_strtod_l+0x5a4>)
 8008e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e70:	4652      	mov	r2, sl
 8008e72:	465b      	mov	r3, fp
 8008e74:	f7f7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8008e78:	4682      	mov	sl, r0
 8008e7a:	468b      	mov	fp, r1
 8008e7c:	e640      	b.n	8008b00 <_strtod_l+0x88>
 8008e7e:	9a06      	ldr	r2, [sp, #24]
 8008e80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e84:	4293      	cmp	r3, r2
 8008e86:	db20      	blt.n	8008eca <_strtod_l+0x452>
 8008e88:	4c64      	ldr	r4, [pc, #400]	; (800901c <_strtod_l+0x5a4>)
 8008e8a:	f1c5 050f 	rsb	r5, r5, #15
 8008e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e92:	4652      	mov	r2, sl
 8008e94:	465b      	mov	r3, fp
 8008e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	1b5d      	subs	r5, r3, r5
 8008ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eaa:	e7e3      	b.n	8008e74 <_strtod_l+0x3fc>
 8008eac:	9b06      	ldr	r3, [sp, #24]
 8008eae:	3316      	adds	r3, #22
 8008eb0:	db0b      	blt.n	8008eca <_strtod_l+0x452>
 8008eb2:	9b05      	ldr	r3, [sp, #20]
 8008eb4:	1b9e      	subs	r6, r3, r6
 8008eb6:	4b59      	ldr	r3, [pc, #356]	; (800901c <_strtod_l+0x5a4>)
 8008eb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	f7f7 fcc2 	bl	800084c <__aeabi_ddiv>
 8008ec8:	e7d6      	b.n	8008e78 <_strtod_l+0x400>
 8008eca:	9b06      	ldr	r3, [sp, #24]
 8008ecc:	eba5 0808 	sub.w	r8, r5, r8
 8008ed0:	4498      	add	r8, r3
 8008ed2:	f1b8 0f00 	cmp.w	r8, #0
 8008ed6:	dd74      	ble.n	8008fc2 <_strtod_l+0x54a>
 8008ed8:	f018 030f 	ands.w	r3, r8, #15
 8008edc:	d00a      	beq.n	8008ef4 <_strtod_l+0x47c>
 8008ede:	494f      	ldr	r1, [pc, #316]	; (800901c <_strtod_l+0x5a4>)
 8008ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	465b      	mov	r3, fp
 8008ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	f038 080f 	bics.w	r8, r8, #15
 8008ef8:	d04f      	beq.n	8008f9a <_strtod_l+0x522>
 8008efa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008efe:	dd22      	ble.n	8008f46 <_strtod_l+0x4ce>
 8008f00:	2500      	movs	r5, #0
 8008f02:	462e      	mov	r6, r5
 8008f04:	9507      	str	r5, [sp, #28]
 8008f06:	9505      	str	r5, [sp, #20]
 8008f08:	2322      	movs	r3, #34	; 0x22
 8008f0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009024 <_strtod_l+0x5ac>
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	f04f 0a00 	mov.w	sl, #0
 8008f14:	9b07      	ldr	r3, [sp, #28]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f43f adf2 	beq.w	8008b00 <_strtod_l+0x88>
 8008f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f001 ff7a 	bl	800ae18 <_Bfree>
 8008f24:	9905      	ldr	r1, [sp, #20]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 ff76 	bl	800ae18 <_Bfree>
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f001 ff72 	bl	800ae18 <_Bfree>
 8008f34:	9907      	ldr	r1, [sp, #28]
 8008f36:	4620      	mov	r0, r4
 8008f38:	f001 ff6e 	bl	800ae18 <_Bfree>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f001 ff6a 	bl	800ae18 <_Bfree>
 8008f44:	e5dc      	b.n	8008b00 <_strtod_l+0x88>
 8008f46:	4b36      	ldr	r3, [pc, #216]	; (8009020 <_strtod_l+0x5a8>)
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f50:	4650      	mov	r0, sl
 8008f52:	4659      	mov	r1, fp
 8008f54:	4699      	mov	r9, r3
 8008f56:	f1b8 0f01 	cmp.w	r8, #1
 8008f5a:	dc21      	bgt.n	8008fa0 <_strtod_l+0x528>
 8008f5c:	b10b      	cbz	r3, 8008f62 <_strtod_l+0x4ea>
 8008f5e:	4682      	mov	sl, r0
 8008f60:	468b      	mov	fp, r1
 8008f62:	4b2f      	ldr	r3, [pc, #188]	; (8009020 <_strtod_l+0x5a8>)
 8008f64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f6c:	4652      	mov	r2, sl
 8008f6e:	465b      	mov	r3, fp
 8008f70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f74:	f7f7 fb40 	bl	80005f8 <__aeabi_dmul>
 8008f78:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <_strtod_l+0x5ac>)
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	400b      	ands	r3, r1
 8008f7e:	492a      	ldr	r1, [pc, #168]	; (8009028 <_strtod_l+0x5b0>)
 8008f80:	428b      	cmp	r3, r1
 8008f82:	4682      	mov	sl, r0
 8008f84:	d8bc      	bhi.n	8008f00 <_strtod_l+0x488>
 8008f86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f8a:	428b      	cmp	r3, r1
 8008f8c:	bf86      	itte	hi
 8008f8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800902c <_strtod_l+0x5b4>
 8008f92:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	e084      	b.n	80090aa <_strtod_l+0x632>
 8008fa0:	f018 0f01 	tst.w	r8, #1
 8008fa4:	d005      	beq.n	8008fb2 <_strtod_l+0x53a>
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_dmul>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	9a04      	ldr	r2, [sp, #16]
 8008fb4:	3208      	adds	r2, #8
 8008fb6:	f109 0901 	add.w	r9, r9, #1
 8008fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fbe:	9204      	str	r2, [sp, #16]
 8008fc0:	e7c9      	b.n	8008f56 <_strtod_l+0x4de>
 8008fc2:	d0ea      	beq.n	8008f9a <_strtod_l+0x522>
 8008fc4:	f1c8 0800 	rsb	r8, r8, #0
 8008fc8:	f018 020f 	ands.w	r2, r8, #15
 8008fcc:	d00a      	beq.n	8008fe4 <_strtod_l+0x56c>
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <_strtod_l+0x5a4>)
 8008fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd4:	4650      	mov	r0, sl
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fc36 	bl	800084c <__aeabi_ddiv>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	468b      	mov	fp, r1
 8008fe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fe8:	d0d7      	beq.n	8008f9a <_strtod_l+0x522>
 8008fea:	f1b8 0f1f 	cmp.w	r8, #31
 8008fee:	dd1f      	ble.n	8009030 <_strtod_l+0x5b8>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	462e      	mov	r6, r5
 8008ff4:	9507      	str	r5, [sp, #28]
 8008ff6:	9505      	str	r5, [sp, #20]
 8008ff8:	2322      	movs	r3, #34	; 0x22
 8008ffa:	f04f 0a00 	mov.w	sl, #0
 8008ffe:	f04f 0b00 	mov.w	fp, #0
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	e786      	b.n	8008f14 <_strtod_l+0x49c>
 8009006:	bf00      	nop
 8009008:	0800ce2d 	.word	0x0800ce2d
 800900c:	0800ce70 	.word	0x0800ce70
 8009010:	0800ce25 	.word	0x0800ce25
 8009014:	0800cfb4 	.word	0x0800cfb4
 8009018:	0800d2c8 	.word	0x0800d2c8
 800901c:	0800d1a8 	.word	0x0800d1a8
 8009020:	0800d180 	.word	0x0800d180
 8009024:	7ff00000 	.word	0x7ff00000
 8009028:	7ca00000 	.word	0x7ca00000
 800902c:	7fefffff 	.word	0x7fefffff
 8009030:	f018 0310 	ands.w	r3, r8, #16
 8009034:	bf18      	it	ne
 8009036:	236a      	movne	r3, #106	; 0x6a
 8009038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80093e8 <_strtod_l+0x970>
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	2300      	movs	r3, #0
 8009044:	f018 0f01 	tst.w	r8, #1
 8009048:	d004      	beq.n	8009054 <_strtod_l+0x5dc>
 800904a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	2301      	movs	r3, #1
 8009054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009058:	f109 0908 	add.w	r9, r9, #8
 800905c:	d1f2      	bne.n	8009044 <_strtod_l+0x5cc>
 800905e:	b10b      	cbz	r3, 8009064 <_strtod_l+0x5ec>
 8009060:	4682      	mov	sl, r0
 8009062:	468b      	mov	fp, r1
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	b1c3      	cbz	r3, 800909a <_strtod_l+0x622>
 8009068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800906c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009070:	2b00      	cmp	r3, #0
 8009072:	4659      	mov	r1, fp
 8009074:	dd11      	ble.n	800909a <_strtod_l+0x622>
 8009076:	2b1f      	cmp	r3, #31
 8009078:	f340 8124 	ble.w	80092c4 <_strtod_l+0x84c>
 800907c:	2b34      	cmp	r3, #52	; 0x34
 800907e:	bfde      	ittt	le
 8009080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009084:	f04f 33ff 	movle.w	r3, #4294967295
 8009088:	fa03 f202 	lslle.w	r2, r3, r2
 800908c:	f04f 0a00 	mov.w	sl, #0
 8009090:	bfcc      	ite	gt
 8009092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009096:	ea02 0b01 	andle.w	fp, r2, r1
 800909a:	2200      	movs	r2, #0
 800909c:	2300      	movs	r3, #0
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	f7f7 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d1a2      	bne.n	8008ff0 <_strtod_l+0x578>
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	9908      	ldr	r1, [sp, #32]
 80090b0:	462b      	mov	r3, r5
 80090b2:	463a      	mov	r2, r7
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 ff17 	bl	800aee8 <__s2b>
 80090ba:	9007      	str	r0, [sp, #28]
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f af1f 	beq.w	8008f00 <_strtod_l+0x488>
 80090c2:	9b05      	ldr	r3, [sp, #20]
 80090c4:	1b9e      	subs	r6, r3, r6
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfb4      	ite	lt
 80090cc:	4633      	movlt	r3, r6
 80090ce:	2300      	movge	r3, #0
 80090d0:	930c      	str	r3, [sp, #48]	; 0x30
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	2500      	movs	r5, #0
 80090d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090da:	9312      	str	r3, [sp, #72]	; 0x48
 80090dc:	462e      	mov	r6, r5
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	4620      	mov	r0, r4
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	f001 fe58 	bl	800ad98 <_Balloc>
 80090e8:	9005      	str	r0, [sp, #20]
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f af0c 	beq.w	8008f08 <_strtod_l+0x490>
 80090f0:	9b07      	ldr	r3, [sp, #28]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	3202      	adds	r2, #2
 80090f6:	f103 010c 	add.w	r1, r3, #12
 80090fa:	0092      	lsls	r2, r2, #2
 80090fc:	300c      	adds	r0, #12
 80090fe:	f7fe fdd1 	bl	8007ca4 <memcpy>
 8009102:	ec4b ab10 	vmov	d0, sl, fp
 8009106:	aa1a      	add	r2, sp, #104	; 0x68
 8009108:	a919      	add	r1, sp, #100	; 0x64
 800910a:	4620      	mov	r0, r4
 800910c:	f002 fa32 	bl	800b574 <__d2b>
 8009110:	ec4b ab18 	vmov	d8, sl, fp
 8009114:	9018      	str	r0, [sp, #96]	; 0x60
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f aef6 	beq.w	8008f08 <_strtod_l+0x490>
 800911c:	2101      	movs	r1, #1
 800911e:	4620      	mov	r0, r4
 8009120:	f001 ff7c 	bl	800b01c <__i2b>
 8009124:	4606      	mov	r6, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f aeee 	beq.w	8008f08 <_strtod_l+0x490>
 800912c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800912e:	9904      	ldr	r1, [sp, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfab      	itete	ge
 8009134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800913a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800913e:	bfac      	ite	ge
 8009140:	eb03 0902 	addge.w	r9, r3, r2
 8009144:	1ad7      	sublt	r7, r2, r3
 8009146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009148:	eba3 0801 	sub.w	r8, r3, r1
 800914c:	4490      	add	r8, r2
 800914e:	4ba1      	ldr	r3, [pc, #644]	; (80093d4 <_strtod_l+0x95c>)
 8009150:	f108 38ff 	add.w	r8, r8, #4294967295
 8009154:	4598      	cmp	r8, r3
 8009156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800915a:	f280 80c7 	bge.w	80092ec <_strtod_l+0x874>
 800915e:	eba3 0308 	sub.w	r3, r3, r8
 8009162:	2b1f      	cmp	r3, #31
 8009164:	eba2 0203 	sub.w	r2, r2, r3
 8009168:	f04f 0101 	mov.w	r1, #1
 800916c:	f300 80b1 	bgt.w	80092d2 <_strtod_l+0x85a>
 8009170:	fa01 f303 	lsl.w	r3, r1, r3
 8009174:	930d      	str	r3, [sp, #52]	; 0x34
 8009176:	2300      	movs	r3, #0
 8009178:	9308      	str	r3, [sp, #32]
 800917a:	eb09 0802 	add.w	r8, r9, r2
 800917e:	9b04      	ldr	r3, [sp, #16]
 8009180:	45c1      	cmp	r9, r8
 8009182:	4417      	add	r7, r2
 8009184:	441f      	add	r7, r3
 8009186:	464b      	mov	r3, r9
 8009188:	bfa8      	it	ge
 800918a:	4643      	movge	r3, r8
 800918c:	42bb      	cmp	r3, r7
 800918e:	bfa8      	it	ge
 8009190:	463b      	movge	r3, r7
 8009192:	2b00      	cmp	r3, #0
 8009194:	bfc2      	ittt	gt
 8009196:	eba8 0803 	subgt.w	r8, r8, r3
 800919a:	1aff      	subgt	r7, r7, r3
 800919c:	eba9 0903 	subgt.w	r9, r9, r3
 80091a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd17      	ble.n	80091d6 <_strtod_l+0x75e>
 80091a6:	4631      	mov	r1, r6
 80091a8:	461a      	mov	r2, r3
 80091aa:	4620      	mov	r0, r4
 80091ac:	f001 fff6 	bl	800b19c <__pow5mult>
 80091b0:	4606      	mov	r6, r0
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aea8 	beq.w	8008f08 <_strtod_l+0x490>
 80091b8:	4601      	mov	r1, r0
 80091ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091bc:	4620      	mov	r0, r4
 80091be:	f001 ff43 	bl	800b048 <__multiply>
 80091c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f43f ae9f 	beq.w	8008f08 <_strtod_l+0x490>
 80091ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091cc:	4620      	mov	r0, r4
 80091ce:	f001 fe23 	bl	800ae18 <_Bfree>
 80091d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d4:	9318      	str	r3, [sp, #96]	; 0x60
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	f300 808c 	bgt.w	80092f6 <_strtod_l+0x87e>
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dd08      	ble.n	80091f6 <_strtod_l+0x77e>
 80091e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091e6:	9905      	ldr	r1, [sp, #20]
 80091e8:	4620      	mov	r0, r4
 80091ea:	f001 ffd7 	bl	800b19c <__pow5mult>
 80091ee:	9005      	str	r0, [sp, #20]
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f43f ae89 	beq.w	8008f08 <_strtod_l+0x490>
 80091f6:	2f00      	cmp	r7, #0
 80091f8:	dd08      	ble.n	800920c <_strtod_l+0x794>
 80091fa:	9905      	ldr	r1, [sp, #20]
 80091fc:	463a      	mov	r2, r7
 80091fe:	4620      	mov	r0, r4
 8009200:	f002 f826 	bl	800b250 <__lshift>
 8009204:	9005      	str	r0, [sp, #20]
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f ae7e 	beq.w	8008f08 <_strtod_l+0x490>
 800920c:	f1b9 0f00 	cmp.w	r9, #0
 8009210:	dd08      	ble.n	8009224 <_strtod_l+0x7ac>
 8009212:	4631      	mov	r1, r6
 8009214:	464a      	mov	r2, r9
 8009216:	4620      	mov	r0, r4
 8009218:	f002 f81a 	bl	800b250 <__lshift>
 800921c:	4606      	mov	r6, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f ae72 	beq.w	8008f08 <_strtod_l+0x490>
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009228:	4620      	mov	r0, r4
 800922a:	f002 f89d 	bl	800b368 <__mdiff>
 800922e:	4605      	mov	r5, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	f43f ae69 	beq.w	8008f08 <_strtod_l+0x490>
 8009236:	68c3      	ldr	r3, [r0, #12]
 8009238:	930b      	str	r3, [sp, #44]	; 0x2c
 800923a:	2300      	movs	r3, #0
 800923c:	60c3      	str	r3, [r0, #12]
 800923e:	4631      	mov	r1, r6
 8009240:	f002 f876 	bl	800b330 <__mcmp>
 8009244:	2800      	cmp	r0, #0
 8009246:	da60      	bge.n	800930a <_strtod_l+0x892>
 8009248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800924a:	ea53 030a 	orrs.w	r3, r3, sl
 800924e:	f040 8082 	bne.w	8009356 <_strtod_l+0x8de>
 8009252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009256:	2b00      	cmp	r3, #0
 8009258:	d17d      	bne.n	8009356 <_strtod_l+0x8de>
 800925a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	051b      	lsls	r3, r3, #20
 8009262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009266:	d976      	bls.n	8009356 <_strtod_l+0x8de>
 8009268:	696b      	ldr	r3, [r5, #20]
 800926a:	b913      	cbnz	r3, 8009272 <_strtod_l+0x7fa>
 800926c:	692b      	ldr	r3, [r5, #16]
 800926e:	2b01      	cmp	r3, #1
 8009270:	dd71      	ble.n	8009356 <_strtod_l+0x8de>
 8009272:	4629      	mov	r1, r5
 8009274:	2201      	movs	r2, #1
 8009276:	4620      	mov	r0, r4
 8009278:	f001 ffea 	bl	800b250 <__lshift>
 800927c:	4631      	mov	r1, r6
 800927e:	4605      	mov	r5, r0
 8009280:	f002 f856 	bl	800b330 <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	dd66      	ble.n	8009356 <_strtod_l+0x8de>
 8009288:	9904      	ldr	r1, [sp, #16]
 800928a:	4a53      	ldr	r2, [pc, #332]	; (80093d8 <_strtod_l+0x960>)
 800928c:	465b      	mov	r3, fp
 800928e:	2900      	cmp	r1, #0
 8009290:	f000 8081 	beq.w	8009396 <_strtod_l+0x91e>
 8009294:	ea02 010b 	and.w	r1, r2, fp
 8009298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800929c:	dc7b      	bgt.n	8009396 <_strtod_l+0x91e>
 800929e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092a2:	f77f aea9 	ble.w	8008ff8 <_strtod_l+0x580>
 80092a6:	4b4d      	ldr	r3, [pc, #308]	; (80093dc <_strtod_l+0x964>)
 80092a8:	4650      	mov	r0, sl
 80092aa:	4659      	mov	r1, fp
 80092ac:	2200      	movs	r2, #0
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	460b      	mov	r3, r1
 80092b4:	4303      	orrs	r3, r0
 80092b6:	bf08      	it	eq
 80092b8:	2322      	moveq	r3, #34	; 0x22
 80092ba:	4682      	mov	sl, r0
 80092bc:	468b      	mov	fp, r1
 80092be:	bf08      	it	eq
 80092c0:	6023      	streq	r3, [r4, #0]
 80092c2:	e62b      	b.n	8008f1c <_strtod_l+0x4a4>
 80092c4:	f04f 32ff 	mov.w	r2, #4294967295
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	ea03 0a0a 	and.w	sl, r3, sl
 80092d0:	e6e3      	b.n	800909a <_strtod_l+0x622>
 80092d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092e2:	fa01 f308 	lsl.w	r3, r1, r8
 80092e6:	9308      	str	r3, [sp, #32]
 80092e8:	910d      	str	r1, [sp, #52]	; 0x34
 80092ea:	e746      	b.n	800917a <_strtod_l+0x702>
 80092ec:	2300      	movs	r3, #0
 80092ee:	9308      	str	r3, [sp, #32]
 80092f0:	2301      	movs	r3, #1
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	e741      	b.n	800917a <_strtod_l+0x702>
 80092f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092f8:	4642      	mov	r2, r8
 80092fa:	4620      	mov	r0, r4
 80092fc:	f001 ffa8 	bl	800b250 <__lshift>
 8009300:	9018      	str	r0, [sp, #96]	; 0x60
 8009302:	2800      	cmp	r0, #0
 8009304:	f47f af6b 	bne.w	80091de <_strtod_l+0x766>
 8009308:	e5fe      	b.n	8008f08 <_strtod_l+0x490>
 800930a:	465f      	mov	r7, fp
 800930c:	d16e      	bne.n	80093ec <_strtod_l+0x974>
 800930e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009314:	b342      	cbz	r2, 8009368 <_strtod_l+0x8f0>
 8009316:	4a32      	ldr	r2, [pc, #200]	; (80093e0 <_strtod_l+0x968>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d128      	bne.n	800936e <_strtod_l+0x8f6>
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	4651      	mov	r1, sl
 8009320:	b1eb      	cbz	r3, 800935e <_strtod_l+0x8e6>
 8009322:	4b2d      	ldr	r3, [pc, #180]	; (80093d8 <_strtod_l+0x960>)
 8009324:	403b      	ands	r3, r7
 8009326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800932a:	f04f 32ff 	mov.w	r2, #4294967295
 800932e:	d819      	bhi.n	8009364 <_strtod_l+0x8ec>
 8009330:	0d1b      	lsrs	r3, r3, #20
 8009332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009336:	fa02 f303 	lsl.w	r3, r2, r3
 800933a:	4299      	cmp	r1, r3
 800933c:	d117      	bne.n	800936e <_strtod_l+0x8f6>
 800933e:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <_strtod_l+0x96c>)
 8009340:	429f      	cmp	r7, r3
 8009342:	d102      	bne.n	800934a <_strtod_l+0x8d2>
 8009344:	3101      	adds	r1, #1
 8009346:	f43f addf 	beq.w	8008f08 <_strtod_l+0x490>
 800934a:	4b23      	ldr	r3, [pc, #140]	; (80093d8 <_strtod_l+0x960>)
 800934c:	403b      	ands	r3, r7
 800934e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009352:	f04f 0a00 	mov.w	sl, #0
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1a4      	bne.n	80092a6 <_strtod_l+0x82e>
 800935c:	e5de      	b.n	8008f1c <_strtod_l+0x4a4>
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
 8009362:	e7ea      	b.n	800933a <_strtod_l+0x8c2>
 8009364:	4613      	mov	r3, r2
 8009366:	e7e8      	b.n	800933a <_strtod_l+0x8c2>
 8009368:	ea53 030a 	orrs.w	r3, r3, sl
 800936c:	d08c      	beq.n	8009288 <_strtod_l+0x810>
 800936e:	9b08      	ldr	r3, [sp, #32]
 8009370:	b1db      	cbz	r3, 80093aa <_strtod_l+0x932>
 8009372:	423b      	tst	r3, r7
 8009374:	d0ef      	beq.n	8009356 <_strtod_l+0x8de>
 8009376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	4650      	mov	r0, sl
 800937c:	4659      	mov	r1, fp
 800937e:	b1c3      	cbz	r3, 80093b2 <_strtod_l+0x93a>
 8009380:	f7ff fb5e 	bl	8008a40 <sulp>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	ec51 0b18 	vmov	r0, r1, d8
 800938c:	f7f6 ff7e 	bl	800028c <__adddf3>
 8009390:	4682      	mov	sl, r0
 8009392:	468b      	mov	fp, r1
 8009394:	e7df      	b.n	8009356 <_strtod_l+0x8de>
 8009396:	4013      	ands	r3, r2
 8009398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800939c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093a4:	f04f 3aff 	mov.w	sl, #4294967295
 80093a8:	e7d5      	b.n	8009356 <_strtod_l+0x8de>
 80093aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ac:	ea13 0f0a 	tst.w	r3, sl
 80093b0:	e7e0      	b.n	8009374 <_strtod_l+0x8fc>
 80093b2:	f7ff fb45 	bl	8008a40 <sulp>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	ec51 0b18 	vmov	r0, r1, d8
 80093be:	f7f6 ff63 	bl	8000288 <__aeabi_dsub>
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	4682      	mov	sl, r0
 80093c8:	468b      	mov	fp, r1
 80093ca:	f7f7 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d0c1      	beq.n	8009356 <_strtod_l+0x8de>
 80093d2:	e611      	b.n	8008ff8 <_strtod_l+0x580>
 80093d4:	fffffc02 	.word	0xfffffc02
 80093d8:	7ff00000 	.word	0x7ff00000
 80093dc:	39500000 	.word	0x39500000
 80093e0:	000fffff 	.word	0x000fffff
 80093e4:	7fefffff 	.word	0x7fefffff
 80093e8:	0800ce88 	.word	0x0800ce88
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	f002 f91c 	bl	800b62c <__ratio>
 80093f4:	ec59 8b10 	vmov	r8, r9, d0
 80093f8:	ee10 0a10 	vmov	r0, s0
 80093fc:	2200      	movs	r2, #0
 80093fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 fb74 	bl	8000af0 <__aeabi_dcmple>
 8009408:	2800      	cmp	r0, #0
 800940a:	d07a      	beq.n	8009502 <_strtod_l+0xa8a>
 800940c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d04a      	beq.n	80094a8 <_strtod_l+0xa30>
 8009412:	4b95      	ldr	r3, [pc, #596]	; (8009668 <_strtod_l+0xbf0>)
 8009414:	2200      	movs	r2, #0
 8009416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800941a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009668 <_strtod_l+0xbf0>
 800941e:	f04f 0800 	mov.w	r8, #0
 8009422:	4b92      	ldr	r3, [pc, #584]	; (800966c <_strtod_l+0xbf4>)
 8009424:	403b      	ands	r3, r7
 8009426:	930d      	str	r3, [sp, #52]	; 0x34
 8009428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800942a:	4b91      	ldr	r3, [pc, #580]	; (8009670 <_strtod_l+0xbf8>)
 800942c:	429a      	cmp	r2, r3
 800942e:	f040 80b0 	bne.w	8009592 <_strtod_l+0xb1a>
 8009432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800943a:	ec4b ab10 	vmov	d0, sl, fp
 800943e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009442:	f002 f81b 	bl	800b47c <__ulp>
 8009446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800944a:	ec53 2b10 	vmov	r2, r3, d0
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	4652      	mov	r2, sl
 8009454:	465b      	mov	r3, fp
 8009456:	f7f6 ff19 	bl	800028c <__adddf3>
 800945a:	460b      	mov	r3, r1
 800945c:	4983      	ldr	r1, [pc, #524]	; (800966c <_strtod_l+0xbf4>)
 800945e:	4a85      	ldr	r2, [pc, #532]	; (8009674 <_strtod_l+0xbfc>)
 8009460:	4019      	ands	r1, r3
 8009462:	4291      	cmp	r1, r2
 8009464:	4682      	mov	sl, r0
 8009466:	d960      	bls.n	800952a <_strtod_l+0xab2>
 8009468:	ee18 3a90 	vmov	r3, s17
 800946c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009470:	4293      	cmp	r3, r2
 8009472:	d104      	bne.n	800947e <_strtod_l+0xa06>
 8009474:	ee18 3a10 	vmov	r3, s16
 8009478:	3301      	adds	r3, #1
 800947a:	f43f ad45 	beq.w	8008f08 <_strtod_l+0x490>
 800947e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009680 <_strtod_l+0xc08>
 8009482:	f04f 3aff 	mov.w	sl, #4294967295
 8009486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fcc5 	bl	800ae18 <_Bfree>
 800948e:	9905      	ldr	r1, [sp, #20]
 8009490:	4620      	mov	r0, r4
 8009492:	f001 fcc1 	bl	800ae18 <_Bfree>
 8009496:	4631      	mov	r1, r6
 8009498:	4620      	mov	r0, r4
 800949a:	f001 fcbd 	bl	800ae18 <_Bfree>
 800949e:	4629      	mov	r1, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f001 fcb9 	bl	800ae18 <_Bfree>
 80094a6:	e61a      	b.n	80090de <_strtod_l+0x666>
 80094a8:	f1ba 0f00 	cmp.w	sl, #0
 80094ac:	d11b      	bne.n	80094e6 <_strtod_l+0xa6e>
 80094ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094b2:	b9f3      	cbnz	r3, 80094f2 <_strtod_l+0xa7a>
 80094b4:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <_strtod_l+0xbf0>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80094c0:	b9d0      	cbnz	r0, 80094f8 <_strtod_l+0xa80>
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	4b6c      	ldr	r3, [pc, #432]	; (8009678 <_strtod_l+0xc00>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	4680      	mov	r8, r0
 80094d0:	4689      	mov	r9, r1
 80094d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80094da:	9315      	str	r3, [sp, #84]	; 0x54
 80094dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094e4:	e79d      	b.n	8009422 <_strtod_l+0x9aa>
 80094e6:	f1ba 0f01 	cmp.w	sl, #1
 80094ea:	d102      	bne.n	80094f2 <_strtod_l+0xa7a>
 80094ec:	2f00      	cmp	r7, #0
 80094ee:	f43f ad83 	beq.w	8008ff8 <_strtod_l+0x580>
 80094f2:	4b62      	ldr	r3, [pc, #392]	; (800967c <_strtod_l+0xc04>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	e78e      	b.n	8009416 <_strtod_l+0x99e>
 80094f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009678 <_strtod_l+0xc00>
 80094fc:	f04f 0800 	mov.w	r8, #0
 8009500:	e7e7      	b.n	80094d2 <_strtod_l+0xa5a>
 8009502:	4b5d      	ldr	r3, [pc, #372]	; (8009678 <_strtod_l+0xc00>)
 8009504:	4640      	mov	r0, r8
 8009506:	4649      	mov	r1, r9
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f875 	bl	80005f8 <__aeabi_dmul>
 800950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009510:	4680      	mov	r8, r0
 8009512:	4689      	mov	r9, r1
 8009514:	b933      	cbnz	r3, 8009524 <_strtod_l+0xaac>
 8009516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800951a:	900e      	str	r0, [sp, #56]	; 0x38
 800951c:	930f      	str	r3, [sp, #60]	; 0x3c
 800951e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009522:	e7dd      	b.n	80094e0 <_strtod_l+0xa68>
 8009524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009528:	e7f9      	b.n	800951e <_strtod_l+0xaa6>
 800952a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1a8      	bne.n	8009486 <_strtod_l+0xa0e>
 8009534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800953a:	0d1b      	lsrs	r3, r3, #20
 800953c:	051b      	lsls	r3, r3, #20
 800953e:	429a      	cmp	r2, r3
 8009540:	d1a1      	bne.n	8009486 <_strtod_l+0xa0e>
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	f7f7 fbb7 	bl	8000cb8 <__aeabi_d2lz>
 800954a:	f7f7 f827 	bl	800059c <__aeabi_l2d>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	f7f6 fe97 	bl	8000288 <__aeabi_dsub>
 800955a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800955c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009560:	ea43 030a 	orr.w	r3, r3, sl
 8009564:	4313      	orrs	r3, r2
 8009566:	4680      	mov	r8, r0
 8009568:	4689      	mov	r9, r1
 800956a:	d055      	beq.n	8009618 <_strtod_l+0xba0>
 800956c:	a336      	add	r3, pc, #216	; (adr r3, 8009648 <_strtod_l+0xbd0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 fab3 	bl	8000adc <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	f47f acd0 	bne.w	8008f1c <_strtod_l+0x4a4>
 800957c:	a334      	add	r3, pc, #208	; (adr r3, 8009650 <_strtod_l+0xbd8>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	f7f7 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800958a:	2800      	cmp	r0, #0
 800958c:	f43f af7b 	beq.w	8009486 <_strtod_l+0xa0e>
 8009590:	e4c4      	b.n	8008f1c <_strtod_l+0x4a4>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	b333      	cbz	r3, 80095e4 <_strtod_l+0xb6c>
 8009596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800959c:	d822      	bhi.n	80095e4 <_strtod_l+0xb6c>
 800959e:	a32e      	add	r3, pc, #184	; (adr r3, 8009658 <_strtod_l+0xbe0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	4640      	mov	r0, r8
 80095a6:	4649      	mov	r1, r9
 80095a8:	f7f7 faa2 	bl	8000af0 <__aeabi_dcmple>
 80095ac:	b1a0      	cbz	r0, 80095d8 <_strtod_l+0xb60>
 80095ae:	4649      	mov	r1, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	f7f7 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 80095b6:	2801      	cmp	r0, #1
 80095b8:	bf38      	it	cc
 80095ba:	2001      	movcc	r0, #1
 80095bc:	f7f6 ffa2 	bl	8000504 <__aeabi_ui2d>
 80095c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c2:	4680      	mov	r8, r0
 80095c4:	4689      	mov	r9, r1
 80095c6:	bb23      	cbnz	r3, 8009612 <_strtod_l+0xb9a>
 80095c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095cc:	9010      	str	r0, [sp, #64]	; 0x40
 80095ce:	9311      	str	r3, [sp, #68]	; 0x44
 80095d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	9309      	str	r3, [sp, #36]	; 0x24
 80095e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095e8:	eeb0 0a48 	vmov.f32	s0, s16
 80095ec:	eef0 0a68 	vmov.f32	s1, s17
 80095f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095f4:	f001 ff42 	bl	800b47c <__ulp>
 80095f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095fc:	ec53 2b10 	vmov	r2, r3, d0
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	ec53 2b18 	vmov	r2, r3, d8
 8009608:	f7f6 fe40 	bl	800028c <__adddf3>
 800960c:	4682      	mov	sl, r0
 800960e:	468b      	mov	fp, r1
 8009610:	e78d      	b.n	800952e <_strtod_l+0xab6>
 8009612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009616:	e7db      	b.n	80095d0 <_strtod_l+0xb58>
 8009618:	a311      	add	r3, pc, #68	; (adr r3, 8009660 <_strtod_l+0xbe8>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f7 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8009622:	e7b2      	b.n	800958a <_strtod_l+0xb12>
 8009624:	2300      	movs	r3, #0
 8009626:	930a      	str	r3, [sp, #40]	; 0x28
 8009628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800962a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	f7ff ba6b 	b.w	8008b08 <_strtod_l+0x90>
 8009632:	2a65      	cmp	r2, #101	; 0x65
 8009634:	f43f ab5f 	beq.w	8008cf6 <_strtod_l+0x27e>
 8009638:	2a45      	cmp	r2, #69	; 0x45
 800963a:	f43f ab5c 	beq.w	8008cf6 <_strtod_l+0x27e>
 800963e:	2301      	movs	r3, #1
 8009640:	f7ff bb94 	b.w	8008d6c <_strtod_l+0x2f4>
 8009644:	f3af 8000 	nop.w
 8009648:	94a03595 	.word	0x94a03595
 800964c:	3fdfffff 	.word	0x3fdfffff
 8009650:	35afe535 	.word	0x35afe535
 8009654:	3fe00000 	.word	0x3fe00000
 8009658:	ffc00000 	.word	0xffc00000
 800965c:	41dfffff 	.word	0x41dfffff
 8009660:	94a03595 	.word	0x94a03595
 8009664:	3fcfffff 	.word	0x3fcfffff
 8009668:	3ff00000 	.word	0x3ff00000
 800966c:	7ff00000 	.word	0x7ff00000
 8009670:	7fe00000 	.word	0x7fe00000
 8009674:	7c9fffff 	.word	0x7c9fffff
 8009678:	3fe00000 	.word	0x3fe00000
 800967c:	bff00000 	.word	0xbff00000
 8009680:	7fefffff 	.word	0x7fefffff

08009684 <_strtod_r>:
 8009684:	4b01      	ldr	r3, [pc, #4]	; (800968c <_strtod_r+0x8>)
 8009686:	f7ff b9f7 	b.w	8008a78 <_strtod_l>
 800968a:	bf00      	nop
 800968c:	2000014c 	.word	0x2000014c

08009690 <_strtol_l.constprop.0>:
 8009690:	2b01      	cmp	r3, #1
 8009692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009696:	d001      	beq.n	800969c <_strtol_l.constprop.0+0xc>
 8009698:	2b24      	cmp	r3, #36	; 0x24
 800969a:	d906      	bls.n	80096aa <_strtol_l.constprop.0+0x1a>
 800969c:	f7fe fad8 	bl	8007c50 <__errno>
 80096a0:	2316      	movs	r3, #22
 80096a2:	6003      	str	r3, [r0, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009790 <_strtol_l.constprop.0+0x100>
 80096ae:	460d      	mov	r5, r1
 80096b0:	462e      	mov	r6, r5
 80096b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80096ba:	f017 0708 	ands.w	r7, r7, #8
 80096be:	d1f7      	bne.n	80096b0 <_strtol_l.constprop.0+0x20>
 80096c0:	2c2d      	cmp	r4, #45	; 0x2d
 80096c2:	d132      	bne.n	800972a <_strtol_l.constprop.0+0x9a>
 80096c4:	782c      	ldrb	r4, [r5, #0]
 80096c6:	2701      	movs	r7, #1
 80096c8:	1cb5      	adds	r5, r6, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d05b      	beq.n	8009786 <_strtol_l.constprop.0+0xf6>
 80096ce:	2b10      	cmp	r3, #16
 80096d0:	d109      	bne.n	80096e6 <_strtol_l.constprop.0+0x56>
 80096d2:	2c30      	cmp	r4, #48	; 0x30
 80096d4:	d107      	bne.n	80096e6 <_strtol_l.constprop.0+0x56>
 80096d6:	782c      	ldrb	r4, [r5, #0]
 80096d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096dc:	2c58      	cmp	r4, #88	; 0x58
 80096de:	d14d      	bne.n	800977c <_strtol_l.constprop.0+0xec>
 80096e0:	786c      	ldrb	r4, [r5, #1]
 80096e2:	2310      	movs	r3, #16
 80096e4:	3502      	adds	r5, #2
 80096e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80096ee:	f04f 0c00 	mov.w	ip, #0
 80096f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80096f6:	4666      	mov	r6, ip
 80096f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80096fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009700:	f1be 0f09 	cmp.w	lr, #9
 8009704:	d816      	bhi.n	8009734 <_strtol_l.constprop.0+0xa4>
 8009706:	4674      	mov	r4, lr
 8009708:	42a3      	cmp	r3, r4
 800970a:	dd24      	ble.n	8009756 <_strtol_l.constprop.0+0xc6>
 800970c:	f1bc 0f00 	cmp.w	ip, #0
 8009710:	db1e      	blt.n	8009750 <_strtol_l.constprop.0+0xc0>
 8009712:	45b1      	cmp	r9, r6
 8009714:	d31c      	bcc.n	8009750 <_strtol_l.constprop.0+0xc0>
 8009716:	d101      	bne.n	800971c <_strtol_l.constprop.0+0x8c>
 8009718:	45a2      	cmp	sl, r4
 800971a:	db19      	blt.n	8009750 <_strtol_l.constprop.0+0xc0>
 800971c:	fb06 4603 	mla	r6, r6, r3, r4
 8009720:	f04f 0c01 	mov.w	ip, #1
 8009724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009728:	e7e8      	b.n	80096fc <_strtol_l.constprop.0+0x6c>
 800972a:	2c2b      	cmp	r4, #43	; 0x2b
 800972c:	bf04      	itt	eq
 800972e:	782c      	ldrbeq	r4, [r5, #0]
 8009730:	1cb5      	addeq	r5, r6, #2
 8009732:	e7ca      	b.n	80096ca <_strtol_l.constprop.0+0x3a>
 8009734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009738:	f1be 0f19 	cmp.w	lr, #25
 800973c:	d801      	bhi.n	8009742 <_strtol_l.constprop.0+0xb2>
 800973e:	3c37      	subs	r4, #55	; 0x37
 8009740:	e7e2      	b.n	8009708 <_strtol_l.constprop.0+0x78>
 8009742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009746:	f1be 0f19 	cmp.w	lr, #25
 800974a:	d804      	bhi.n	8009756 <_strtol_l.constprop.0+0xc6>
 800974c:	3c57      	subs	r4, #87	; 0x57
 800974e:	e7db      	b.n	8009708 <_strtol_l.constprop.0+0x78>
 8009750:	f04f 3cff 	mov.w	ip, #4294967295
 8009754:	e7e6      	b.n	8009724 <_strtol_l.constprop.0+0x94>
 8009756:	f1bc 0f00 	cmp.w	ip, #0
 800975a:	da05      	bge.n	8009768 <_strtol_l.constprop.0+0xd8>
 800975c:	2322      	movs	r3, #34	; 0x22
 800975e:	6003      	str	r3, [r0, #0]
 8009760:	4646      	mov	r6, r8
 8009762:	b942      	cbnz	r2, 8009776 <_strtol_l.constprop.0+0xe6>
 8009764:	4630      	mov	r0, r6
 8009766:	e79e      	b.n	80096a6 <_strtol_l.constprop.0+0x16>
 8009768:	b107      	cbz	r7, 800976c <_strtol_l.constprop.0+0xdc>
 800976a:	4276      	negs	r6, r6
 800976c:	2a00      	cmp	r2, #0
 800976e:	d0f9      	beq.n	8009764 <_strtol_l.constprop.0+0xd4>
 8009770:	f1bc 0f00 	cmp.w	ip, #0
 8009774:	d000      	beq.n	8009778 <_strtol_l.constprop.0+0xe8>
 8009776:	1e69      	subs	r1, r5, #1
 8009778:	6011      	str	r1, [r2, #0]
 800977a:	e7f3      	b.n	8009764 <_strtol_l.constprop.0+0xd4>
 800977c:	2430      	movs	r4, #48	; 0x30
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1b1      	bne.n	80096e6 <_strtol_l.constprop.0+0x56>
 8009782:	2308      	movs	r3, #8
 8009784:	e7af      	b.n	80096e6 <_strtol_l.constprop.0+0x56>
 8009786:	2c30      	cmp	r4, #48	; 0x30
 8009788:	d0a5      	beq.n	80096d6 <_strtol_l.constprop.0+0x46>
 800978a:	230a      	movs	r3, #10
 800978c:	e7ab      	b.n	80096e6 <_strtol_l.constprop.0+0x56>
 800978e:	bf00      	nop
 8009790:	0800ceb1 	.word	0x0800ceb1

08009794 <_strtol_r>:
 8009794:	f7ff bf7c 	b.w	8009690 <_strtol_l.constprop.0>

08009798 <quorem>:
 8009798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	6903      	ldr	r3, [r0, #16]
 800979e:	690c      	ldr	r4, [r1, #16]
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	4607      	mov	r7, r0
 80097a4:	f2c0 8081 	blt.w	80098aa <quorem+0x112>
 80097a8:	3c01      	subs	r4, #1
 80097aa:	f101 0814 	add.w	r8, r1, #20
 80097ae:	f100 0514 	add.w	r5, r0, #20
 80097b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c0:	3301      	adds	r3, #1
 80097c2:	429a      	cmp	r2, r3
 80097c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80097d0:	d331      	bcc.n	8009836 <quorem+0x9e>
 80097d2:	f04f 0e00 	mov.w	lr, #0
 80097d6:	4640      	mov	r0, r8
 80097d8:	46ac      	mov	ip, r5
 80097da:	46f2      	mov	sl, lr
 80097dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80097e0:	b293      	uxth	r3, r2
 80097e2:	fb06 e303 	mla	r3, r6, r3, lr
 80097e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	ebaa 0303 	sub.w	r3, sl, r3
 80097f0:	f8dc a000 	ldr.w	sl, [ip]
 80097f4:	0c12      	lsrs	r2, r2, #16
 80097f6:	fa13 f38a 	uxtah	r3, r3, sl
 80097fa:	fb06 e202 	mla	r2, r6, r2, lr
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	9b00      	ldr	r3, [sp, #0]
 8009802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009806:	b292      	uxth	r2, r2
 8009808:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800980c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009810:	f8bd 3000 	ldrh.w	r3, [sp]
 8009814:	4581      	cmp	r9, r0
 8009816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800981a:	f84c 3b04 	str.w	r3, [ip], #4
 800981e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009822:	d2db      	bcs.n	80097dc <quorem+0x44>
 8009824:	f855 300b 	ldr.w	r3, [r5, fp]
 8009828:	b92b      	cbnz	r3, 8009836 <quorem+0x9e>
 800982a:	9b01      	ldr	r3, [sp, #4]
 800982c:	3b04      	subs	r3, #4
 800982e:	429d      	cmp	r5, r3
 8009830:	461a      	mov	r2, r3
 8009832:	d32e      	bcc.n	8009892 <quorem+0xfa>
 8009834:	613c      	str	r4, [r7, #16]
 8009836:	4638      	mov	r0, r7
 8009838:	f001 fd7a 	bl	800b330 <__mcmp>
 800983c:	2800      	cmp	r0, #0
 800983e:	db24      	blt.n	800988a <quorem+0xf2>
 8009840:	3601      	adds	r6, #1
 8009842:	4628      	mov	r0, r5
 8009844:	f04f 0c00 	mov.w	ip, #0
 8009848:	f858 2b04 	ldr.w	r2, [r8], #4
 800984c:	f8d0 e000 	ldr.w	lr, [r0]
 8009850:	b293      	uxth	r3, r2
 8009852:	ebac 0303 	sub.w	r3, ip, r3
 8009856:	0c12      	lsrs	r2, r2, #16
 8009858:	fa13 f38e 	uxtah	r3, r3, lr
 800985c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009864:	b29b      	uxth	r3, r3
 8009866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800986a:	45c1      	cmp	r9, r8
 800986c:	f840 3b04 	str.w	r3, [r0], #4
 8009870:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009874:	d2e8      	bcs.n	8009848 <quorem+0xb0>
 8009876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800987a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800987e:	b922      	cbnz	r2, 800988a <quorem+0xf2>
 8009880:	3b04      	subs	r3, #4
 8009882:	429d      	cmp	r5, r3
 8009884:	461a      	mov	r2, r3
 8009886:	d30a      	bcc.n	800989e <quorem+0x106>
 8009888:	613c      	str	r4, [r7, #16]
 800988a:	4630      	mov	r0, r6
 800988c:	b003      	add	sp, #12
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	3b04      	subs	r3, #4
 8009896:	2a00      	cmp	r2, #0
 8009898:	d1cc      	bne.n	8009834 <quorem+0x9c>
 800989a:	3c01      	subs	r4, #1
 800989c:	e7c7      	b.n	800982e <quorem+0x96>
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	3b04      	subs	r3, #4
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	d1f0      	bne.n	8009888 <quorem+0xf0>
 80098a6:	3c01      	subs	r4, #1
 80098a8:	e7eb      	b.n	8009882 <quorem+0xea>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e7ee      	b.n	800988c <quorem+0xf4>
	...

080098b0 <_dtoa_r>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	ed2d 8b04 	vpush	{d8-d9}
 80098b8:	ec57 6b10 	vmov	r6, r7, d0
 80098bc:	b093      	sub	sp, #76	; 0x4c
 80098be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098c4:	9106      	str	r1, [sp, #24]
 80098c6:	ee10 aa10 	vmov	sl, s0
 80098ca:	4604      	mov	r4, r0
 80098cc:	9209      	str	r2, [sp, #36]	; 0x24
 80098ce:	930c      	str	r3, [sp, #48]	; 0x30
 80098d0:	46bb      	mov	fp, r7
 80098d2:	b975      	cbnz	r5, 80098f2 <_dtoa_r+0x42>
 80098d4:	2010      	movs	r0, #16
 80098d6:	f001 fa45 	bl	800ad64 <malloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	6260      	str	r0, [r4, #36]	; 0x24
 80098de:	b920      	cbnz	r0, 80098ea <_dtoa_r+0x3a>
 80098e0:	4ba7      	ldr	r3, [pc, #668]	; (8009b80 <_dtoa_r+0x2d0>)
 80098e2:	21ea      	movs	r1, #234	; 0xea
 80098e4:	48a7      	ldr	r0, [pc, #668]	; (8009b84 <_dtoa_r+0x2d4>)
 80098e6:	f002 fc17 	bl	800c118 <__assert_func>
 80098ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098ee:	6005      	str	r5, [r0, #0]
 80098f0:	60c5      	str	r5, [r0, #12]
 80098f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f4:	6819      	ldr	r1, [r3, #0]
 80098f6:	b151      	cbz	r1, 800990e <_dtoa_r+0x5e>
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	604a      	str	r2, [r1, #4]
 80098fc:	2301      	movs	r3, #1
 80098fe:	4093      	lsls	r3, r2
 8009900:	608b      	str	r3, [r1, #8]
 8009902:	4620      	mov	r0, r4
 8009904:	f001 fa88 	bl	800ae18 <_Bfree>
 8009908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	1e3b      	subs	r3, r7, #0
 8009910:	bfaa      	itet	ge
 8009912:	2300      	movge	r3, #0
 8009914:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009918:	f8c8 3000 	strge.w	r3, [r8]
 800991c:	4b9a      	ldr	r3, [pc, #616]	; (8009b88 <_dtoa_r+0x2d8>)
 800991e:	bfbc      	itt	lt
 8009920:	2201      	movlt	r2, #1
 8009922:	f8c8 2000 	strlt.w	r2, [r8]
 8009926:	ea33 030b 	bics.w	r3, r3, fp
 800992a:	d11b      	bne.n	8009964 <_dtoa_r+0xb4>
 800992c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800992e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009938:	4333      	orrs	r3, r6
 800993a:	f000 8592 	beq.w	800a462 <_dtoa_r+0xbb2>
 800993e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009940:	b963      	cbnz	r3, 800995c <_dtoa_r+0xac>
 8009942:	4b92      	ldr	r3, [pc, #584]	; (8009b8c <_dtoa_r+0x2dc>)
 8009944:	e022      	b.n	800998c <_dtoa_r+0xdc>
 8009946:	4b92      	ldr	r3, [pc, #584]	; (8009b90 <_dtoa_r+0x2e0>)
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	3308      	adds	r3, #8
 800994c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	9801      	ldr	r0, [sp, #4]
 8009952:	b013      	add	sp, #76	; 0x4c
 8009954:	ecbd 8b04 	vpop	{d8-d9}
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	4b8b      	ldr	r3, [pc, #556]	; (8009b8c <_dtoa_r+0x2dc>)
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	3303      	adds	r3, #3
 8009962:	e7f3      	b.n	800994c <_dtoa_r+0x9c>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4650      	mov	r0, sl
 800996a:	4659      	mov	r1, fp
 800996c:	f7f7 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009970:	ec4b ab19 	vmov	d9, sl, fp
 8009974:	4680      	mov	r8, r0
 8009976:	b158      	cbz	r0, 8009990 <_dtoa_r+0xe0>
 8009978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800997a:	2301      	movs	r3, #1
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 856b 	beq.w	800a45c <_dtoa_r+0xbac>
 8009986:	4883      	ldr	r0, [pc, #524]	; (8009b94 <_dtoa_r+0x2e4>)
 8009988:	6018      	str	r0, [r3, #0]
 800998a:	1e43      	subs	r3, r0, #1
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	e7df      	b.n	8009950 <_dtoa_r+0xa0>
 8009990:	ec4b ab10 	vmov	d0, sl, fp
 8009994:	aa10      	add	r2, sp, #64	; 0x40
 8009996:	a911      	add	r1, sp, #68	; 0x44
 8009998:	4620      	mov	r0, r4
 800999a:	f001 fdeb 	bl	800b574 <__d2b>
 800999e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80099a2:	ee08 0a10 	vmov	s16, r0
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	f000 8084 	beq.w	8009ab4 <_dtoa_r+0x204>
 80099ac:	ee19 3a90 	vmov	r3, s19
 80099b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099b8:	4656      	mov	r6, sl
 80099ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80099c6:	4b74      	ldr	r3, [pc, #464]	; (8009b98 <_dtoa_r+0x2e8>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	a365      	add	r3, pc, #404	; (adr r3, 8009b68 <_dtoa_r+0x2b8>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	a364      	add	r3, pc, #400	; (adr r3, 8009b70 <_dtoa_r+0x2c0>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fc53 	bl	800028c <__adddf3>
 80099e6:	4606      	mov	r6, r0
 80099e8:	4628      	mov	r0, r5
 80099ea:	460f      	mov	r7, r1
 80099ec:	f7f6 fd9a 	bl	8000524 <__aeabi_i2d>
 80099f0:	a361      	add	r3, pc, #388	; (adr r3, 8009b78 <_dtoa_r+0x2c8>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fc43 	bl	800028c <__adddf3>
 8009a06:	4606      	mov	r6, r0
 8009a08:	460f      	mov	r7, r1
 8009a0a:	f7f7 f8a5 	bl	8000b58 <__aeabi_d2iz>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	9000      	str	r0, [sp, #0]
 8009a12:	2300      	movs	r3, #0
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f7 f860 	bl	8000adc <__aeabi_dcmplt>
 8009a1c:	b150      	cbz	r0, 8009a34 <_dtoa_r+0x184>
 8009a1e:	9800      	ldr	r0, [sp, #0]
 8009a20:	f7f6 fd80 	bl	8000524 <__aeabi_i2d>
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	f7f7 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2c:	b910      	cbnz	r0, 8009a34 <_dtoa_r+0x184>
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	2b16      	cmp	r3, #22
 8009a38:	d85a      	bhi.n	8009af0 <_dtoa_r+0x240>
 8009a3a:	9a00      	ldr	r2, [sp, #0]
 8009a3c:	4b57      	ldr	r3, [pc, #348]	; (8009b9c <_dtoa_r+0x2ec>)
 8009a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	ec51 0b19 	vmov	r0, r1, d9
 8009a4a:	f7f7 f847 	bl	8000adc <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d050      	beq.n	8009af4 <_dtoa_r+0x244>
 8009a52:	9b00      	ldr	r3, [sp, #0]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a5e:	1b5d      	subs	r5, r3, r5
 8009a60:	1e6b      	subs	r3, r5, #1
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	bf45      	ittet	mi
 8009a66:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a6a:	9304      	strmi	r3, [sp, #16]
 8009a6c:	2300      	movpl	r3, #0
 8009a6e:	2300      	movmi	r3, #0
 8009a70:	bf4c      	ite	mi
 8009a72:	9305      	strmi	r3, [sp, #20]
 8009a74:	9304      	strpl	r3, [sp, #16]
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db3d      	blt.n	8009af8 <_dtoa_r+0x248>
 8009a7c:	9b05      	ldr	r3, [sp, #20]
 8009a7e:	9a00      	ldr	r2, [sp, #0]
 8009a80:	920a      	str	r2, [sp, #40]	; 0x28
 8009a82:	4413      	add	r3, r2
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	2300      	movs	r3, #0
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	9b06      	ldr	r3, [sp, #24]
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	f200 8089 	bhi.w	8009ba4 <_dtoa_r+0x2f4>
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	bfc4      	itt	gt
 8009a96:	3b04      	subgt	r3, #4
 8009a98:	9306      	strgt	r3, [sp, #24]
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	f1a3 0302 	sub.w	r3, r3, #2
 8009aa0:	bfcc      	ite	gt
 8009aa2:	2500      	movgt	r5, #0
 8009aa4:	2501      	movle	r5, #1
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	f200 8087 	bhi.w	8009bba <_dtoa_r+0x30a>
 8009aac:	e8df f003 	tbb	[pc, r3]
 8009ab0:	59383a2d 	.word	0x59383a2d
 8009ab4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ab8:	441d      	add	r5, r3
 8009aba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	bfc1      	itttt	gt
 8009ac2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ac6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009aca:	fa0b f303 	lslgt.w	r3, fp, r3
 8009ace:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ad2:	bfda      	itte	le
 8009ad4:	f1c3 0320 	rsble	r3, r3, #32
 8009ad8:	fa06 f003 	lslle.w	r0, r6, r3
 8009adc:	4318      	orrgt	r0, r3
 8009ade:	f7f6 fd11 	bl	8000504 <__aeabi_ui2d>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009aea:	3d01      	subs	r5, #1
 8009aec:	930e      	str	r3, [sp, #56]	; 0x38
 8009aee:	e76a      	b.n	80099c6 <_dtoa_r+0x116>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e7b2      	b.n	8009a5a <_dtoa_r+0x1aa>
 8009af4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009af6:	e7b1      	b.n	8009a5c <_dtoa_r+0x1ac>
 8009af8:	9b04      	ldr	r3, [sp, #16]
 8009afa:	9a00      	ldr	r2, [sp, #0]
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	4253      	negs	r3, r2
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	; 0x28
 8009b08:	e7bf      	b.n	8009a8a <_dtoa_r+0x1da>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9308      	str	r3, [sp, #32]
 8009b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc55      	bgt.n	8009bc0 <_dtoa_r+0x310>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1e:	e00c      	b.n	8009b3a <_dtoa_r+0x28a>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e7f3      	b.n	8009b0c <_dtoa_r+0x25c>
 8009b24:	2300      	movs	r3, #0
 8009b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	9302      	str	r3, [sp, #8]
 8009b30:	3301      	adds	r3, #1
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	bfb8      	it	lt
 8009b38:	2301      	movlt	r3, #1
 8009b3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	6042      	str	r2, [r0, #4]
 8009b40:	2204      	movs	r2, #4
 8009b42:	f102 0614 	add.w	r6, r2, #20
 8009b46:	429e      	cmp	r6, r3
 8009b48:	6841      	ldr	r1, [r0, #4]
 8009b4a:	d93d      	bls.n	8009bc8 <_dtoa_r+0x318>
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f001 f923 	bl	800ad98 <_Balloc>
 8009b52:	9001      	str	r0, [sp, #4]
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d13b      	bne.n	8009bd0 <_dtoa_r+0x320>
 8009b58:	4b11      	ldr	r3, [pc, #68]	; (8009ba0 <_dtoa_r+0x2f0>)
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b60:	e6c0      	b.n	80098e4 <_dtoa_r+0x34>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e7df      	b.n	8009b26 <_dtoa_r+0x276>
 8009b66:	bf00      	nop
 8009b68:	636f4361 	.word	0x636f4361
 8009b6c:	3fd287a7 	.word	0x3fd287a7
 8009b70:	8b60c8b3 	.word	0x8b60c8b3
 8009b74:	3fc68a28 	.word	0x3fc68a28
 8009b78:	509f79fb 	.word	0x509f79fb
 8009b7c:	3fd34413 	.word	0x3fd34413
 8009b80:	0800cfbe 	.word	0x0800cfbe
 8009b84:	0800cfd5 	.word	0x0800cfd5
 8009b88:	7ff00000 	.word	0x7ff00000
 8009b8c:	0800cfba 	.word	0x0800cfba
 8009b90:	0800cfb1 	.word	0x0800cfb1
 8009b94:	0800ce31 	.word	0x0800ce31
 8009b98:	3ff80000 	.word	0x3ff80000
 8009b9c:	0800d1a8 	.word	0x0800d1a8
 8009ba0:	0800d030 	.word	0x0800d030
 8009ba4:	2501      	movs	r5, #1
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9306      	str	r3, [sp, #24]
 8009baa:	9508      	str	r5, [sp, #32]
 8009bac:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2312      	movs	r3, #18
 8009bb8:	e7b0      	b.n	8009b1c <_dtoa_r+0x26c>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9308      	str	r3, [sp, #32]
 8009bbe:	e7f5      	b.n	8009bac <_dtoa_r+0x2fc>
 8009bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bc6:	e7b8      	b.n	8009b3a <_dtoa_r+0x28a>
 8009bc8:	3101      	adds	r1, #1
 8009bca:	6041      	str	r1, [r0, #4]
 8009bcc:	0052      	lsls	r2, r2, #1
 8009bce:	e7b8      	b.n	8009b42 <_dtoa_r+0x292>
 8009bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd2:	9a01      	ldr	r2, [sp, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	2b0e      	cmp	r3, #14
 8009bda:	f200 809d 	bhi.w	8009d18 <_dtoa_r+0x468>
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	f000 809a 	beq.w	8009d18 <_dtoa_r+0x468>
 8009be4:	9b00      	ldr	r3, [sp, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dd32      	ble.n	8009c50 <_dtoa_r+0x3a0>
 8009bea:	4ab7      	ldr	r2, [pc, #732]	; (8009ec8 <_dtoa_r+0x618>)
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	05d8      	lsls	r0, r3, #23
 8009bfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c00:	d516      	bpl.n	8009c30 <_dtoa_r+0x380>
 8009c02:	4bb2      	ldr	r3, [pc, #712]	; (8009ecc <_dtoa_r+0x61c>)
 8009c04:	ec51 0b19 	vmov	r0, r1, d9
 8009c08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c0c:	f7f6 fe1e 	bl	800084c <__aeabi_ddiv>
 8009c10:	f007 070f 	and.w	r7, r7, #15
 8009c14:	4682      	mov	sl, r0
 8009c16:	468b      	mov	fp, r1
 8009c18:	2503      	movs	r5, #3
 8009c1a:	4eac      	ldr	r6, [pc, #688]	; (8009ecc <_dtoa_r+0x61c>)
 8009c1c:	b957      	cbnz	r7, 8009c34 <_dtoa_r+0x384>
 8009c1e:	4642      	mov	r2, r8
 8009c20:	464b      	mov	r3, r9
 8009c22:	4650      	mov	r0, sl
 8009c24:	4659      	mov	r1, fp
 8009c26:	f7f6 fe11 	bl	800084c <__aeabi_ddiv>
 8009c2a:	4682      	mov	sl, r0
 8009c2c:	468b      	mov	fp, r1
 8009c2e:	e028      	b.n	8009c82 <_dtoa_r+0x3d2>
 8009c30:	2502      	movs	r5, #2
 8009c32:	e7f2      	b.n	8009c1a <_dtoa_r+0x36a>
 8009c34:	07f9      	lsls	r1, r7, #31
 8009c36:	d508      	bpl.n	8009c4a <_dtoa_r+0x39a>
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c40:	f7f6 fcda 	bl	80005f8 <__aeabi_dmul>
 8009c44:	3501      	adds	r5, #1
 8009c46:	4680      	mov	r8, r0
 8009c48:	4689      	mov	r9, r1
 8009c4a:	107f      	asrs	r7, r7, #1
 8009c4c:	3608      	adds	r6, #8
 8009c4e:	e7e5      	b.n	8009c1c <_dtoa_r+0x36c>
 8009c50:	f000 809b 	beq.w	8009d8a <_dtoa_r+0x4da>
 8009c54:	9b00      	ldr	r3, [sp, #0]
 8009c56:	4f9d      	ldr	r7, [pc, #628]	; (8009ecc <_dtoa_r+0x61c>)
 8009c58:	425e      	negs	r6, r3
 8009c5a:	4b9b      	ldr	r3, [pc, #620]	; (8009ec8 <_dtoa_r+0x618>)
 8009c5c:	f006 020f 	and.w	r2, r6, #15
 8009c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	ec51 0b19 	vmov	r0, r1, d9
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	1136      	asrs	r6, r6, #4
 8009c72:	4682      	mov	sl, r0
 8009c74:	468b      	mov	fp, r1
 8009c76:	2300      	movs	r3, #0
 8009c78:	2502      	movs	r5, #2
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	d17a      	bne.n	8009d74 <_dtoa_r+0x4c4>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1d3      	bne.n	8009c2a <_dtoa_r+0x37a>
 8009c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8082 	beq.w	8009d8e <_dtoa_r+0x4de>
 8009c8a:	4b91      	ldr	r3, [pc, #580]	; (8009ed0 <_dtoa_r+0x620>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4659      	mov	r1, fp
 8009c92:	f7f6 ff23 	bl	8000adc <__aeabi_dcmplt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d079      	beq.n	8009d8e <_dtoa_r+0x4de>
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d076      	beq.n	8009d8e <_dtoa_r+0x4de>
 8009ca0:	9b02      	ldr	r3, [sp, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dd36      	ble.n	8009d14 <_dtoa_r+0x464>
 8009ca6:	9b00      	ldr	r3, [sp, #0]
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4659      	mov	r1, fp
 8009cac:	1e5f      	subs	r7, r3, #1
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4b88      	ldr	r3, [pc, #544]	; (8009ed4 <_dtoa_r+0x624>)
 8009cb2:	f7f6 fca1 	bl	80005f8 <__aeabi_dmul>
 8009cb6:	9e02      	ldr	r6, [sp, #8]
 8009cb8:	4682      	mov	sl, r0
 8009cba:	468b      	mov	fp, r1
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f7f6 fc30 	bl	8000524 <__aeabi_i2d>
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	465b      	mov	r3, fp
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	4b82      	ldr	r3, [pc, #520]	; (8009ed8 <_dtoa_r+0x628>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f7f6 fadc 	bl	800028c <__adddf3>
 8009cd4:	46d0      	mov	r8, sl
 8009cd6:	46d9      	mov	r9, fp
 8009cd8:	4682      	mov	sl, r0
 8009cda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	d158      	bne.n	8009d94 <_dtoa_r+0x4e4>
 8009ce2:	4b7e      	ldr	r3, [pc, #504]	; (8009edc <_dtoa_r+0x62c>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4649      	mov	r1, r9
 8009cea:	f7f6 facd 	bl	8000288 <__aeabi_dsub>
 8009cee:	4652      	mov	r2, sl
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	4689      	mov	r9, r1
 8009cf6:	f7f6 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f040 8295 	bne.w	800a22a <_dtoa_r+0x97a>
 8009d00:	4652      	mov	r2, sl
 8009d02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d06:	4640      	mov	r0, r8
 8009d08:	4649      	mov	r1, r9
 8009d0a:	f7f6 fee7 	bl	8000adc <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 8289 	bne.w	800a226 <_dtoa_r+0x976>
 8009d14:	ec5b ab19 	vmov	sl, fp, d9
 8009d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f2c0 8148 	blt.w	8009fb0 <_dtoa_r+0x700>
 8009d20:	9a00      	ldr	r2, [sp, #0]
 8009d22:	2a0e      	cmp	r2, #14
 8009d24:	f300 8144 	bgt.w	8009fb0 <_dtoa_r+0x700>
 8009d28:	4b67      	ldr	r3, [pc, #412]	; (8009ec8 <_dtoa_r+0x618>)
 8009d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f280 80d5 	bge.w	8009ee4 <_dtoa_r+0x634>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f300 80d1 	bgt.w	8009ee4 <_dtoa_r+0x634>
 8009d42:	f040 826f 	bne.w	800a224 <_dtoa_r+0x974>
 8009d46:	4b65      	ldr	r3, [pc, #404]	; (8009edc <_dtoa_r+0x62c>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fc53 	bl	80005f8 <__aeabi_dmul>
 8009d52:	4652      	mov	r2, sl
 8009d54:	465b      	mov	r3, fp
 8009d56:	f7f6 fed5 	bl	8000b04 <__aeabi_dcmpge>
 8009d5a:	9e03      	ldr	r6, [sp, #12]
 8009d5c:	4637      	mov	r7, r6
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f040 8245 	bne.w	800a1ee <_dtoa_r+0x93e>
 8009d64:	9d01      	ldr	r5, [sp, #4]
 8009d66:	2331      	movs	r3, #49	; 0x31
 8009d68:	f805 3b01 	strb.w	r3, [r5], #1
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	e240      	b.n	800a1f6 <_dtoa_r+0x946>
 8009d74:	07f2      	lsls	r2, r6, #31
 8009d76:	d505      	bpl.n	8009d84 <_dtoa_r+0x4d4>
 8009d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	3501      	adds	r5, #1
 8009d82:	2301      	movs	r3, #1
 8009d84:	1076      	asrs	r6, r6, #1
 8009d86:	3708      	adds	r7, #8
 8009d88:	e777      	b.n	8009c7a <_dtoa_r+0x3ca>
 8009d8a:	2502      	movs	r5, #2
 8009d8c:	e779      	b.n	8009c82 <_dtoa_r+0x3d2>
 8009d8e:	9f00      	ldr	r7, [sp, #0]
 8009d90:	9e03      	ldr	r6, [sp, #12]
 8009d92:	e794      	b.n	8009cbe <_dtoa_r+0x40e>
 8009d94:	9901      	ldr	r1, [sp, #4]
 8009d96:	4b4c      	ldr	r3, [pc, #304]	; (8009ec8 <_dtoa_r+0x618>)
 8009d98:	4431      	add	r1, r6
 8009d9a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d9c:	9908      	ldr	r1, [sp, #32]
 8009d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d043      	beq.n	8009e32 <_dtoa_r+0x582>
 8009daa:	494d      	ldr	r1, [pc, #308]	; (8009ee0 <_dtoa_r+0x630>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7f6 fd4d 	bl	800084c <__aeabi_ddiv>
 8009db2:	4652      	mov	r2, sl
 8009db4:	465b      	mov	r3, fp
 8009db6:	f7f6 fa67 	bl	8000288 <__aeabi_dsub>
 8009dba:	9d01      	ldr	r5, [sp, #4]
 8009dbc:	4682      	mov	sl, r0
 8009dbe:	468b      	mov	fp, r1
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	f7f6 fec8 	bl	8000b58 <__aeabi_d2iz>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	f7f6 fbab 	bl	8000524 <__aeabi_i2d>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa57 	bl	8000288 <__aeabi_dsub>
 8009dda:	3630      	adds	r6, #48	; 0x30
 8009ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8009de0:	4652      	mov	r2, sl
 8009de2:	465b      	mov	r3, fp
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	f7f6 fe78 	bl	8000adc <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d163      	bne.n	8009eb8 <_dtoa_r+0x608>
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	4936      	ldr	r1, [pc, #216]	; (8009ed0 <_dtoa_r+0x620>)
 8009df6:	2000      	movs	r0, #0
 8009df8:	f7f6 fa46 	bl	8000288 <__aeabi_dsub>
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	465b      	mov	r3, fp
 8009e00:	f7f6 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f040 80b5 	bne.w	8009f74 <_dtoa_r+0x6c4>
 8009e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e0c:	429d      	cmp	r5, r3
 8009e0e:	d081      	beq.n	8009d14 <_dtoa_r+0x464>
 8009e10:	4b30      	ldr	r3, [pc, #192]	; (8009ed4 <_dtoa_r+0x624>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	4650      	mov	r0, sl
 8009e16:	4659      	mov	r1, fp
 8009e18:	f7f6 fbee 	bl	80005f8 <__aeabi_dmul>
 8009e1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ed4 <_dtoa_r+0x624>)
 8009e1e:	4682      	mov	sl, r0
 8009e20:	468b      	mov	fp, r1
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	2200      	movs	r2, #0
 8009e28:	f7f6 fbe6 	bl	80005f8 <__aeabi_dmul>
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	4689      	mov	r9, r1
 8009e30:	e7c6      	b.n	8009dc0 <_dtoa_r+0x510>
 8009e32:	4650      	mov	r0, sl
 8009e34:	4659      	mov	r1, fp
 8009e36:	f7f6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8009e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e3c:	9d01      	ldr	r5, [sp, #4]
 8009e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	4649      	mov	r1, r9
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7f6 fe86 	bl	8000b58 <__aeabi_d2iz>
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	f7f6 fb69 	bl	8000524 <__aeabi_i2d>
 8009e52:	3630      	adds	r6, #48	; 0x30
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fa14 	bl	8000288 <__aeabi_dsub>
 8009e60:	f805 6b01 	strb.w	r6, [r5], #1
 8009e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e66:	429d      	cmp	r5, r3
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4689      	mov	r9, r1
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	d124      	bne.n	8009ebc <_dtoa_r+0x60c>
 8009e72:	4b1b      	ldr	r3, [pc, #108]	; (8009ee0 <_dtoa_r+0x630>)
 8009e74:	4650      	mov	r0, sl
 8009e76:	4659      	mov	r1, fp
 8009e78:	f7f6 fa08 	bl	800028c <__adddf3>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7f6 fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d173      	bne.n	8009f74 <_dtoa_r+0x6c4>
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	465b      	mov	r3, fp
 8009e90:	4913      	ldr	r1, [pc, #76]	; (8009ee0 <_dtoa_r+0x630>)
 8009e92:	2000      	movs	r0, #0
 8009e94:	f7f6 f9f8 	bl	8000288 <__aeabi_dsub>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f af35 	beq.w	8009d14 <_dtoa_r+0x464>
 8009eaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009eac:	1e6b      	subs	r3, r5, #1
 8009eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009eb4:	2b30      	cmp	r3, #48	; 0x30
 8009eb6:	d0f8      	beq.n	8009eaa <_dtoa_r+0x5fa>
 8009eb8:	9700      	str	r7, [sp, #0]
 8009eba:	e049      	b.n	8009f50 <_dtoa_r+0x6a0>
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <_dtoa_r+0x624>)
 8009ebe:	f7f6 fb9b 	bl	80005f8 <__aeabi_dmul>
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	4689      	mov	r9, r1
 8009ec6:	e7bd      	b.n	8009e44 <_dtoa_r+0x594>
 8009ec8:	0800d1a8 	.word	0x0800d1a8
 8009ecc:	0800d180 	.word	0x0800d180
 8009ed0:	3ff00000 	.word	0x3ff00000
 8009ed4:	40240000 	.word	0x40240000
 8009ed8:	401c0000 	.word	0x401c0000
 8009edc:	40140000 	.word	0x40140000
 8009ee0:	3fe00000 	.word	0x3fe00000
 8009ee4:	9d01      	ldr	r5, [sp, #4]
 8009ee6:	4656      	mov	r6, sl
 8009ee8:	465f      	mov	r7, fp
 8009eea:	4642      	mov	r2, r8
 8009eec:	464b      	mov	r3, r9
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fcab 	bl	800084c <__aeabi_ddiv>
 8009ef6:	f7f6 fe2f 	bl	8000b58 <__aeabi_d2iz>
 8009efa:	4682      	mov	sl, r0
 8009efc:	f7f6 fb12 	bl	8000524 <__aeabi_i2d>
 8009f00:	4642      	mov	r2, r8
 8009f02:	464b      	mov	r3, r9
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f14:	f7f6 f9b8 	bl	8000288 <__aeabi_dsub>
 8009f18:	f805 6b01 	strb.w	r6, [r5], #1
 8009f1c:	9e01      	ldr	r6, [sp, #4]
 8009f1e:	9f03      	ldr	r7, [sp, #12]
 8009f20:	1bae      	subs	r6, r5, r6
 8009f22:	42b7      	cmp	r7, r6
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	d135      	bne.n	8009f96 <_dtoa_r+0x6e6>
 8009f2a:	f7f6 f9af 	bl	800028c <__adddf3>
 8009f2e:	4642      	mov	r2, r8
 8009f30:	464b      	mov	r3, r9
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	f7f6 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 8009f3a:	b9d0      	cbnz	r0, 8009f72 <_dtoa_r+0x6c2>
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f48:	b110      	cbz	r0, 8009f50 <_dtoa_r+0x6a0>
 8009f4a:	f01a 0f01 	tst.w	sl, #1
 8009f4e:	d110      	bne.n	8009f72 <_dtoa_r+0x6c2>
 8009f50:	4620      	mov	r0, r4
 8009f52:	ee18 1a10 	vmov	r1, s16
 8009f56:	f000 ff5f 	bl	800ae18 <_Bfree>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9800      	ldr	r0, [sp, #0]
 8009f5e:	702b      	strb	r3, [r5, #0]
 8009f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f62:	3001      	adds	r0, #1
 8009f64:	6018      	str	r0, [r3, #0]
 8009f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f43f acf1 	beq.w	8009950 <_dtoa_r+0xa0>
 8009f6e:	601d      	str	r5, [r3, #0]
 8009f70:	e4ee      	b.n	8009950 <_dtoa_r+0xa0>
 8009f72:	9f00      	ldr	r7, [sp, #0]
 8009f74:	462b      	mov	r3, r5
 8009f76:	461d      	mov	r5, r3
 8009f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7c:	2a39      	cmp	r2, #57	; 0x39
 8009f7e:	d106      	bne.n	8009f8e <_dtoa_r+0x6de>
 8009f80:	9a01      	ldr	r2, [sp, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d1f7      	bne.n	8009f76 <_dtoa_r+0x6c6>
 8009f86:	9901      	ldr	r1, [sp, #4]
 8009f88:	2230      	movs	r2, #48	; 0x30
 8009f8a:	3701      	adds	r7, #1
 8009f8c:	700a      	strb	r2, [r1, #0]
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	3201      	adds	r2, #1
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	e790      	b.n	8009eb8 <_dtoa_r+0x608>
 8009f96:	4ba6      	ldr	r3, [pc, #664]	; (800a230 <_dtoa_r+0x980>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460f      	mov	r7, r1
 8009fa6:	f7f6 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d09d      	beq.n	8009eea <_dtoa_r+0x63a>
 8009fae:	e7cf      	b.n	8009f50 <_dtoa_r+0x6a0>
 8009fb0:	9a08      	ldr	r2, [sp, #32]
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	f000 80d7 	beq.w	800a166 <_dtoa_r+0x8b6>
 8009fb8:	9a06      	ldr	r2, [sp, #24]
 8009fba:	2a01      	cmp	r2, #1
 8009fbc:	f300 80ba 	bgt.w	800a134 <_dtoa_r+0x884>
 8009fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	f000 80b2 	beq.w	800a12c <_dtoa_r+0x87c>
 8009fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fcc:	9e07      	ldr	r6, [sp, #28]
 8009fce:	9d04      	ldr	r5, [sp, #16]
 8009fd0:	9a04      	ldr	r2, [sp, #16]
 8009fd2:	441a      	add	r2, r3
 8009fd4:	9204      	str	r2, [sp, #16]
 8009fd6:	9a05      	ldr	r2, [sp, #20]
 8009fd8:	2101      	movs	r1, #1
 8009fda:	441a      	add	r2, r3
 8009fdc:	4620      	mov	r0, r4
 8009fde:	9205      	str	r2, [sp, #20]
 8009fe0:	f001 f81c 	bl	800b01c <__i2b>
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	dd0c      	ble.n	800a004 <_dtoa_r+0x754>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd09      	ble.n	800a004 <_dtoa_r+0x754>
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	bfa8      	it	ge
 8009ff6:	462b      	movge	r3, r5
 8009ff8:	1ad2      	subs	r2, r2, r3
 8009ffa:	9204      	str	r2, [sp, #16]
 8009ffc:	9a05      	ldr	r2, [sp, #20]
 8009ffe:	1aed      	subs	r5, r5, r3
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	9b07      	ldr	r3, [sp, #28]
 800a006:	b31b      	cbz	r3, 800a050 <_dtoa_r+0x7a0>
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80af 	beq.w	800a16e <_dtoa_r+0x8be>
 800a010:	2e00      	cmp	r6, #0
 800a012:	dd13      	ble.n	800a03c <_dtoa_r+0x78c>
 800a014:	4639      	mov	r1, r7
 800a016:	4632      	mov	r2, r6
 800a018:	4620      	mov	r0, r4
 800a01a:	f001 f8bf 	bl	800b19c <__pow5mult>
 800a01e:	ee18 2a10 	vmov	r2, s16
 800a022:	4601      	mov	r1, r0
 800a024:	4607      	mov	r7, r0
 800a026:	4620      	mov	r0, r4
 800a028:	f001 f80e 	bl	800b048 <__multiply>
 800a02c:	ee18 1a10 	vmov	r1, s16
 800a030:	4680      	mov	r8, r0
 800a032:	4620      	mov	r0, r4
 800a034:	f000 fef0 	bl	800ae18 <_Bfree>
 800a038:	ee08 8a10 	vmov	s16, r8
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	1b9a      	subs	r2, r3, r6
 800a040:	d006      	beq.n	800a050 <_dtoa_r+0x7a0>
 800a042:	ee18 1a10 	vmov	r1, s16
 800a046:	4620      	mov	r0, r4
 800a048:	f001 f8a8 	bl	800b19c <__pow5mult>
 800a04c:	ee08 0a10 	vmov	s16, r0
 800a050:	2101      	movs	r1, #1
 800a052:	4620      	mov	r0, r4
 800a054:	f000 ffe2 	bl	800b01c <__i2b>
 800a058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	4606      	mov	r6, r0
 800a05e:	f340 8088 	ble.w	800a172 <_dtoa_r+0x8c2>
 800a062:	461a      	mov	r2, r3
 800a064:	4601      	mov	r1, r0
 800a066:	4620      	mov	r0, r4
 800a068:	f001 f898 	bl	800b19c <__pow5mult>
 800a06c:	9b06      	ldr	r3, [sp, #24]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	4606      	mov	r6, r0
 800a072:	f340 8081 	ble.w	800a178 <_dtoa_r+0x8c8>
 800a076:	f04f 0800 	mov.w	r8, #0
 800a07a:	6933      	ldr	r3, [r6, #16]
 800a07c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a080:	6918      	ldr	r0, [r3, #16]
 800a082:	f000 ff7b 	bl	800af7c <__hi0bits>
 800a086:	f1c0 0020 	rsb	r0, r0, #32
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	4418      	add	r0, r3
 800a08e:	f010 001f 	ands.w	r0, r0, #31
 800a092:	f000 8092 	beq.w	800a1ba <_dtoa_r+0x90a>
 800a096:	f1c0 0320 	rsb	r3, r0, #32
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	f340 808a 	ble.w	800a1b4 <_dtoa_r+0x904>
 800a0a0:	f1c0 001c 	rsb	r0, r0, #28
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	4403      	add	r3, r0
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	4403      	add	r3, r0
 800a0ae:	4405      	add	r5, r0
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd07      	ble.n	800a0c8 <_dtoa_r+0x818>
 800a0b8:	ee18 1a10 	vmov	r1, s16
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f001 f8c6 	bl	800b250 <__lshift>
 800a0c4:	ee08 0a10 	vmov	s16, r0
 800a0c8:	9b05      	ldr	r3, [sp, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	dd05      	ble.n	800a0da <_dtoa_r+0x82a>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 f8bc 	bl	800b250 <__lshift>
 800a0d8:	4606      	mov	r6, r0
 800a0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d06e      	beq.n	800a1be <_dtoa_r+0x90e>
 800a0e0:	ee18 0a10 	vmov	r0, s16
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	f001 f923 	bl	800b330 <__mcmp>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	da67      	bge.n	800a1be <_dtoa_r+0x90e>
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	ee18 1a10 	vmov	r1, s16
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fead 	bl	800ae5c <__multadd>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	ee08 0a10 	vmov	s16, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 81b1 	beq.w	800a470 <_dtoa_r+0xbc0>
 800a10e:	2300      	movs	r3, #0
 800a110:	4639      	mov	r1, r7
 800a112:	220a      	movs	r2, #10
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fea1 	bl	800ae5c <__multadd>
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	4607      	mov	r7, r0
 800a120:	f300 808e 	bgt.w	800a240 <_dtoa_r+0x990>
 800a124:	9b06      	ldr	r3, [sp, #24]
 800a126:	2b02      	cmp	r3, #2
 800a128:	dc51      	bgt.n	800a1ce <_dtoa_r+0x91e>
 800a12a:	e089      	b.n	800a240 <_dtoa_r+0x990>
 800a12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a12e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a132:	e74b      	b.n	8009fcc <_dtoa_r+0x71c>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	1e5e      	subs	r6, r3, #1
 800a138:	9b07      	ldr	r3, [sp, #28]
 800a13a:	42b3      	cmp	r3, r6
 800a13c:	bfbf      	itttt	lt
 800a13e:	9b07      	ldrlt	r3, [sp, #28]
 800a140:	9607      	strlt	r6, [sp, #28]
 800a142:	1af2      	sublt	r2, r6, r3
 800a144:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a146:	bfb6      	itet	lt
 800a148:	189b      	addlt	r3, r3, r2
 800a14a:	1b9e      	subge	r6, r3, r6
 800a14c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	bfb8      	it	lt
 800a152:	2600      	movlt	r6, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfb7      	itett	lt
 800a158:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a15c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a160:	1a9d      	sublt	r5, r3, r2
 800a162:	2300      	movlt	r3, #0
 800a164:	e734      	b.n	8009fd0 <_dtoa_r+0x720>
 800a166:	9e07      	ldr	r6, [sp, #28]
 800a168:	9d04      	ldr	r5, [sp, #16]
 800a16a:	9f08      	ldr	r7, [sp, #32]
 800a16c:	e73b      	b.n	8009fe6 <_dtoa_r+0x736>
 800a16e:	9a07      	ldr	r2, [sp, #28]
 800a170:	e767      	b.n	800a042 <_dtoa_r+0x792>
 800a172:	9b06      	ldr	r3, [sp, #24]
 800a174:	2b01      	cmp	r3, #1
 800a176:	dc18      	bgt.n	800a1aa <_dtoa_r+0x8fa>
 800a178:	f1ba 0f00 	cmp.w	sl, #0
 800a17c:	d115      	bne.n	800a1aa <_dtoa_r+0x8fa>
 800a17e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a182:	b993      	cbnz	r3, 800a1aa <_dtoa_r+0x8fa>
 800a184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a188:	0d1b      	lsrs	r3, r3, #20
 800a18a:	051b      	lsls	r3, r3, #20
 800a18c:	b183      	cbz	r3, 800a1b0 <_dtoa_r+0x900>
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	3301      	adds	r3, #1
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	3301      	adds	r3, #1
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	f04f 0801 	mov.w	r8, #1
 800a19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f47f af6a 	bne.w	800a07a <_dtoa_r+0x7ca>
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	e76f      	b.n	800a08a <_dtoa_r+0x7da>
 800a1aa:	f04f 0800 	mov.w	r8, #0
 800a1ae:	e7f6      	b.n	800a19e <_dtoa_r+0x8ee>
 800a1b0:	4698      	mov	r8, r3
 800a1b2:	e7f4      	b.n	800a19e <_dtoa_r+0x8ee>
 800a1b4:	f43f af7d 	beq.w	800a0b2 <_dtoa_r+0x802>
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	301c      	adds	r0, #28
 800a1bc:	e772      	b.n	800a0a4 <_dtoa_r+0x7f4>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dc37      	bgt.n	800a234 <_dtoa_r+0x984>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	dd34      	ble.n	800a234 <_dtoa_r+0x984>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	9302      	str	r3, [sp, #8]
 800a1ce:	9b02      	ldr	r3, [sp, #8]
 800a1d0:	b96b      	cbnz	r3, 800a1ee <_dtoa_r+0x93e>
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 fe40 	bl	800ae5c <__multadd>
 800a1dc:	4601      	mov	r1, r0
 800a1de:	4606      	mov	r6, r0
 800a1e0:	ee18 0a10 	vmov	r0, s16
 800a1e4:	f001 f8a4 	bl	800b330 <__mcmp>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f73f adbb 	bgt.w	8009d64 <_dtoa_r+0x4b4>
 800a1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f0:	9d01      	ldr	r5, [sp, #4]
 800a1f2:	43db      	mvns	r3, r3
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fe0b 	bl	800ae18 <_Bfree>
 800a202:	2f00      	cmp	r7, #0
 800a204:	f43f aea4 	beq.w	8009f50 <_dtoa_r+0x6a0>
 800a208:	f1b8 0f00 	cmp.w	r8, #0
 800a20c:	d005      	beq.n	800a21a <_dtoa_r+0x96a>
 800a20e:	45b8      	cmp	r8, r7
 800a210:	d003      	beq.n	800a21a <_dtoa_r+0x96a>
 800a212:	4641      	mov	r1, r8
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fdff 	bl	800ae18 <_Bfree>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 fdfb 	bl	800ae18 <_Bfree>
 800a222:	e695      	b.n	8009f50 <_dtoa_r+0x6a0>
 800a224:	2600      	movs	r6, #0
 800a226:	4637      	mov	r7, r6
 800a228:	e7e1      	b.n	800a1ee <_dtoa_r+0x93e>
 800a22a:	9700      	str	r7, [sp, #0]
 800a22c:	4637      	mov	r7, r6
 800a22e:	e599      	b.n	8009d64 <_dtoa_r+0x4b4>
 800a230:	40240000 	.word	0x40240000
 800a234:	9b08      	ldr	r3, [sp, #32]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 80ca 	beq.w	800a3d0 <_dtoa_r+0xb20>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	2d00      	cmp	r5, #0
 800a242:	dd05      	ble.n	800a250 <_dtoa_r+0x9a0>
 800a244:	4639      	mov	r1, r7
 800a246:	462a      	mov	r2, r5
 800a248:	4620      	mov	r0, r4
 800a24a:	f001 f801 	bl	800b250 <__lshift>
 800a24e:	4607      	mov	r7, r0
 800a250:	f1b8 0f00 	cmp.w	r8, #0
 800a254:	d05b      	beq.n	800a30e <_dtoa_r+0xa5e>
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4620      	mov	r0, r4
 800a25a:	f000 fd9d 	bl	800ad98 <_Balloc>
 800a25e:	4605      	mov	r5, r0
 800a260:	b928      	cbnz	r0, 800a26e <_dtoa_r+0x9be>
 800a262:	4b87      	ldr	r3, [pc, #540]	; (800a480 <_dtoa_r+0xbd0>)
 800a264:	4602      	mov	r2, r0
 800a266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a26a:	f7ff bb3b 	b.w	80098e4 <_dtoa_r+0x34>
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	3202      	adds	r2, #2
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	f107 010c 	add.w	r1, r7, #12
 800a278:	300c      	adds	r0, #12
 800a27a:	f7fd fd13 	bl	8007ca4 <memcpy>
 800a27e:	2201      	movs	r2, #1
 800a280:	4629      	mov	r1, r5
 800a282:	4620      	mov	r0, r4
 800a284:	f000 ffe4 	bl	800b250 <__lshift>
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	f103 0901 	add.w	r9, r3, #1
 800a28e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a292:	4413      	add	r3, r2
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	f00a 0301 	and.w	r3, sl, #1
 800a29a:	46b8      	mov	r8, r7
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	4607      	mov	r7, r0
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	ee18 0a10 	vmov	r0, s16
 800a2a6:	f7ff fa77 	bl	8009798 <quorem>
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	9002      	str	r0, [sp, #8]
 800a2ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2b2:	ee18 0a10 	vmov	r0, s16
 800a2b6:	f001 f83b 	bl	800b330 <__mcmp>
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	9003      	str	r0, [sp, #12]
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f001 f851 	bl	800b368 <__mdiff>
 800a2c6:	68c2      	ldr	r2, [r0, #12]
 800a2c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	bb02      	cbnz	r2, 800a312 <_dtoa_r+0xa62>
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	ee18 0a10 	vmov	r0, s16
 800a2d6:	f001 f82b 	bl	800b330 <__mcmp>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4620      	mov	r0, r4
 800a2e0:	9207      	str	r2, [sp, #28]
 800a2e2:	f000 fd99 	bl	800ae18 <_Bfree>
 800a2e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a2ea:	ea43 0102 	orr.w	r1, r3, r2
 800a2ee:	9b04      	ldr	r3, [sp, #16]
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	464d      	mov	r5, r9
 800a2f4:	d10f      	bne.n	800a316 <_dtoa_r+0xa66>
 800a2f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2fa:	d02a      	beq.n	800a352 <_dtoa_r+0xaa2>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dd02      	ble.n	800a308 <_dtoa_r+0xa58>
 800a302:	9b02      	ldr	r3, [sp, #8]
 800a304:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a308:	f88b a000 	strb.w	sl, [fp]
 800a30c:	e775      	b.n	800a1fa <_dtoa_r+0x94a>
 800a30e:	4638      	mov	r0, r7
 800a310:	e7ba      	b.n	800a288 <_dtoa_r+0x9d8>
 800a312:	2201      	movs	r2, #1
 800a314:	e7e2      	b.n	800a2dc <_dtoa_r+0xa2c>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	db04      	blt.n	800a326 <_dtoa_r+0xa76>
 800a31c:	9906      	ldr	r1, [sp, #24]
 800a31e:	430b      	orrs	r3, r1
 800a320:	9904      	ldr	r1, [sp, #16]
 800a322:	430b      	orrs	r3, r1
 800a324:	d122      	bne.n	800a36c <_dtoa_r+0xabc>
 800a326:	2a00      	cmp	r2, #0
 800a328:	ddee      	ble.n	800a308 <_dtoa_r+0xa58>
 800a32a:	ee18 1a10 	vmov	r1, s16
 800a32e:	2201      	movs	r2, #1
 800a330:	4620      	mov	r0, r4
 800a332:	f000 ff8d 	bl	800b250 <__lshift>
 800a336:	4631      	mov	r1, r6
 800a338:	ee08 0a10 	vmov	s16, r0
 800a33c:	f000 fff8 	bl	800b330 <__mcmp>
 800a340:	2800      	cmp	r0, #0
 800a342:	dc03      	bgt.n	800a34c <_dtoa_r+0xa9c>
 800a344:	d1e0      	bne.n	800a308 <_dtoa_r+0xa58>
 800a346:	f01a 0f01 	tst.w	sl, #1
 800a34a:	d0dd      	beq.n	800a308 <_dtoa_r+0xa58>
 800a34c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a350:	d1d7      	bne.n	800a302 <_dtoa_r+0xa52>
 800a352:	2339      	movs	r3, #57	; 0x39
 800a354:	f88b 3000 	strb.w	r3, [fp]
 800a358:	462b      	mov	r3, r5
 800a35a:	461d      	mov	r5, r3
 800a35c:	3b01      	subs	r3, #1
 800a35e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a362:	2a39      	cmp	r2, #57	; 0x39
 800a364:	d071      	beq.n	800a44a <_dtoa_r+0xb9a>
 800a366:	3201      	adds	r2, #1
 800a368:	701a      	strb	r2, [r3, #0]
 800a36a:	e746      	b.n	800a1fa <_dtoa_r+0x94a>
 800a36c:	2a00      	cmp	r2, #0
 800a36e:	dd07      	ble.n	800a380 <_dtoa_r+0xad0>
 800a370:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a374:	d0ed      	beq.n	800a352 <_dtoa_r+0xaa2>
 800a376:	f10a 0301 	add.w	r3, sl, #1
 800a37a:	f88b 3000 	strb.w	r3, [fp]
 800a37e:	e73c      	b.n	800a1fa <_dtoa_r+0x94a>
 800a380:	9b05      	ldr	r3, [sp, #20]
 800a382:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a386:	4599      	cmp	r9, r3
 800a388:	d047      	beq.n	800a41a <_dtoa_r+0xb6a>
 800a38a:	ee18 1a10 	vmov	r1, s16
 800a38e:	2300      	movs	r3, #0
 800a390:	220a      	movs	r2, #10
 800a392:	4620      	mov	r0, r4
 800a394:	f000 fd62 	bl	800ae5c <__multadd>
 800a398:	45b8      	cmp	r8, r7
 800a39a:	ee08 0a10 	vmov	s16, r0
 800a39e:	f04f 0300 	mov.w	r3, #0
 800a3a2:	f04f 020a 	mov.w	r2, #10
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	d106      	bne.n	800a3ba <_dtoa_r+0xb0a>
 800a3ac:	f000 fd56 	bl	800ae5c <__multadd>
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	f109 0901 	add.w	r9, r9, #1
 800a3b8:	e772      	b.n	800a2a0 <_dtoa_r+0x9f0>
 800a3ba:	f000 fd4f 	bl	800ae5c <__multadd>
 800a3be:	4639      	mov	r1, r7
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	220a      	movs	r2, #10
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 fd48 	bl	800ae5c <__multadd>
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	e7f1      	b.n	800a3b4 <_dtoa_r+0xb04>
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	9302      	str	r3, [sp, #8]
 800a3d4:	9d01      	ldr	r5, [sp, #4]
 800a3d6:	ee18 0a10 	vmov	r0, s16
 800a3da:	4631      	mov	r1, r6
 800a3dc:	f7ff f9dc 	bl	8009798 <quorem>
 800a3e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3e4:	9b01      	ldr	r3, [sp, #4]
 800a3e6:	f805 ab01 	strb.w	sl, [r5], #1
 800a3ea:	1aea      	subs	r2, r5, r3
 800a3ec:	9b02      	ldr	r3, [sp, #8]
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	dd09      	ble.n	800a406 <_dtoa_r+0xb56>
 800a3f2:	ee18 1a10 	vmov	r1, s16
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	220a      	movs	r2, #10
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fd2e 	bl	800ae5c <__multadd>
 800a400:	ee08 0a10 	vmov	s16, r0
 800a404:	e7e7      	b.n	800a3d6 <_dtoa_r+0xb26>
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bfc8      	it	gt
 800a40c:	461d      	movgt	r5, r3
 800a40e:	9b01      	ldr	r3, [sp, #4]
 800a410:	bfd8      	it	le
 800a412:	2501      	movle	r5, #1
 800a414:	441d      	add	r5, r3
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	ee18 1a10 	vmov	r1, s16
 800a41e:	2201      	movs	r2, #1
 800a420:	4620      	mov	r0, r4
 800a422:	f000 ff15 	bl	800b250 <__lshift>
 800a426:	4631      	mov	r1, r6
 800a428:	ee08 0a10 	vmov	s16, r0
 800a42c:	f000 ff80 	bl	800b330 <__mcmp>
 800a430:	2800      	cmp	r0, #0
 800a432:	dc91      	bgt.n	800a358 <_dtoa_r+0xaa8>
 800a434:	d102      	bne.n	800a43c <_dtoa_r+0xb8c>
 800a436:	f01a 0f01 	tst.w	sl, #1
 800a43a:	d18d      	bne.n	800a358 <_dtoa_r+0xaa8>
 800a43c:	462b      	mov	r3, r5
 800a43e:	461d      	mov	r5, r3
 800a440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a444:	2a30      	cmp	r2, #48	; 0x30
 800a446:	d0fa      	beq.n	800a43e <_dtoa_r+0xb8e>
 800a448:	e6d7      	b.n	800a1fa <_dtoa_r+0x94a>
 800a44a:	9a01      	ldr	r2, [sp, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d184      	bne.n	800a35a <_dtoa_r+0xaaa>
 800a450:	9b00      	ldr	r3, [sp, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	2331      	movs	r3, #49	; 0x31
 800a458:	7013      	strb	r3, [r2, #0]
 800a45a:	e6ce      	b.n	800a1fa <_dtoa_r+0x94a>
 800a45c:	4b09      	ldr	r3, [pc, #36]	; (800a484 <_dtoa_r+0xbd4>)
 800a45e:	f7ff ba95 	b.w	800998c <_dtoa_r+0xdc>
 800a462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a464:	2b00      	cmp	r3, #0
 800a466:	f47f aa6e 	bne.w	8009946 <_dtoa_r+0x96>
 800a46a:	4b07      	ldr	r3, [pc, #28]	; (800a488 <_dtoa_r+0xbd8>)
 800a46c:	f7ff ba8e 	b.w	800998c <_dtoa_r+0xdc>
 800a470:	9b02      	ldr	r3, [sp, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	dcae      	bgt.n	800a3d4 <_dtoa_r+0xb24>
 800a476:	9b06      	ldr	r3, [sp, #24]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	f73f aea8 	bgt.w	800a1ce <_dtoa_r+0x91e>
 800a47e:	e7a9      	b.n	800a3d4 <_dtoa_r+0xb24>
 800a480:	0800d030 	.word	0x0800d030
 800a484:	0800ce30 	.word	0x0800ce30
 800a488:	0800cfb1 	.word	0x0800cfb1

0800a48c <std>:
 800a48c:	2300      	movs	r3, #0
 800a48e:	b510      	push	{r4, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	e9c0 3300 	strd	r3, r3, [r0]
 800a496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a49a:	6083      	str	r3, [r0, #8]
 800a49c:	8181      	strh	r1, [r0, #12]
 800a49e:	6643      	str	r3, [r0, #100]	; 0x64
 800a4a0:	81c2      	strh	r2, [r0, #14]
 800a4a2:	6183      	str	r3, [r0, #24]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	2208      	movs	r2, #8
 800a4a8:	305c      	adds	r0, #92	; 0x5c
 800a4aa:	f7fd fc09 	bl	8007cc0 <memset>
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <std+0x38>)
 800a4b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a4b2:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <std+0x3c>)
 800a4b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <std+0x40>)
 800a4b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <std+0x44>)
 800a4bc:	6224      	str	r4, [r4, #32]
 800a4be:	6323      	str	r3, [r4, #48]	; 0x30
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800bea9 	.word	0x0800bea9
 800a4c8:	0800becb 	.word	0x0800becb
 800a4cc:	0800bf03 	.word	0x0800bf03
 800a4d0:	0800bf27 	.word	0x0800bf27

0800a4d4 <_cleanup_r>:
 800a4d4:	4901      	ldr	r1, [pc, #4]	; (800a4dc <_cleanup_r+0x8>)
 800a4d6:	f000 b8af 	b.w	800a638 <_fwalk_reent>
 800a4da:	bf00      	nop
 800a4dc:	0800c281 	.word	0x0800c281

0800a4e0 <__sfmoreglue>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	2268      	movs	r2, #104	; 0x68
 800a4e4:	1e4d      	subs	r5, r1, #1
 800a4e6:	4355      	muls	r5, r2
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4ee:	f001 f997 	bl	800b820 <_malloc_r>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	b140      	cbz	r0, 800a508 <__sfmoreglue+0x28>
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	60a0      	str	r0, [r4, #8]
 800a500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a504:	f7fd fbdc 	bl	8007cc0 <memset>
 800a508:	4620      	mov	r0, r4
 800a50a:	bd70      	pop	{r4, r5, r6, pc}

0800a50c <__sfp_lock_acquire>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_acquire+0x8>)
 800a50e:	f000 bc26 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	2001320d 	.word	0x2001320d

0800a518 <__sfp_lock_release>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sfp_lock_release+0x8>)
 800a51a:	f000 bc21 	b.w	800ad60 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	2001320d 	.word	0x2001320d

0800a524 <__sinit_lock_acquire>:
 800a524:	4801      	ldr	r0, [pc, #4]	; (800a52c <__sinit_lock_acquire+0x8>)
 800a526:	f000 bc1a 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800a52a:	bf00      	nop
 800a52c:	2001320e 	.word	0x2001320e

0800a530 <__sinit_lock_release>:
 800a530:	4801      	ldr	r0, [pc, #4]	; (800a538 <__sinit_lock_release+0x8>)
 800a532:	f000 bc15 	b.w	800ad60 <__retarget_lock_release_recursive>
 800a536:	bf00      	nop
 800a538:	2001320e 	.word	0x2001320e

0800a53c <__sinit>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	f7ff fff0 	bl	800a524 <__sinit_lock_acquire>
 800a544:	69a3      	ldr	r3, [r4, #24]
 800a546:	b11b      	cbz	r3, 800a550 <__sinit+0x14>
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f7ff bff0 	b.w	800a530 <__sinit_lock_release>
 800a550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a554:	6523      	str	r3, [r4, #80]	; 0x50
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <__sinit+0x68>)
 800a558:	4a13      	ldr	r2, [pc, #76]	; (800a5a8 <__sinit+0x6c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a55e:	42a3      	cmp	r3, r4
 800a560:	bf04      	itt	eq
 800a562:	2301      	moveq	r3, #1
 800a564:	61a3      	streq	r3, [r4, #24]
 800a566:	4620      	mov	r0, r4
 800a568:	f000 f820 	bl	800a5ac <__sfp>
 800a56c:	6060      	str	r0, [r4, #4]
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 f81c 	bl	800a5ac <__sfp>
 800a574:	60a0      	str	r0, [r4, #8]
 800a576:	4620      	mov	r0, r4
 800a578:	f000 f818 	bl	800a5ac <__sfp>
 800a57c:	2200      	movs	r2, #0
 800a57e:	60e0      	str	r0, [r4, #12]
 800a580:	2104      	movs	r1, #4
 800a582:	6860      	ldr	r0, [r4, #4]
 800a584:	f7ff ff82 	bl	800a48c <std>
 800a588:	68a0      	ldr	r0, [r4, #8]
 800a58a:	2201      	movs	r2, #1
 800a58c:	2109      	movs	r1, #9
 800a58e:	f7ff ff7d 	bl	800a48c <std>
 800a592:	68e0      	ldr	r0, [r4, #12]
 800a594:	2202      	movs	r2, #2
 800a596:	2112      	movs	r1, #18
 800a598:	f7ff ff78 	bl	800a48c <std>
 800a59c:	2301      	movs	r3, #1
 800a59e:	61a3      	str	r3, [r4, #24]
 800a5a0:	e7d2      	b.n	800a548 <__sinit+0xc>
 800a5a2:	bf00      	nop
 800a5a4:	0800ce1c 	.word	0x0800ce1c
 800a5a8:	0800a4d5 	.word	0x0800a4d5

0800a5ac <__sfp>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	f7ff ffac 	bl	800a50c <__sfp_lock_acquire>
 800a5b4:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <__sfp+0x84>)
 800a5b6:	681e      	ldr	r6, [r3, #0]
 800a5b8:	69b3      	ldr	r3, [r6, #24]
 800a5ba:	b913      	cbnz	r3, 800a5c2 <__sfp+0x16>
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff ffbd 	bl	800a53c <__sinit>
 800a5c2:	3648      	adds	r6, #72	; 0x48
 800a5c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	d503      	bpl.n	800a5d4 <__sfp+0x28>
 800a5cc:	6833      	ldr	r3, [r6, #0]
 800a5ce:	b30b      	cbz	r3, 800a614 <__sfp+0x68>
 800a5d0:	6836      	ldr	r6, [r6, #0]
 800a5d2:	e7f7      	b.n	800a5c4 <__sfp+0x18>
 800a5d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5d8:	b9d5      	cbnz	r5, 800a610 <__sfp+0x64>
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <__sfp+0x88>)
 800a5dc:	60e3      	str	r3, [r4, #12]
 800a5de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a5e4:	f000 fbba 	bl	800ad5c <__retarget_lock_init_recursive>
 800a5e8:	f7ff ff96 	bl	800a518 <__sfp_lock_release>
 800a5ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5f4:	6025      	str	r5, [r4, #0]
 800a5f6:	61a5      	str	r5, [r4, #24]
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a600:	f7fd fb5e 	bl	8007cc0 <memset>
 800a604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a60c:	4620      	mov	r0, r4
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	3468      	adds	r4, #104	; 0x68
 800a612:	e7d9      	b.n	800a5c8 <__sfp+0x1c>
 800a614:	2104      	movs	r1, #4
 800a616:	4638      	mov	r0, r7
 800a618:	f7ff ff62 	bl	800a4e0 <__sfmoreglue>
 800a61c:	4604      	mov	r4, r0
 800a61e:	6030      	str	r0, [r6, #0]
 800a620:	2800      	cmp	r0, #0
 800a622:	d1d5      	bne.n	800a5d0 <__sfp+0x24>
 800a624:	f7ff ff78 	bl	800a518 <__sfp_lock_release>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	e7ee      	b.n	800a60c <__sfp+0x60>
 800a62e:	bf00      	nop
 800a630:	0800ce1c 	.word	0x0800ce1c
 800a634:	ffff0001 	.word	0xffff0001

0800a638 <_fwalk_reent>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4606      	mov	r6, r0
 800a63e:	4688      	mov	r8, r1
 800a640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a644:	2700      	movs	r7, #0
 800a646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a64a:	f1b9 0901 	subs.w	r9, r9, #1
 800a64e:	d505      	bpl.n	800a65c <_fwalk_reent+0x24>
 800a650:	6824      	ldr	r4, [r4, #0]
 800a652:	2c00      	cmp	r4, #0
 800a654:	d1f7      	bne.n	800a646 <_fwalk_reent+0xe>
 800a656:	4638      	mov	r0, r7
 800a658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65c:	89ab      	ldrh	r3, [r5, #12]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d907      	bls.n	800a672 <_fwalk_reent+0x3a>
 800a662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a666:	3301      	adds	r3, #1
 800a668:	d003      	beq.n	800a672 <_fwalk_reent+0x3a>
 800a66a:	4629      	mov	r1, r5
 800a66c:	4630      	mov	r0, r6
 800a66e:	47c0      	blx	r8
 800a670:	4307      	orrs	r7, r0
 800a672:	3568      	adds	r5, #104	; 0x68
 800a674:	e7e9      	b.n	800a64a <_fwalk_reent+0x12>

0800a676 <rshift>:
 800a676:	6903      	ldr	r3, [r0, #16]
 800a678:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a680:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a684:	f100 0414 	add.w	r4, r0, #20
 800a688:	dd45      	ble.n	800a716 <rshift+0xa0>
 800a68a:	f011 011f 	ands.w	r1, r1, #31
 800a68e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a692:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a696:	d10c      	bne.n	800a6b2 <rshift+0x3c>
 800a698:	f100 0710 	add.w	r7, r0, #16
 800a69c:	4629      	mov	r1, r5
 800a69e:	42b1      	cmp	r1, r6
 800a6a0:	d334      	bcc.n	800a70c <rshift+0x96>
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	1eea      	subs	r2, r5, #3
 800a6a8:	4296      	cmp	r6, r2
 800a6aa:	bf38      	it	cc
 800a6ac:	2300      	movcc	r3, #0
 800a6ae:	4423      	add	r3, r4
 800a6b0:	e015      	b.n	800a6de <rshift+0x68>
 800a6b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6b6:	f1c1 0820 	rsb	r8, r1, #32
 800a6ba:	40cf      	lsrs	r7, r1
 800a6bc:	f105 0e04 	add.w	lr, r5, #4
 800a6c0:	46a1      	mov	r9, r4
 800a6c2:	4576      	cmp	r6, lr
 800a6c4:	46f4      	mov	ip, lr
 800a6c6:	d815      	bhi.n	800a6f4 <rshift+0x7e>
 800a6c8:	1a9a      	subs	r2, r3, r2
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	3a04      	subs	r2, #4
 800a6ce:	3501      	adds	r5, #1
 800a6d0:	42ae      	cmp	r6, r5
 800a6d2:	bf38      	it	cc
 800a6d4:	2200      	movcc	r2, #0
 800a6d6:	18a3      	adds	r3, r4, r2
 800a6d8:	50a7      	str	r7, [r4, r2]
 800a6da:	b107      	cbz	r7, 800a6de <rshift+0x68>
 800a6dc:	3304      	adds	r3, #4
 800a6de:	1b1a      	subs	r2, r3, r4
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6e6:	bf08      	it	eq
 800a6e8:	2300      	moveq	r3, #0
 800a6ea:	6102      	str	r2, [r0, #16]
 800a6ec:	bf08      	it	eq
 800a6ee:	6143      	streq	r3, [r0, #20]
 800a6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f4:	f8dc c000 	ldr.w	ip, [ip]
 800a6f8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6fc:	ea4c 0707 	orr.w	r7, ip, r7
 800a700:	f849 7b04 	str.w	r7, [r9], #4
 800a704:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a708:	40cf      	lsrs	r7, r1
 800a70a:	e7da      	b.n	800a6c2 <rshift+0x4c>
 800a70c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a710:	f847 cf04 	str.w	ip, [r7, #4]!
 800a714:	e7c3      	b.n	800a69e <rshift+0x28>
 800a716:	4623      	mov	r3, r4
 800a718:	e7e1      	b.n	800a6de <rshift+0x68>

0800a71a <__hexdig_fun>:
 800a71a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a71e:	2b09      	cmp	r3, #9
 800a720:	d802      	bhi.n	800a728 <__hexdig_fun+0xe>
 800a722:	3820      	subs	r0, #32
 800a724:	b2c0      	uxtb	r0, r0
 800a726:	4770      	bx	lr
 800a728:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a72c:	2b05      	cmp	r3, #5
 800a72e:	d801      	bhi.n	800a734 <__hexdig_fun+0x1a>
 800a730:	3847      	subs	r0, #71	; 0x47
 800a732:	e7f7      	b.n	800a724 <__hexdig_fun+0xa>
 800a734:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a738:	2b05      	cmp	r3, #5
 800a73a:	d801      	bhi.n	800a740 <__hexdig_fun+0x26>
 800a73c:	3827      	subs	r0, #39	; 0x27
 800a73e:	e7f1      	b.n	800a724 <__hexdig_fun+0xa>
 800a740:	2000      	movs	r0, #0
 800a742:	4770      	bx	lr

0800a744 <__gethex>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	ed2d 8b02 	vpush	{d8}
 800a74c:	b089      	sub	sp, #36	; 0x24
 800a74e:	ee08 0a10 	vmov	s16, r0
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	4bb4      	ldr	r3, [pc, #720]	; (800aa28 <__gethex+0x2e4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	4618      	mov	r0, r3
 800a75c:	468b      	mov	fp, r1
 800a75e:	4690      	mov	r8, r2
 800a760:	f7f5 fd36 	bl	80001d0 <strlen>
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	f8db 2000 	ldr.w	r2, [fp]
 800a76a:	4403      	add	r3, r0
 800a76c:	4682      	mov	sl, r0
 800a76e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a772:	9305      	str	r3, [sp, #20]
 800a774:	1c93      	adds	r3, r2, #2
 800a776:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a77a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a77e:	32fe      	adds	r2, #254	; 0xfe
 800a780:	18d1      	adds	r1, r2, r3
 800a782:	461f      	mov	r7, r3
 800a784:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a788:	9100      	str	r1, [sp, #0]
 800a78a:	2830      	cmp	r0, #48	; 0x30
 800a78c:	d0f8      	beq.n	800a780 <__gethex+0x3c>
 800a78e:	f7ff ffc4 	bl	800a71a <__hexdig_fun>
 800a792:	4604      	mov	r4, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	d13a      	bne.n	800a80e <__gethex+0xca>
 800a798:	9901      	ldr	r1, [sp, #4]
 800a79a:	4652      	mov	r2, sl
 800a79c:	4638      	mov	r0, r7
 800a79e:	f001 fbc6 	bl	800bf2e <strncmp>
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d168      	bne.n	800a87a <__gethex+0x136>
 800a7a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7ac:	eb07 060a 	add.w	r6, r7, sl
 800a7b0:	f7ff ffb3 	bl	800a71a <__hexdig_fun>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d062      	beq.n	800a87e <__gethex+0x13a>
 800a7b8:	4633      	mov	r3, r6
 800a7ba:	7818      	ldrb	r0, [r3, #0]
 800a7bc:	2830      	cmp	r0, #48	; 0x30
 800a7be:	461f      	mov	r7, r3
 800a7c0:	f103 0301 	add.w	r3, r3, #1
 800a7c4:	d0f9      	beq.n	800a7ba <__gethex+0x76>
 800a7c6:	f7ff ffa8 	bl	800a71a <__hexdig_fun>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	fab0 f480 	clz	r4, r0
 800a7d0:	0964      	lsrs	r4, r4, #5
 800a7d2:	4635      	mov	r5, r6
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	463a      	mov	r2, r7
 800a7d8:	4616      	mov	r6, r2
 800a7da:	3201      	adds	r2, #1
 800a7dc:	7830      	ldrb	r0, [r6, #0]
 800a7de:	f7ff ff9c 	bl	800a71a <__hexdig_fun>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d1f8      	bne.n	800a7d8 <__gethex+0x94>
 800a7e6:	9901      	ldr	r1, [sp, #4]
 800a7e8:	4652      	mov	r2, sl
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f001 fb9f 	bl	800bf2e <strncmp>
 800a7f0:	b980      	cbnz	r0, 800a814 <__gethex+0xd0>
 800a7f2:	b94d      	cbnz	r5, 800a808 <__gethex+0xc4>
 800a7f4:	eb06 050a 	add.w	r5, r6, sl
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4616      	mov	r6, r2
 800a7fc:	3201      	adds	r2, #1
 800a7fe:	7830      	ldrb	r0, [r6, #0]
 800a800:	f7ff ff8b 	bl	800a71a <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d1f8      	bne.n	800a7fa <__gethex+0xb6>
 800a808:	1bad      	subs	r5, r5, r6
 800a80a:	00ad      	lsls	r5, r5, #2
 800a80c:	e004      	b.n	800a818 <__gethex+0xd4>
 800a80e:	2400      	movs	r4, #0
 800a810:	4625      	mov	r5, r4
 800a812:	e7e0      	b.n	800a7d6 <__gethex+0x92>
 800a814:	2d00      	cmp	r5, #0
 800a816:	d1f7      	bne.n	800a808 <__gethex+0xc4>
 800a818:	7833      	ldrb	r3, [r6, #0]
 800a81a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a81e:	2b50      	cmp	r3, #80	; 0x50
 800a820:	d13b      	bne.n	800a89a <__gethex+0x156>
 800a822:	7873      	ldrb	r3, [r6, #1]
 800a824:	2b2b      	cmp	r3, #43	; 0x2b
 800a826:	d02c      	beq.n	800a882 <__gethex+0x13e>
 800a828:	2b2d      	cmp	r3, #45	; 0x2d
 800a82a:	d02e      	beq.n	800a88a <__gethex+0x146>
 800a82c:	1c71      	adds	r1, r6, #1
 800a82e:	f04f 0900 	mov.w	r9, #0
 800a832:	7808      	ldrb	r0, [r1, #0]
 800a834:	f7ff ff71 	bl	800a71a <__hexdig_fun>
 800a838:	1e43      	subs	r3, r0, #1
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d82c      	bhi.n	800a89a <__gethex+0x156>
 800a840:	f1a0 0210 	sub.w	r2, r0, #16
 800a844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a848:	f7ff ff67 	bl	800a71a <__hexdig_fun>
 800a84c:	1e43      	subs	r3, r0, #1
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b18      	cmp	r3, #24
 800a852:	d91d      	bls.n	800a890 <__gethex+0x14c>
 800a854:	f1b9 0f00 	cmp.w	r9, #0
 800a858:	d000      	beq.n	800a85c <__gethex+0x118>
 800a85a:	4252      	negs	r2, r2
 800a85c:	4415      	add	r5, r2
 800a85e:	f8cb 1000 	str.w	r1, [fp]
 800a862:	b1e4      	cbz	r4, 800a89e <__gethex+0x15a>
 800a864:	9b00      	ldr	r3, [sp, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	bf14      	ite	ne
 800a86a:	2700      	movne	r7, #0
 800a86c:	2706      	moveq	r7, #6
 800a86e:	4638      	mov	r0, r7
 800a870:	b009      	add	sp, #36	; 0x24
 800a872:	ecbd 8b02 	vpop	{d8}
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	463e      	mov	r6, r7
 800a87c:	4625      	mov	r5, r4
 800a87e:	2401      	movs	r4, #1
 800a880:	e7ca      	b.n	800a818 <__gethex+0xd4>
 800a882:	f04f 0900 	mov.w	r9, #0
 800a886:	1cb1      	adds	r1, r6, #2
 800a888:	e7d3      	b.n	800a832 <__gethex+0xee>
 800a88a:	f04f 0901 	mov.w	r9, #1
 800a88e:	e7fa      	b.n	800a886 <__gethex+0x142>
 800a890:	230a      	movs	r3, #10
 800a892:	fb03 0202 	mla	r2, r3, r2, r0
 800a896:	3a10      	subs	r2, #16
 800a898:	e7d4      	b.n	800a844 <__gethex+0x100>
 800a89a:	4631      	mov	r1, r6
 800a89c:	e7df      	b.n	800a85e <__gethex+0x11a>
 800a89e:	1bf3      	subs	r3, r6, r7
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	dc0b      	bgt.n	800a8c0 <__gethex+0x17c>
 800a8a8:	ee18 0a10 	vmov	r0, s16
 800a8ac:	f000 fa74 	bl	800ad98 <_Balloc>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	b940      	cbnz	r0, 800a8c6 <__gethex+0x182>
 800a8b4:	4b5d      	ldr	r3, [pc, #372]	; (800aa2c <__gethex+0x2e8>)
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	21de      	movs	r1, #222	; 0xde
 800a8ba:	485d      	ldr	r0, [pc, #372]	; (800aa30 <__gethex+0x2ec>)
 800a8bc:	f001 fc2c 	bl	800c118 <__assert_func>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	105b      	asrs	r3, r3, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__gethex+0x160>
 800a8c6:	f100 0914 	add.w	r9, r0, #20
 800a8ca:	f04f 0b00 	mov.w	fp, #0
 800a8ce:	f1ca 0301 	rsb	r3, sl, #1
 800a8d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8d6:	f8cd b000 	str.w	fp, [sp]
 800a8da:	9306      	str	r3, [sp, #24]
 800a8dc:	42b7      	cmp	r7, r6
 800a8de:	d340      	bcc.n	800a962 <__gethex+0x21e>
 800a8e0:	9802      	ldr	r0, [sp, #8]
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	f840 3b04 	str.w	r3, [r0], #4
 800a8e8:	eba0 0009 	sub.w	r0, r0, r9
 800a8ec:	1080      	asrs	r0, r0, #2
 800a8ee:	0146      	lsls	r6, r0, #5
 800a8f0:	6120      	str	r0, [r4, #16]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fb42 	bl	800af7c <__hi0bits>
 800a8f8:	1a30      	subs	r0, r6, r0
 800a8fa:	f8d8 6000 	ldr.w	r6, [r8]
 800a8fe:	42b0      	cmp	r0, r6
 800a900:	dd63      	ble.n	800a9ca <__gethex+0x286>
 800a902:	1b87      	subs	r7, r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fee6 	bl	800b6d8 <__any_on>
 800a90c:	4682      	mov	sl, r0
 800a90e:	b1a8      	cbz	r0, 800a93c <__gethex+0x1f8>
 800a910:	1e7b      	subs	r3, r7, #1
 800a912:	1159      	asrs	r1, r3, #5
 800a914:	f003 021f 	and.w	r2, r3, #31
 800a918:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a91c:	f04f 0a01 	mov.w	sl, #1
 800a920:	fa0a f202 	lsl.w	r2, sl, r2
 800a924:	420a      	tst	r2, r1
 800a926:	d009      	beq.n	800a93c <__gethex+0x1f8>
 800a928:	4553      	cmp	r3, sl
 800a92a:	dd05      	ble.n	800a938 <__gethex+0x1f4>
 800a92c:	1eb9      	subs	r1, r7, #2
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 fed2 	bl	800b6d8 <__any_on>
 800a934:	2800      	cmp	r0, #0
 800a936:	d145      	bne.n	800a9c4 <__gethex+0x280>
 800a938:	f04f 0a02 	mov.w	sl, #2
 800a93c:	4639      	mov	r1, r7
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff fe99 	bl	800a676 <rshift>
 800a944:	443d      	add	r5, r7
 800a946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a94a:	42ab      	cmp	r3, r5
 800a94c:	da4c      	bge.n	800a9e8 <__gethex+0x2a4>
 800a94e:	ee18 0a10 	vmov	r0, s16
 800a952:	4621      	mov	r1, r4
 800a954:	f000 fa60 	bl	800ae18 <_Bfree>
 800a958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a95a:	2300      	movs	r3, #0
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	27a3      	movs	r7, #163	; 0xa3
 800a960:	e785      	b.n	800a86e <__gethex+0x12a>
 800a962:	1e73      	subs	r3, r6, #1
 800a964:	9a05      	ldr	r2, [sp, #20]
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d019      	beq.n	800a9a4 <__gethex+0x260>
 800a970:	f1bb 0f20 	cmp.w	fp, #32
 800a974:	d107      	bne.n	800a986 <__gethex+0x242>
 800a976:	9b02      	ldr	r3, [sp, #8]
 800a978:	9a00      	ldr	r2, [sp, #0]
 800a97a:	f843 2b04 	str.w	r2, [r3], #4
 800a97e:	9302      	str	r3, [sp, #8]
 800a980:	2300      	movs	r3, #0
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	469b      	mov	fp, r3
 800a986:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a98a:	f7ff fec6 	bl	800a71a <__hexdig_fun>
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	f000 000f 	and.w	r0, r0, #15
 800a994:	fa00 f00b 	lsl.w	r0, r0, fp
 800a998:	4303      	orrs	r3, r0
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	f10b 0b04 	add.w	fp, fp, #4
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	e00d      	b.n	800a9c0 <__gethex+0x27c>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	9a06      	ldr	r2, [sp, #24]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	42bb      	cmp	r3, r7
 800a9ac:	d3e0      	bcc.n	800a970 <__gethex+0x22c>
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	9901      	ldr	r1, [sp, #4]
 800a9b2:	9307      	str	r3, [sp, #28]
 800a9b4:	4652      	mov	r2, sl
 800a9b6:	f001 faba 	bl	800bf2e <strncmp>
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d1d7      	bne.n	800a970 <__gethex+0x22c>
 800a9c0:	461e      	mov	r6, r3
 800a9c2:	e78b      	b.n	800a8dc <__gethex+0x198>
 800a9c4:	f04f 0a03 	mov.w	sl, #3
 800a9c8:	e7b8      	b.n	800a93c <__gethex+0x1f8>
 800a9ca:	da0a      	bge.n	800a9e2 <__gethex+0x29e>
 800a9cc:	1a37      	subs	r7, r6, r0
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	ee18 0a10 	vmov	r0, s16
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	f000 fc3b 	bl	800b250 <__lshift>
 800a9da:	1bed      	subs	r5, r5, r7
 800a9dc:	4604      	mov	r4, r0
 800a9de:	f100 0914 	add.w	r9, r0, #20
 800a9e2:	f04f 0a00 	mov.w	sl, #0
 800a9e6:	e7ae      	b.n	800a946 <__gethex+0x202>
 800a9e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9ec:	42a8      	cmp	r0, r5
 800a9ee:	dd72      	ble.n	800aad6 <__gethex+0x392>
 800a9f0:	1b45      	subs	r5, r0, r5
 800a9f2:	42ae      	cmp	r6, r5
 800a9f4:	dc36      	bgt.n	800aa64 <__gethex+0x320>
 800a9f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d02a      	beq.n	800aa54 <__gethex+0x310>
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d02c      	beq.n	800aa5c <__gethex+0x318>
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d11c      	bne.n	800aa40 <__gethex+0x2fc>
 800aa06:	42ae      	cmp	r6, r5
 800aa08:	d11a      	bne.n	800aa40 <__gethex+0x2fc>
 800aa0a:	2e01      	cmp	r6, #1
 800aa0c:	d112      	bne.n	800aa34 <__gethex+0x2f0>
 800aa0e:	9a04      	ldr	r2, [sp, #16]
 800aa10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	2301      	movs	r3, #1
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	f8c9 3000 	str.w	r3, [r9]
 800aa1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa20:	2762      	movs	r7, #98	; 0x62
 800aa22:	601c      	str	r4, [r3, #0]
 800aa24:	e723      	b.n	800a86e <__gethex+0x12a>
 800aa26:	bf00      	nop
 800aa28:	0800d10c 	.word	0x0800d10c
 800aa2c:	0800d030 	.word	0x0800d030
 800aa30:	0800d0a4 	.word	0x0800d0a4
 800aa34:	1e71      	subs	r1, r6, #1
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 fe4e 	bl	800b6d8 <__any_on>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d1e6      	bne.n	800aa0e <__gethex+0x2ca>
 800aa40:	ee18 0a10 	vmov	r0, s16
 800aa44:	4621      	mov	r1, r4
 800aa46:	f000 f9e7 	bl	800ae18 <_Bfree>
 800aa4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	2750      	movs	r7, #80	; 0x50
 800aa52:	e70c      	b.n	800a86e <__gethex+0x12a>
 800aa54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f2      	bne.n	800aa40 <__gethex+0x2fc>
 800aa5a:	e7d8      	b.n	800aa0e <__gethex+0x2ca>
 800aa5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1d5      	bne.n	800aa0e <__gethex+0x2ca>
 800aa62:	e7ed      	b.n	800aa40 <__gethex+0x2fc>
 800aa64:	1e6f      	subs	r7, r5, #1
 800aa66:	f1ba 0f00 	cmp.w	sl, #0
 800aa6a:	d131      	bne.n	800aad0 <__gethex+0x38c>
 800aa6c:	b127      	cbz	r7, 800aa78 <__gethex+0x334>
 800aa6e:	4639      	mov	r1, r7
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fe31 	bl	800b6d8 <__any_on>
 800aa76:	4682      	mov	sl, r0
 800aa78:	117b      	asrs	r3, r7, #5
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa80:	f007 071f 	and.w	r7, r7, #31
 800aa84:	fa01 f707 	lsl.w	r7, r1, r7
 800aa88:	421f      	tst	r7, r3
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	bf18      	it	ne
 800aa90:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa94:	1b76      	subs	r6, r6, r5
 800aa96:	f7ff fdee 	bl	800a676 <rshift>
 800aa9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa9e:	2702      	movs	r7, #2
 800aaa0:	f1ba 0f00 	cmp.w	sl, #0
 800aaa4:	d048      	beq.n	800ab38 <__gethex+0x3f4>
 800aaa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d015      	beq.n	800aada <__gethex+0x396>
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d017      	beq.n	800aae2 <__gethex+0x39e>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d109      	bne.n	800aaca <__gethex+0x386>
 800aab6:	f01a 0f02 	tst.w	sl, #2
 800aaba:	d006      	beq.n	800aaca <__gethex+0x386>
 800aabc:	f8d9 0000 	ldr.w	r0, [r9]
 800aac0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aac4:	f01a 0f01 	tst.w	sl, #1
 800aac8:	d10e      	bne.n	800aae8 <__gethex+0x3a4>
 800aaca:	f047 0710 	orr.w	r7, r7, #16
 800aace:	e033      	b.n	800ab38 <__gethex+0x3f4>
 800aad0:	f04f 0a01 	mov.w	sl, #1
 800aad4:	e7d0      	b.n	800aa78 <__gethex+0x334>
 800aad6:	2701      	movs	r7, #1
 800aad8:	e7e2      	b.n	800aaa0 <__gethex+0x35c>
 800aada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aadc:	f1c3 0301 	rsb	r3, r3, #1
 800aae0:	9315      	str	r3, [sp, #84]	; 0x54
 800aae2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0f0      	beq.n	800aaca <__gethex+0x386>
 800aae8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aaec:	f104 0314 	add.w	r3, r4, #20
 800aaf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aaf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aaf8:	f04f 0c00 	mov.w	ip, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab02:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab06:	d01c      	beq.n	800ab42 <__gethex+0x3fe>
 800ab08:	3201      	adds	r2, #1
 800ab0a:	6002      	str	r2, [r0, #0]
 800ab0c:	2f02      	cmp	r7, #2
 800ab0e:	f104 0314 	add.w	r3, r4, #20
 800ab12:	d13f      	bne.n	800ab94 <__gethex+0x450>
 800ab14:	f8d8 2000 	ldr.w	r2, [r8]
 800ab18:	3a01      	subs	r2, #1
 800ab1a:	42b2      	cmp	r2, r6
 800ab1c:	d10a      	bne.n	800ab34 <__gethex+0x3f0>
 800ab1e:	1171      	asrs	r1, r6, #5
 800ab20:	2201      	movs	r2, #1
 800ab22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab26:	f006 061f 	and.w	r6, r6, #31
 800ab2a:	fa02 f606 	lsl.w	r6, r2, r6
 800ab2e:	421e      	tst	r6, r3
 800ab30:	bf18      	it	ne
 800ab32:	4617      	movne	r7, r2
 800ab34:	f047 0720 	orr.w	r7, r7, #32
 800ab38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab3a:	601c      	str	r4, [r3, #0]
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	601d      	str	r5, [r3, #0]
 800ab40:	e695      	b.n	800a86e <__gethex+0x12a>
 800ab42:	4299      	cmp	r1, r3
 800ab44:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab48:	d8d8      	bhi.n	800aafc <__gethex+0x3b8>
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	459b      	cmp	fp, r3
 800ab4e:	db19      	blt.n	800ab84 <__gethex+0x440>
 800ab50:	6861      	ldr	r1, [r4, #4]
 800ab52:	ee18 0a10 	vmov	r0, s16
 800ab56:	3101      	adds	r1, #1
 800ab58:	f000 f91e 	bl	800ad98 <_Balloc>
 800ab5c:	4681      	mov	r9, r0
 800ab5e:	b918      	cbnz	r0, 800ab68 <__gethex+0x424>
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <__gethex+0x488>)
 800ab62:	4602      	mov	r2, r0
 800ab64:	2184      	movs	r1, #132	; 0x84
 800ab66:	e6a8      	b.n	800a8ba <__gethex+0x176>
 800ab68:	6922      	ldr	r2, [r4, #16]
 800ab6a:	3202      	adds	r2, #2
 800ab6c:	f104 010c 	add.w	r1, r4, #12
 800ab70:	0092      	lsls	r2, r2, #2
 800ab72:	300c      	adds	r0, #12
 800ab74:	f7fd f896 	bl	8007ca4 <memcpy>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	ee18 0a10 	vmov	r0, s16
 800ab7e:	f000 f94b 	bl	800ae18 <_Bfree>
 800ab82:	464c      	mov	r4, r9
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab8c:	6122      	str	r2, [r4, #16]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	615a      	str	r2, [r3, #20]
 800ab92:	e7bb      	b.n	800ab0c <__gethex+0x3c8>
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	455a      	cmp	r2, fp
 800ab98:	dd0b      	ble.n	800abb2 <__gethex+0x46e>
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff fd6a 	bl	800a676 <rshift>
 800aba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aba6:	3501      	adds	r5, #1
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	f6ff aed0 	blt.w	800a94e <__gethex+0x20a>
 800abae:	2701      	movs	r7, #1
 800abb0:	e7c0      	b.n	800ab34 <__gethex+0x3f0>
 800abb2:	f016 061f 	ands.w	r6, r6, #31
 800abb6:	d0fa      	beq.n	800abae <__gethex+0x46a>
 800abb8:	4453      	add	r3, sl
 800abba:	f1c6 0620 	rsb	r6, r6, #32
 800abbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abc2:	f000 f9db 	bl	800af7c <__hi0bits>
 800abc6:	42b0      	cmp	r0, r6
 800abc8:	dbe7      	blt.n	800ab9a <__gethex+0x456>
 800abca:	e7f0      	b.n	800abae <__gethex+0x46a>
 800abcc:	0800d030 	.word	0x0800d030

0800abd0 <L_shift>:
 800abd0:	f1c2 0208 	rsb	r2, r2, #8
 800abd4:	0092      	lsls	r2, r2, #2
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	f1c2 0620 	rsb	r6, r2, #32
 800abdc:	6843      	ldr	r3, [r0, #4]
 800abde:	6804      	ldr	r4, [r0, #0]
 800abe0:	fa03 f506 	lsl.w	r5, r3, r6
 800abe4:	432c      	orrs	r4, r5
 800abe6:	40d3      	lsrs	r3, r2
 800abe8:	6004      	str	r4, [r0, #0]
 800abea:	f840 3f04 	str.w	r3, [r0, #4]!
 800abee:	4288      	cmp	r0, r1
 800abf0:	d3f4      	bcc.n	800abdc <L_shift+0xc>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}

0800abf4 <__match>:
 800abf4:	b530      	push	{r4, r5, lr}
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	3301      	adds	r3, #1
 800abfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abfe:	b914      	cbnz	r4, 800ac06 <__match+0x12>
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	2001      	movs	r0, #1
 800ac04:	bd30      	pop	{r4, r5, pc}
 800ac06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac0e:	2d19      	cmp	r5, #25
 800ac10:	bf98      	it	ls
 800ac12:	3220      	addls	r2, #32
 800ac14:	42a2      	cmp	r2, r4
 800ac16:	d0f0      	beq.n	800abfa <__match+0x6>
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e7f3      	b.n	800ac04 <__match+0x10>

0800ac1c <__hexnan>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	680b      	ldr	r3, [r1, #0]
 800ac22:	115e      	asrs	r6, r3, #5
 800ac24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac28:	f013 031f 	ands.w	r3, r3, #31
 800ac2c:	b087      	sub	sp, #28
 800ac2e:	bf18      	it	ne
 800ac30:	3604      	addne	r6, #4
 800ac32:	2500      	movs	r5, #0
 800ac34:	1f37      	subs	r7, r6, #4
 800ac36:	4690      	mov	r8, r2
 800ac38:	6802      	ldr	r2, [r0, #0]
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac42:	46b9      	mov	r9, r7
 800ac44:	463c      	mov	r4, r7
 800ac46:	9502      	str	r5, [sp, #8]
 800ac48:	46ab      	mov	fp, r5
 800ac4a:	7851      	ldrb	r1, [r2, #1]
 800ac4c:	1c53      	adds	r3, r2, #1
 800ac4e:	9303      	str	r3, [sp, #12]
 800ac50:	b341      	cbz	r1, 800aca4 <__hexnan+0x88>
 800ac52:	4608      	mov	r0, r1
 800ac54:	9205      	str	r2, [sp, #20]
 800ac56:	9104      	str	r1, [sp, #16]
 800ac58:	f7ff fd5f 	bl	800a71a <__hexdig_fun>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d14f      	bne.n	800ad00 <__hexnan+0xe4>
 800ac60:	9904      	ldr	r1, [sp, #16]
 800ac62:	9a05      	ldr	r2, [sp, #20]
 800ac64:	2920      	cmp	r1, #32
 800ac66:	d818      	bhi.n	800ac9a <__hexnan+0x7e>
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	459b      	cmp	fp, r3
 800ac6c:	dd13      	ble.n	800ac96 <__hexnan+0x7a>
 800ac6e:	454c      	cmp	r4, r9
 800ac70:	d206      	bcs.n	800ac80 <__hexnan+0x64>
 800ac72:	2d07      	cmp	r5, #7
 800ac74:	dc04      	bgt.n	800ac80 <__hexnan+0x64>
 800ac76:	462a      	mov	r2, r5
 800ac78:	4649      	mov	r1, r9
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f7ff ffa8 	bl	800abd0 <L_shift>
 800ac80:	4544      	cmp	r4, r8
 800ac82:	d950      	bls.n	800ad26 <__hexnan+0x10a>
 800ac84:	2300      	movs	r3, #0
 800ac86:	f1a4 0904 	sub.w	r9, r4, #4
 800ac8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac8e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac92:	464c      	mov	r4, r9
 800ac94:	461d      	mov	r5, r3
 800ac96:	9a03      	ldr	r2, [sp, #12]
 800ac98:	e7d7      	b.n	800ac4a <__hexnan+0x2e>
 800ac9a:	2929      	cmp	r1, #41	; 0x29
 800ac9c:	d156      	bne.n	800ad4c <__hexnan+0x130>
 800ac9e:	3202      	adds	r2, #2
 800aca0:	f8ca 2000 	str.w	r2, [sl]
 800aca4:	f1bb 0f00 	cmp.w	fp, #0
 800aca8:	d050      	beq.n	800ad4c <__hexnan+0x130>
 800acaa:	454c      	cmp	r4, r9
 800acac:	d206      	bcs.n	800acbc <__hexnan+0xa0>
 800acae:	2d07      	cmp	r5, #7
 800acb0:	dc04      	bgt.n	800acbc <__hexnan+0xa0>
 800acb2:	462a      	mov	r2, r5
 800acb4:	4649      	mov	r1, r9
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff ff8a 	bl	800abd0 <L_shift>
 800acbc:	4544      	cmp	r4, r8
 800acbe:	d934      	bls.n	800ad2a <__hexnan+0x10e>
 800acc0:	f1a8 0204 	sub.w	r2, r8, #4
 800acc4:	4623      	mov	r3, r4
 800acc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800acca:	f842 1f04 	str.w	r1, [r2, #4]!
 800acce:	429f      	cmp	r7, r3
 800acd0:	d2f9      	bcs.n	800acc6 <__hexnan+0xaa>
 800acd2:	1b3b      	subs	r3, r7, r4
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3304      	adds	r3, #4
 800acda:	3401      	adds	r4, #1
 800acdc:	3e03      	subs	r6, #3
 800acde:	42b4      	cmp	r4, r6
 800ace0:	bf88      	it	hi
 800ace2:	2304      	movhi	r3, #4
 800ace4:	4443      	add	r3, r8
 800ace6:	2200      	movs	r2, #0
 800ace8:	f843 2b04 	str.w	r2, [r3], #4
 800acec:	429f      	cmp	r7, r3
 800acee:	d2fb      	bcs.n	800ace8 <__hexnan+0xcc>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	b91b      	cbnz	r3, 800acfc <__hexnan+0xe0>
 800acf4:	4547      	cmp	r7, r8
 800acf6:	d127      	bne.n	800ad48 <__hexnan+0x12c>
 800acf8:	2301      	movs	r3, #1
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	2005      	movs	r0, #5
 800acfe:	e026      	b.n	800ad4e <__hexnan+0x132>
 800ad00:	3501      	adds	r5, #1
 800ad02:	2d08      	cmp	r5, #8
 800ad04:	f10b 0b01 	add.w	fp, fp, #1
 800ad08:	dd06      	ble.n	800ad18 <__hexnan+0xfc>
 800ad0a:	4544      	cmp	r4, r8
 800ad0c:	d9c3      	bls.n	800ac96 <__hexnan+0x7a>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad14:	2501      	movs	r5, #1
 800ad16:	3c04      	subs	r4, #4
 800ad18:	6822      	ldr	r2, [r4, #0]
 800ad1a:	f000 000f 	and.w	r0, r0, #15
 800ad1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad22:	6022      	str	r2, [r4, #0]
 800ad24:	e7b7      	b.n	800ac96 <__hexnan+0x7a>
 800ad26:	2508      	movs	r5, #8
 800ad28:	e7b5      	b.n	800ac96 <__hexnan+0x7a>
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0df      	beq.n	800acf0 <__hexnan+0xd4>
 800ad30:	f04f 32ff 	mov.w	r2, #4294967295
 800ad34:	f1c3 0320 	rsb	r3, r3, #32
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad40:	401a      	ands	r2, r3
 800ad42:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad46:	e7d3      	b.n	800acf0 <__hexnan+0xd4>
 800ad48:	3f04      	subs	r7, #4
 800ad4a:	e7d1      	b.n	800acf0 <__hexnan+0xd4>
 800ad4c:	2004      	movs	r0, #4
 800ad4e:	b007      	add	sp, #28
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad54 <_localeconv_r>:
 800ad54:	4800      	ldr	r0, [pc, #0]	; (800ad58 <_localeconv_r+0x4>)
 800ad56:	4770      	bx	lr
 800ad58:	2000023c 	.word	0x2000023c

0800ad5c <__retarget_lock_init_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_acquire_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__retarget_lock_release_recursive>:
 800ad60:	4770      	bx	lr
	...

0800ad64 <malloc>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <malloc+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f000 bd59 	b.w	800b820 <_malloc_r>
 800ad6e:	bf00      	nop
 800ad70:	200000e4 	.word	0x200000e4

0800ad74 <__ascii_mbtowc>:
 800ad74:	b082      	sub	sp, #8
 800ad76:	b901      	cbnz	r1, 800ad7a <__ascii_mbtowc+0x6>
 800ad78:	a901      	add	r1, sp, #4
 800ad7a:	b142      	cbz	r2, 800ad8e <__ascii_mbtowc+0x1a>
 800ad7c:	b14b      	cbz	r3, 800ad92 <__ascii_mbtowc+0x1e>
 800ad7e:	7813      	ldrb	r3, [r2, #0]
 800ad80:	600b      	str	r3, [r1, #0]
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	1e10      	subs	r0, r2, #0
 800ad86:	bf18      	it	ne
 800ad88:	2001      	movne	r0, #1
 800ad8a:	b002      	add	sp, #8
 800ad8c:	4770      	bx	lr
 800ad8e:	4610      	mov	r0, r2
 800ad90:	e7fb      	b.n	800ad8a <__ascii_mbtowc+0x16>
 800ad92:	f06f 0001 	mvn.w	r0, #1
 800ad96:	e7f8      	b.n	800ad8a <__ascii_mbtowc+0x16>

0800ad98 <_Balloc>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	b976      	cbnz	r6, 800adc0 <_Balloc+0x28>
 800ada2:	2010      	movs	r0, #16
 800ada4:	f7ff ffde 	bl	800ad64 <malloc>
 800ada8:	4602      	mov	r2, r0
 800adaa:	6260      	str	r0, [r4, #36]	; 0x24
 800adac:	b920      	cbnz	r0, 800adb8 <_Balloc+0x20>
 800adae:	4b18      	ldr	r3, [pc, #96]	; (800ae10 <_Balloc+0x78>)
 800adb0:	4818      	ldr	r0, [pc, #96]	; (800ae14 <_Balloc+0x7c>)
 800adb2:	2166      	movs	r1, #102	; 0x66
 800adb4:	f001 f9b0 	bl	800c118 <__assert_func>
 800adb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adbc:	6006      	str	r6, [r0, #0]
 800adbe:	60c6      	str	r6, [r0, #12]
 800adc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adc2:	68f3      	ldr	r3, [r6, #12]
 800adc4:	b183      	cbz	r3, 800ade8 <_Balloc+0x50>
 800adc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adce:	b9b8      	cbnz	r0, 800ae00 <_Balloc+0x68>
 800add0:	2101      	movs	r1, #1
 800add2:	fa01 f605 	lsl.w	r6, r1, r5
 800add6:	1d72      	adds	r2, r6, #5
 800add8:	0092      	lsls	r2, r2, #2
 800adda:	4620      	mov	r0, r4
 800addc:	f000 fc9d 	bl	800b71a <_calloc_r>
 800ade0:	b160      	cbz	r0, 800adfc <_Balloc+0x64>
 800ade2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ade6:	e00e      	b.n	800ae06 <_Balloc+0x6e>
 800ade8:	2221      	movs	r2, #33	; 0x21
 800adea:	2104      	movs	r1, #4
 800adec:	4620      	mov	r0, r4
 800adee:	f000 fc94 	bl	800b71a <_calloc_r>
 800adf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf4:	60f0      	str	r0, [r6, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1e4      	bne.n	800adc6 <_Balloc+0x2e>
 800adfc:	2000      	movs	r0, #0
 800adfe:	bd70      	pop	{r4, r5, r6, pc}
 800ae00:	6802      	ldr	r2, [r0, #0]
 800ae02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae06:	2300      	movs	r3, #0
 800ae08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae0c:	e7f7      	b.n	800adfe <_Balloc+0x66>
 800ae0e:	bf00      	nop
 800ae10:	0800cfbe 	.word	0x0800cfbe
 800ae14:	0800d120 	.word	0x0800d120

0800ae18 <_Bfree>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	460c      	mov	r4, r1
 800ae20:	b976      	cbnz	r6, 800ae40 <_Bfree+0x28>
 800ae22:	2010      	movs	r0, #16
 800ae24:	f7ff ff9e 	bl	800ad64 <malloc>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ae2c:	b920      	cbnz	r0, 800ae38 <_Bfree+0x20>
 800ae2e:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <_Bfree+0x3c>)
 800ae30:	4809      	ldr	r0, [pc, #36]	; (800ae58 <_Bfree+0x40>)
 800ae32:	218a      	movs	r1, #138	; 0x8a
 800ae34:	f001 f970 	bl	800c118 <__assert_func>
 800ae38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae3c:	6006      	str	r6, [r0, #0]
 800ae3e:	60c6      	str	r6, [r0, #12]
 800ae40:	b13c      	cbz	r4, 800ae52 <_Bfree+0x3a>
 800ae42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae44:	6862      	ldr	r2, [r4, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae4c:	6021      	str	r1, [r4, #0]
 800ae4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	0800cfbe 	.word	0x0800cfbe
 800ae58:	0800d120 	.word	0x0800d120

0800ae5c <__multadd>:
 800ae5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae60:	690d      	ldr	r5, [r1, #16]
 800ae62:	4607      	mov	r7, r0
 800ae64:	460c      	mov	r4, r1
 800ae66:	461e      	mov	r6, r3
 800ae68:	f101 0c14 	add.w	ip, r1, #20
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae72:	b299      	uxth	r1, r3
 800ae74:	fb02 6101 	mla	r1, r2, r1, r6
 800ae78:	0c1e      	lsrs	r6, r3, #16
 800ae7a:	0c0b      	lsrs	r3, r1, #16
 800ae7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae80:	b289      	uxth	r1, r1
 800ae82:	3001      	adds	r0, #1
 800ae84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae88:	4285      	cmp	r5, r0
 800ae8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae92:	dcec      	bgt.n	800ae6e <__multadd+0x12>
 800ae94:	b30e      	cbz	r6, 800aeda <__multadd+0x7e>
 800ae96:	68a3      	ldr	r3, [r4, #8]
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	dc19      	bgt.n	800aed0 <__multadd+0x74>
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	4638      	mov	r0, r7
 800aea0:	3101      	adds	r1, #1
 800aea2:	f7ff ff79 	bl	800ad98 <_Balloc>
 800aea6:	4680      	mov	r8, r0
 800aea8:	b928      	cbnz	r0, 800aeb6 <__multadd+0x5a>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <__multadd+0x84>)
 800aeae:	480d      	ldr	r0, [pc, #52]	; (800aee4 <__multadd+0x88>)
 800aeb0:	21b5      	movs	r1, #181	; 0xb5
 800aeb2:	f001 f931 	bl	800c118 <__assert_func>
 800aeb6:	6922      	ldr	r2, [r4, #16]
 800aeb8:	3202      	adds	r2, #2
 800aeba:	f104 010c 	add.w	r1, r4, #12
 800aebe:	0092      	lsls	r2, r2, #2
 800aec0:	300c      	adds	r0, #12
 800aec2:	f7fc feef 	bl	8007ca4 <memcpy>
 800aec6:	4621      	mov	r1, r4
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7ff ffa5 	bl	800ae18 <_Bfree>
 800aece:	4644      	mov	r4, r8
 800aed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aed4:	3501      	adds	r5, #1
 800aed6:	615e      	str	r6, [r3, #20]
 800aed8:	6125      	str	r5, [r4, #16]
 800aeda:	4620      	mov	r0, r4
 800aedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee0:	0800d030 	.word	0x0800d030
 800aee4:	0800d120 	.word	0x0800d120

0800aee8 <__s2b>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	460c      	mov	r4, r1
 800aeee:	4615      	mov	r5, r2
 800aef0:	461f      	mov	r7, r3
 800aef2:	2209      	movs	r2, #9
 800aef4:	3308      	adds	r3, #8
 800aef6:	4606      	mov	r6, r0
 800aef8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aefc:	2100      	movs	r1, #0
 800aefe:	2201      	movs	r2, #1
 800af00:	429a      	cmp	r2, r3
 800af02:	db09      	blt.n	800af18 <__s2b+0x30>
 800af04:	4630      	mov	r0, r6
 800af06:	f7ff ff47 	bl	800ad98 <_Balloc>
 800af0a:	b940      	cbnz	r0, 800af1e <__s2b+0x36>
 800af0c:	4602      	mov	r2, r0
 800af0e:	4b19      	ldr	r3, [pc, #100]	; (800af74 <__s2b+0x8c>)
 800af10:	4819      	ldr	r0, [pc, #100]	; (800af78 <__s2b+0x90>)
 800af12:	21ce      	movs	r1, #206	; 0xce
 800af14:	f001 f900 	bl	800c118 <__assert_func>
 800af18:	0052      	lsls	r2, r2, #1
 800af1a:	3101      	adds	r1, #1
 800af1c:	e7f0      	b.n	800af00 <__s2b+0x18>
 800af1e:	9b08      	ldr	r3, [sp, #32]
 800af20:	6143      	str	r3, [r0, #20]
 800af22:	2d09      	cmp	r5, #9
 800af24:	f04f 0301 	mov.w	r3, #1
 800af28:	6103      	str	r3, [r0, #16]
 800af2a:	dd16      	ble.n	800af5a <__s2b+0x72>
 800af2c:	f104 0909 	add.w	r9, r4, #9
 800af30:	46c8      	mov	r8, r9
 800af32:	442c      	add	r4, r5
 800af34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af38:	4601      	mov	r1, r0
 800af3a:	3b30      	subs	r3, #48	; 0x30
 800af3c:	220a      	movs	r2, #10
 800af3e:	4630      	mov	r0, r6
 800af40:	f7ff ff8c 	bl	800ae5c <__multadd>
 800af44:	45a0      	cmp	r8, r4
 800af46:	d1f5      	bne.n	800af34 <__s2b+0x4c>
 800af48:	f1a5 0408 	sub.w	r4, r5, #8
 800af4c:	444c      	add	r4, r9
 800af4e:	1b2d      	subs	r5, r5, r4
 800af50:	1963      	adds	r3, r4, r5
 800af52:	42bb      	cmp	r3, r7
 800af54:	db04      	blt.n	800af60 <__s2b+0x78>
 800af56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5a:	340a      	adds	r4, #10
 800af5c:	2509      	movs	r5, #9
 800af5e:	e7f6      	b.n	800af4e <__s2b+0x66>
 800af60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af64:	4601      	mov	r1, r0
 800af66:	3b30      	subs	r3, #48	; 0x30
 800af68:	220a      	movs	r2, #10
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff76 	bl	800ae5c <__multadd>
 800af70:	e7ee      	b.n	800af50 <__s2b+0x68>
 800af72:	bf00      	nop
 800af74:	0800d030 	.word	0x0800d030
 800af78:	0800d120 	.word	0x0800d120

0800af7c <__hi0bits>:
 800af7c:	0c03      	lsrs	r3, r0, #16
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	b9d3      	cbnz	r3, 800afb8 <__hi0bits+0x3c>
 800af82:	0400      	lsls	r0, r0, #16
 800af84:	2310      	movs	r3, #16
 800af86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af8a:	bf04      	itt	eq
 800af8c:	0200      	lsleq	r0, r0, #8
 800af8e:	3308      	addeq	r3, #8
 800af90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af94:	bf04      	itt	eq
 800af96:	0100      	lsleq	r0, r0, #4
 800af98:	3304      	addeq	r3, #4
 800af9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af9e:	bf04      	itt	eq
 800afa0:	0080      	lsleq	r0, r0, #2
 800afa2:	3302      	addeq	r3, #2
 800afa4:	2800      	cmp	r0, #0
 800afa6:	db05      	blt.n	800afb4 <__hi0bits+0x38>
 800afa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afac:	f103 0301 	add.w	r3, r3, #1
 800afb0:	bf08      	it	eq
 800afb2:	2320      	moveq	r3, #32
 800afb4:	4618      	mov	r0, r3
 800afb6:	4770      	bx	lr
 800afb8:	2300      	movs	r3, #0
 800afba:	e7e4      	b.n	800af86 <__hi0bits+0xa>

0800afbc <__lo0bits>:
 800afbc:	6803      	ldr	r3, [r0, #0]
 800afbe:	f013 0207 	ands.w	r2, r3, #7
 800afc2:	4601      	mov	r1, r0
 800afc4:	d00b      	beq.n	800afde <__lo0bits+0x22>
 800afc6:	07da      	lsls	r2, r3, #31
 800afc8:	d423      	bmi.n	800b012 <__lo0bits+0x56>
 800afca:	0798      	lsls	r0, r3, #30
 800afcc:	bf49      	itett	mi
 800afce:	085b      	lsrmi	r3, r3, #1
 800afd0:	089b      	lsrpl	r3, r3, #2
 800afd2:	2001      	movmi	r0, #1
 800afd4:	600b      	strmi	r3, [r1, #0]
 800afd6:	bf5c      	itt	pl
 800afd8:	600b      	strpl	r3, [r1, #0]
 800afda:	2002      	movpl	r0, #2
 800afdc:	4770      	bx	lr
 800afde:	b298      	uxth	r0, r3
 800afe0:	b9a8      	cbnz	r0, 800b00e <__lo0bits+0x52>
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	2010      	movs	r0, #16
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	b90a      	cbnz	r2, 800afee <__lo0bits+0x32>
 800afea:	3008      	adds	r0, #8
 800afec:	0a1b      	lsrs	r3, r3, #8
 800afee:	071a      	lsls	r2, r3, #28
 800aff0:	bf04      	itt	eq
 800aff2:	091b      	lsreq	r3, r3, #4
 800aff4:	3004      	addeq	r0, #4
 800aff6:	079a      	lsls	r2, r3, #30
 800aff8:	bf04      	itt	eq
 800affa:	089b      	lsreq	r3, r3, #2
 800affc:	3002      	addeq	r0, #2
 800affe:	07da      	lsls	r2, r3, #31
 800b000:	d403      	bmi.n	800b00a <__lo0bits+0x4e>
 800b002:	085b      	lsrs	r3, r3, #1
 800b004:	f100 0001 	add.w	r0, r0, #1
 800b008:	d005      	beq.n	800b016 <__lo0bits+0x5a>
 800b00a:	600b      	str	r3, [r1, #0]
 800b00c:	4770      	bx	lr
 800b00e:	4610      	mov	r0, r2
 800b010:	e7e9      	b.n	800afe6 <__lo0bits+0x2a>
 800b012:	2000      	movs	r0, #0
 800b014:	4770      	bx	lr
 800b016:	2020      	movs	r0, #32
 800b018:	4770      	bx	lr
	...

0800b01c <__i2b>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	2101      	movs	r1, #1
 800b022:	f7ff feb9 	bl	800ad98 <_Balloc>
 800b026:	4602      	mov	r2, r0
 800b028:	b928      	cbnz	r0, 800b036 <__i2b+0x1a>
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <__i2b+0x24>)
 800b02c:	4805      	ldr	r0, [pc, #20]	; (800b044 <__i2b+0x28>)
 800b02e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b032:	f001 f871 	bl	800c118 <__assert_func>
 800b036:	2301      	movs	r3, #1
 800b038:	6144      	str	r4, [r0, #20]
 800b03a:	6103      	str	r3, [r0, #16]
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	0800d030 	.word	0x0800d030
 800b044:	0800d120 	.word	0x0800d120

0800b048 <__multiply>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	4691      	mov	r9, r2
 800b04e:	690a      	ldr	r2, [r1, #16]
 800b050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b054:	429a      	cmp	r2, r3
 800b056:	bfb8      	it	lt
 800b058:	460b      	movlt	r3, r1
 800b05a:	460c      	mov	r4, r1
 800b05c:	bfbc      	itt	lt
 800b05e:	464c      	movlt	r4, r9
 800b060:	4699      	movlt	r9, r3
 800b062:	6927      	ldr	r7, [r4, #16]
 800b064:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	6861      	ldr	r1, [r4, #4]
 800b06c:	eb07 060a 	add.w	r6, r7, sl
 800b070:	42b3      	cmp	r3, r6
 800b072:	b085      	sub	sp, #20
 800b074:	bfb8      	it	lt
 800b076:	3101      	addlt	r1, #1
 800b078:	f7ff fe8e 	bl	800ad98 <_Balloc>
 800b07c:	b930      	cbnz	r0, 800b08c <__multiply+0x44>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b44      	ldr	r3, [pc, #272]	; (800b194 <__multiply+0x14c>)
 800b082:	4845      	ldr	r0, [pc, #276]	; (800b198 <__multiply+0x150>)
 800b084:	f240 115d 	movw	r1, #349	; 0x15d
 800b088:	f001 f846 	bl	800c118 <__assert_func>
 800b08c:	f100 0514 	add.w	r5, r0, #20
 800b090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b094:	462b      	mov	r3, r5
 800b096:	2200      	movs	r2, #0
 800b098:	4543      	cmp	r3, r8
 800b09a:	d321      	bcc.n	800b0e0 <__multiply+0x98>
 800b09c:	f104 0314 	add.w	r3, r4, #20
 800b0a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0a4:	f109 0314 	add.w	r3, r9, #20
 800b0a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0ac:	9202      	str	r2, [sp, #8]
 800b0ae:	1b3a      	subs	r2, r7, r4
 800b0b0:	3a15      	subs	r2, #21
 800b0b2:	f022 0203 	bic.w	r2, r2, #3
 800b0b6:	3204      	adds	r2, #4
 800b0b8:	f104 0115 	add.w	r1, r4, #21
 800b0bc:	428f      	cmp	r7, r1
 800b0be:	bf38      	it	cc
 800b0c0:	2204      	movcc	r2, #4
 800b0c2:	9201      	str	r2, [sp, #4]
 800b0c4:	9a02      	ldr	r2, [sp, #8]
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d80c      	bhi.n	800b0e6 <__multiply+0x9e>
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	dd03      	ble.n	800b0d8 <__multiply+0x90>
 800b0d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d05a      	beq.n	800b18e <__multiply+0x146>
 800b0d8:	6106      	str	r6, [r0, #16]
 800b0da:	b005      	add	sp, #20
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	f843 2b04 	str.w	r2, [r3], #4
 800b0e4:	e7d8      	b.n	800b098 <__multiply+0x50>
 800b0e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0ea:	f1ba 0f00 	cmp.w	sl, #0
 800b0ee:	d024      	beq.n	800b13a <__multiply+0xf2>
 800b0f0:	f104 0e14 	add.w	lr, r4, #20
 800b0f4:	46a9      	mov	r9, r5
 800b0f6:	f04f 0c00 	mov.w	ip, #0
 800b0fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0fe:	f8d9 1000 	ldr.w	r1, [r9]
 800b102:	fa1f fb82 	uxth.w	fp, r2
 800b106:	b289      	uxth	r1, r1
 800b108:	fb0a 110b 	mla	r1, sl, fp, r1
 800b10c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b110:	f8d9 2000 	ldr.w	r2, [r9]
 800b114:	4461      	add	r1, ip
 800b116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b11a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b11e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b122:	b289      	uxth	r1, r1
 800b124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b128:	4577      	cmp	r7, lr
 800b12a:	f849 1b04 	str.w	r1, [r9], #4
 800b12e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b132:	d8e2      	bhi.n	800b0fa <__multiply+0xb2>
 800b134:	9a01      	ldr	r2, [sp, #4]
 800b136:	f845 c002 	str.w	ip, [r5, r2]
 800b13a:	9a03      	ldr	r2, [sp, #12]
 800b13c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b140:	3304      	adds	r3, #4
 800b142:	f1b9 0f00 	cmp.w	r9, #0
 800b146:	d020      	beq.n	800b18a <__multiply+0x142>
 800b148:	6829      	ldr	r1, [r5, #0]
 800b14a:	f104 0c14 	add.w	ip, r4, #20
 800b14e:	46ae      	mov	lr, r5
 800b150:	f04f 0a00 	mov.w	sl, #0
 800b154:	f8bc b000 	ldrh.w	fp, [ip]
 800b158:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b15c:	fb09 220b 	mla	r2, r9, fp, r2
 800b160:	4492      	add	sl, r2
 800b162:	b289      	uxth	r1, r1
 800b164:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b168:	f84e 1b04 	str.w	r1, [lr], #4
 800b16c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b170:	f8be 1000 	ldrh.w	r1, [lr]
 800b174:	0c12      	lsrs	r2, r2, #16
 800b176:	fb09 1102 	mla	r1, r9, r2, r1
 800b17a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b17e:	4567      	cmp	r7, ip
 800b180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b184:	d8e6      	bhi.n	800b154 <__multiply+0x10c>
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	50a9      	str	r1, [r5, r2]
 800b18a:	3504      	adds	r5, #4
 800b18c:	e79a      	b.n	800b0c4 <__multiply+0x7c>
 800b18e:	3e01      	subs	r6, #1
 800b190:	e79c      	b.n	800b0cc <__multiply+0x84>
 800b192:	bf00      	nop
 800b194:	0800d030 	.word	0x0800d030
 800b198:	0800d120 	.word	0x0800d120

0800b19c <__pow5mult>:
 800b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a0:	4615      	mov	r5, r2
 800b1a2:	f012 0203 	ands.w	r2, r2, #3
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	d007      	beq.n	800b1bc <__pow5mult+0x20>
 800b1ac:	4c25      	ldr	r4, [pc, #148]	; (800b244 <__pow5mult+0xa8>)
 800b1ae:	3a01      	subs	r2, #1
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1b6:	f7ff fe51 	bl	800ae5c <__multadd>
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	10ad      	asrs	r5, r5, #2
 800b1be:	d03d      	beq.n	800b23c <__pow5mult+0xa0>
 800b1c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1c2:	b97c      	cbnz	r4, 800b1e4 <__pow5mult+0x48>
 800b1c4:	2010      	movs	r0, #16
 800b1c6:	f7ff fdcd 	bl	800ad64 <malloc>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ce:	b928      	cbnz	r0, 800b1dc <__pow5mult+0x40>
 800b1d0:	4b1d      	ldr	r3, [pc, #116]	; (800b248 <__pow5mult+0xac>)
 800b1d2:	481e      	ldr	r0, [pc, #120]	; (800b24c <__pow5mult+0xb0>)
 800b1d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1d8:	f000 ff9e 	bl	800c118 <__assert_func>
 800b1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1e0:	6004      	str	r4, [r0, #0]
 800b1e2:	60c4      	str	r4, [r0, #12]
 800b1e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1ec:	b94c      	cbnz	r4, 800b202 <__pow5mult+0x66>
 800b1ee:	f240 2171 	movw	r1, #625	; 0x271
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7ff ff12 	bl	800b01c <__i2b>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1fe:	4604      	mov	r4, r0
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	f04f 0900 	mov.w	r9, #0
 800b206:	07eb      	lsls	r3, r5, #31
 800b208:	d50a      	bpl.n	800b220 <__pow5mult+0x84>
 800b20a:	4639      	mov	r1, r7
 800b20c:	4622      	mov	r2, r4
 800b20e:	4630      	mov	r0, r6
 800b210:	f7ff ff1a 	bl	800b048 <__multiply>
 800b214:	4639      	mov	r1, r7
 800b216:	4680      	mov	r8, r0
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff fdfd 	bl	800ae18 <_Bfree>
 800b21e:	4647      	mov	r7, r8
 800b220:	106d      	asrs	r5, r5, #1
 800b222:	d00b      	beq.n	800b23c <__pow5mult+0xa0>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	b938      	cbnz	r0, 800b238 <__pow5mult+0x9c>
 800b228:	4622      	mov	r2, r4
 800b22a:	4621      	mov	r1, r4
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7ff ff0b 	bl	800b048 <__multiply>
 800b232:	6020      	str	r0, [r4, #0]
 800b234:	f8c0 9000 	str.w	r9, [r0]
 800b238:	4604      	mov	r4, r0
 800b23a:	e7e4      	b.n	800b206 <__pow5mult+0x6a>
 800b23c:	4638      	mov	r0, r7
 800b23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b242:	bf00      	nop
 800b244:	0800d270 	.word	0x0800d270
 800b248:	0800cfbe 	.word	0x0800cfbe
 800b24c:	0800d120 	.word	0x0800d120

0800b250 <__lshift>:
 800b250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b254:	460c      	mov	r4, r1
 800b256:	6849      	ldr	r1, [r1, #4]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	4607      	mov	r7, r0
 800b262:	4691      	mov	r9, r2
 800b264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b268:	f108 0601 	add.w	r6, r8, #1
 800b26c:	42b3      	cmp	r3, r6
 800b26e:	db0b      	blt.n	800b288 <__lshift+0x38>
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff fd91 	bl	800ad98 <_Balloc>
 800b276:	4605      	mov	r5, r0
 800b278:	b948      	cbnz	r0, 800b28e <__lshift+0x3e>
 800b27a:	4602      	mov	r2, r0
 800b27c:	4b2a      	ldr	r3, [pc, #168]	; (800b328 <__lshift+0xd8>)
 800b27e:	482b      	ldr	r0, [pc, #172]	; (800b32c <__lshift+0xdc>)
 800b280:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b284:	f000 ff48 	bl	800c118 <__assert_func>
 800b288:	3101      	adds	r1, #1
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	e7ee      	b.n	800b26c <__lshift+0x1c>
 800b28e:	2300      	movs	r3, #0
 800b290:	f100 0114 	add.w	r1, r0, #20
 800b294:	f100 0210 	add.w	r2, r0, #16
 800b298:	4618      	mov	r0, r3
 800b29a:	4553      	cmp	r3, sl
 800b29c:	db37      	blt.n	800b30e <__lshift+0xbe>
 800b29e:	6920      	ldr	r0, [r4, #16]
 800b2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2a4:	f104 0314 	add.w	r3, r4, #20
 800b2a8:	f019 091f 	ands.w	r9, r9, #31
 800b2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2b4:	d02f      	beq.n	800b316 <__lshift+0xc6>
 800b2b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2ba:	468a      	mov	sl, r1
 800b2bc:	f04f 0c00 	mov.w	ip, #0
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	fa02 f209 	lsl.w	r2, r2, r9
 800b2c6:	ea42 020c 	orr.w	r2, r2, ip
 800b2ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d2:	4298      	cmp	r0, r3
 800b2d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2d8:	d8f2      	bhi.n	800b2c0 <__lshift+0x70>
 800b2da:	1b03      	subs	r3, r0, r4
 800b2dc:	3b15      	subs	r3, #21
 800b2de:	f023 0303 	bic.w	r3, r3, #3
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	f104 0215 	add.w	r2, r4, #21
 800b2e8:	4290      	cmp	r0, r2
 800b2ea:	bf38      	it	cc
 800b2ec:	2304      	movcc	r3, #4
 800b2ee:	f841 c003 	str.w	ip, [r1, r3]
 800b2f2:	f1bc 0f00 	cmp.w	ip, #0
 800b2f6:	d001      	beq.n	800b2fc <__lshift+0xac>
 800b2f8:	f108 0602 	add.w	r6, r8, #2
 800b2fc:	3e01      	subs	r6, #1
 800b2fe:	4638      	mov	r0, r7
 800b300:	612e      	str	r6, [r5, #16]
 800b302:	4621      	mov	r1, r4
 800b304:	f7ff fd88 	bl	800ae18 <_Bfree>
 800b308:	4628      	mov	r0, r5
 800b30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b312:	3301      	adds	r3, #1
 800b314:	e7c1      	b.n	800b29a <__lshift+0x4a>
 800b316:	3904      	subs	r1, #4
 800b318:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b320:	4298      	cmp	r0, r3
 800b322:	d8f9      	bhi.n	800b318 <__lshift+0xc8>
 800b324:	e7ea      	b.n	800b2fc <__lshift+0xac>
 800b326:	bf00      	nop
 800b328:	0800d030 	.word	0x0800d030
 800b32c:	0800d120 	.word	0x0800d120

0800b330 <__mcmp>:
 800b330:	b530      	push	{r4, r5, lr}
 800b332:	6902      	ldr	r2, [r0, #16]
 800b334:	690c      	ldr	r4, [r1, #16]
 800b336:	1b12      	subs	r2, r2, r4
 800b338:	d10e      	bne.n	800b358 <__mcmp+0x28>
 800b33a:	f100 0314 	add.w	r3, r0, #20
 800b33e:	3114      	adds	r1, #20
 800b340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b34c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b350:	42a5      	cmp	r5, r4
 800b352:	d003      	beq.n	800b35c <__mcmp+0x2c>
 800b354:	d305      	bcc.n	800b362 <__mcmp+0x32>
 800b356:	2201      	movs	r2, #1
 800b358:	4610      	mov	r0, r2
 800b35a:	bd30      	pop	{r4, r5, pc}
 800b35c:	4283      	cmp	r3, r0
 800b35e:	d3f3      	bcc.n	800b348 <__mcmp+0x18>
 800b360:	e7fa      	b.n	800b358 <__mcmp+0x28>
 800b362:	f04f 32ff 	mov.w	r2, #4294967295
 800b366:	e7f7      	b.n	800b358 <__mcmp+0x28>

0800b368 <__mdiff>:
 800b368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	460c      	mov	r4, r1
 800b36e:	4606      	mov	r6, r0
 800b370:	4611      	mov	r1, r2
 800b372:	4620      	mov	r0, r4
 800b374:	4690      	mov	r8, r2
 800b376:	f7ff ffdb 	bl	800b330 <__mcmp>
 800b37a:	1e05      	subs	r5, r0, #0
 800b37c:	d110      	bne.n	800b3a0 <__mdiff+0x38>
 800b37e:	4629      	mov	r1, r5
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff fd09 	bl	800ad98 <_Balloc>
 800b386:	b930      	cbnz	r0, 800b396 <__mdiff+0x2e>
 800b388:	4b3a      	ldr	r3, [pc, #232]	; (800b474 <__mdiff+0x10c>)
 800b38a:	4602      	mov	r2, r0
 800b38c:	f240 2132 	movw	r1, #562	; 0x232
 800b390:	4839      	ldr	r0, [pc, #228]	; (800b478 <__mdiff+0x110>)
 800b392:	f000 fec1 	bl	800c118 <__assert_func>
 800b396:	2301      	movs	r3, #1
 800b398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b39c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	bfa4      	itt	ge
 800b3a2:	4643      	movge	r3, r8
 800b3a4:	46a0      	movge	r8, r4
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3ac:	bfa6      	itte	ge
 800b3ae:	461c      	movge	r4, r3
 800b3b0:	2500      	movge	r5, #0
 800b3b2:	2501      	movlt	r5, #1
 800b3b4:	f7ff fcf0 	bl	800ad98 <_Balloc>
 800b3b8:	b920      	cbnz	r0, 800b3c4 <__mdiff+0x5c>
 800b3ba:	4b2e      	ldr	r3, [pc, #184]	; (800b474 <__mdiff+0x10c>)
 800b3bc:	4602      	mov	r2, r0
 800b3be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3c2:	e7e5      	b.n	800b390 <__mdiff+0x28>
 800b3c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3c8:	6926      	ldr	r6, [r4, #16]
 800b3ca:	60c5      	str	r5, [r0, #12]
 800b3cc:	f104 0914 	add.w	r9, r4, #20
 800b3d0:	f108 0514 	add.w	r5, r8, #20
 800b3d4:	f100 0e14 	add.w	lr, r0, #20
 800b3d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3e0:	f108 0210 	add.w	r2, r8, #16
 800b3e4:	46f2      	mov	sl, lr
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3f0:	fa1f f883 	uxth.w	r8, r3
 800b3f4:	fa11 f18b 	uxtah	r1, r1, fp
 800b3f8:	0c1b      	lsrs	r3, r3, #16
 800b3fa:	eba1 0808 	sub.w	r8, r1, r8
 800b3fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b402:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b406:	fa1f f888 	uxth.w	r8, r8
 800b40a:	1419      	asrs	r1, r3, #16
 800b40c:	454e      	cmp	r6, r9
 800b40e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b412:	f84a 3b04 	str.w	r3, [sl], #4
 800b416:	d8e7      	bhi.n	800b3e8 <__mdiff+0x80>
 800b418:	1b33      	subs	r3, r6, r4
 800b41a:	3b15      	subs	r3, #21
 800b41c:	f023 0303 	bic.w	r3, r3, #3
 800b420:	3304      	adds	r3, #4
 800b422:	3415      	adds	r4, #21
 800b424:	42a6      	cmp	r6, r4
 800b426:	bf38      	it	cc
 800b428:	2304      	movcc	r3, #4
 800b42a:	441d      	add	r5, r3
 800b42c:	4473      	add	r3, lr
 800b42e:	469e      	mov	lr, r3
 800b430:	462e      	mov	r6, r5
 800b432:	4566      	cmp	r6, ip
 800b434:	d30e      	bcc.n	800b454 <__mdiff+0xec>
 800b436:	f10c 0203 	add.w	r2, ip, #3
 800b43a:	1b52      	subs	r2, r2, r5
 800b43c:	f022 0203 	bic.w	r2, r2, #3
 800b440:	3d03      	subs	r5, #3
 800b442:	45ac      	cmp	ip, r5
 800b444:	bf38      	it	cc
 800b446:	2200      	movcc	r2, #0
 800b448:	441a      	add	r2, r3
 800b44a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b44e:	b17b      	cbz	r3, 800b470 <__mdiff+0x108>
 800b450:	6107      	str	r7, [r0, #16]
 800b452:	e7a3      	b.n	800b39c <__mdiff+0x34>
 800b454:	f856 8b04 	ldr.w	r8, [r6], #4
 800b458:	fa11 f288 	uxtah	r2, r1, r8
 800b45c:	1414      	asrs	r4, r2, #16
 800b45e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b462:	b292      	uxth	r2, r2
 800b464:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b468:	f84e 2b04 	str.w	r2, [lr], #4
 800b46c:	1421      	asrs	r1, r4, #16
 800b46e:	e7e0      	b.n	800b432 <__mdiff+0xca>
 800b470:	3f01      	subs	r7, #1
 800b472:	e7ea      	b.n	800b44a <__mdiff+0xe2>
 800b474:	0800d030 	.word	0x0800d030
 800b478:	0800d120 	.word	0x0800d120

0800b47c <__ulp>:
 800b47c:	b082      	sub	sp, #8
 800b47e:	ed8d 0b00 	vstr	d0, [sp]
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	4912      	ldr	r1, [pc, #72]	; (800b4d0 <__ulp+0x54>)
 800b486:	4019      	ands	r1, r3
 800b488:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b48c:	2900      	cmp	r1, #0
 800b48e:	dd05      	ble.n	800b49c <__ulp+0x20>
 800b490:	2200      	movs	r2, #0
 800b492:	460b      	mov	r3, r1
 800b494:	ec43 2b10 	vmov	d0, r2, r3
 800b498:	b002      	add	sp, #8
 800b49a:	4770      	bx	lr
 800b49c:	4249      	negs	r1, r1
 800b49e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b4a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b4a6:	f04f 0200 	mov.w	r2, #0
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	da04      	bge.n	800b4ba <__ulp+0x3e>
 800b4b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b4b4:	fa41 f300 	asr.w	r3, r1, r0
 800b4b8:	e7ec      	b.n	800b494 <__ulp+0x18>
 800b4ba:	f1a0 0114 	sub.w	r1, r0, #20
 800b4be:	291e      	cmp	r1, #30
 800b4c0:	bfda      	itte	le
 800b4c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b4c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b4ca:	2101      	movgt	r1, #1
 800b4cc:	460a      	mov	r2, r1
 800b4ce:	e7e1      	b.n	800b494 <__ulp+0x18>
 800b4d0:	7ff00000 	.word	0x7ff00000

0800b4d4 <__b2d>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	6905      	ldr	r5, [r0, #16]
 800b4d8:	f100 0714 	add.w	r7, r0, #20
 800b4dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b4e0:	1f2e      	subs	r6, r5, #4
 800b4e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff fd48 	bl	800af7c <__hi0bits>
 800b4ec:	f1c0 0320 	rsb	r3, r0, #32
 800b4f0:	280a      	cmp	r0, #10
 800b4f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b570 <__b2d+0x9c>
 800b4f6:	600b      	str	r3, [r1, #0]
 800b4f8:	dc14      	bgt.n	800b524 <__b2d+0x50>
 800b4fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800b502:	42b7      	cmp	r7, r6
 800b504:	ea41 030c 	orr.w	r3, r1, ip
 800b508:	bf34      	ite	cc
 800b50a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b50e:	2100      	movcs	r1, #0
 800b510:	3015      	adds	r0, #21
 800b512:	fa04 f000 	lsl.w	r0, r4, r0
 800b516:	fa21 f10e 	lsr.w	r1, r1, lr
 800b51a:	ea40 0201 	orr.w	r2, r0, r1
 800b51e:	ec43 2b10 	vmov	d0, r2, r3
 800b522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b524:	42b7      	cmp	r7, r6
 800b526:	bf3a      	itte	cc
 800b528:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b52c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b530:	2100      	movcs	r1, #0
 800b532:	380b      	subs	r0, #11
 800b534:	d017      	beq.n	800b566 <__b2d+0x92>
 800b536:	f1c0 0c20 	rsb	ip, r0, #32
 800b53a:	fa04 f500 	lsl.w	r5, r4, r0
 800b53e:	42be      	cmp	r6, r7
 800b540:	fa21 f40c 	lsr.w	r4, r1, ip
 800b544:	ea45 0504 	orr.w	r5, r5, r4
 800b548:	bf8c      	ite	hi
 800b54a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b54e:	2400      	movls	r4, #0
 800b550:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b554:	fa01 f000 	lsl.w	r0, r1, r0
 800b558:	fa24 f40c 	lsr.w	r4, r4, ip
 800b55c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b560:	ea40 0204 	orr.w	r2, r0, r4
 800b564:	e7db      	b.n	800b51e <__b2d+0x4a>
 800b566:	ea44 030c 	orr.w	r3, r4, ip
 800b56a:	460a      	mov	r2, r1
 800b56c:	e7d7      	b.n	800b51e <__b2d+0x4a>
 800b56e:	bf00      	nop
 800b570:	3ff00000 	.word	0x3ff00000

0800b574 <__d2b>:
 800b574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b578:	4689      	mov	r9, r1
 800b57a:	2101      	movs	r1, #1
 800b57c:	ec57 6b10 	vmov	r6, r7, d0
 800b580:	4690      	mov	r8, r2
 800b582:	f7ff fc09 	bl	800ad98 <_Balloc>
 800b586:	4604      	mov	r4, r0
 800b588:	b930      	cbnz	r0, 800b598 <__d2b+0x24>
 800b58a:	4602      	mov	r2, r0
 800b58c:	4b25      	ldr	r3, [pc, #148]	; (800b624 <__d2b+0xb0>)
 800b58e:	4826      	ldr	r0, [pc, #152]	; (800b628 <__d2b+0xb4>)
 800b590:	f240 310a 	movw	r1, #778	; 0x30a
 800b594:	f000 fdc0 	bl	800c118 <__assert_func>
 800b598:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b59c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5a0:	bb35      	cbnz	r5, 800b5f0 <__d2b+0x7c>
 800b5a2:	2e00      	cmp	r6, #0
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	d028      	beq.n	800b5fa <__d2b+0x86>
 800b5a8:	4668      	mov	r0, sp
 800b5aa:	9600      	str	r6, [sp, #0]
 800b5ac:	f7ff fd06 	bl	800afbc <__lo0bits>
 800b5b0:	9900      	ldr	r1, [sp, #0]
 800b5b2:	b300      	cbz	r0, 800b5f6 <__d2b+0x82>
 800b5b4:	9a01      	ldr	r2, [sp, #4]
 800b5b6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	40c2      	lsrs	r2, r0
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	9201      	str	r2, [sp, #4]
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	61a3      	str	r3, [r4, #24]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bf14      	ite	ne
 800b5ce:	2202      	movne	r2, #2
 800b5d0:	2201      	moveq	r2, #1
 800b5d2:	6122      	str	r2, [r4, #16]
 800b5d4:	b1d5      	cbz	r5, 800b60c <__d2b+0x98>
 800b5d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5da:	4405      	add	r5, r0
 800b5dc:	f8c9 5000 	str.w	r5, [r9]
 800b5e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5e4:	f8c8 0000 	str.w	r0, [r8]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	b003      	add	sp, #12
 800b5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5f4:	e7d5      	b.n	800b5a2 <__d2b+0x2e>
 800b5f6:	6161      	str	r1, [r4, #20]
 800b5f8:	e7e5      	b.n	800b5c6 <__d2b+0x52>
 800b5fa:	a801      	add	r0, sp, #4
 800b5fc:	f7ff fcde 	bl	800afbc <__lo0bits>
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	6163      	str	r3, [r4, #20]
 800b604:	2201      	movs	r2, #1
 800b606:	6122      	str	r2, [r4, #16]
 800b608:	3020      	adds	r0, #32
 800b60a:	e7e3      	b.n	800b5d4 <__d2b+0x60>
 800b60c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b614:	f8c9 0000 	str.w	r0, [r9]
 800b618:	6918      	ldr	r0, [r3, #16]
 800b61a:	f7ff fcaf 	bl	800af7c <__hi0bits>
 800b61e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b622:	e7df      	b.n	800b5e4 <__d2b+0x70>
 800b624:	0800d030 	.word	0x0800d030
 800b628:	0800d120 	.word	0x0800d120

0800b62c <__ratio>:
 800b62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4688      	mov	r8, r1
 800b632:	4669      	mov	r1, sp
 800b634:	4681      	mov	r9, r0
 800b636:	f7ff ff4d 	bl	800b4d4 <__b2d>
 800b63a:	a901      	add	r1, sp, #4
 800b63c:	4640      	mov	r0, r8
 800b63e:	ec55 4b10 	vmov	r4, r5, d0
 800b642:	f7ff ff47 	bl	800b4d4 <__b2d>
 800b646:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b64a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b64e:	eba3 0c02 	sub.w	ip, r3, r2
 800b652:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b65c:	ec51 0b10 	vmov	r0, r1, d0
 800b660:	2b00      	cmp	r3, #0
 800b662:	bfd6      	itet	le
 800b664:	460a      	movle	r2, r1
 800b666:	462a      	movgt	r2, r5
 800b668:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b66c:	468b      	mov	fp, r1
 800b66e:	462f      	mov	r7, r5
 800b670:	bfd4      	ite	le
 800b672:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b676:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b67a:	4620      	mov	r0, r4
 800b67c:	ee10 2a10 	vmov	r2, s0
 800b680:	465b      	mov	r3, fp
 800b682:	4639      	mov	r1, r7
 800b684:	f7f5 f8e2 	bl	800084c <__aeabi_ddiv>
 800b688:	ec41 0b10 	vmov	d0, r0, r1
 800b68c:	b003      	add	sp, #12
 800b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b692 <__copybits>:
 800b692:	3901      	subs	r1, #1
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	1149      	asrs	r1, r1, #5
 800b698:	6914      	ldr	r4, [r2, #16]
 800b69a:	3101      	adds	r1, #1
 800b69c:	f102 0314 	add.w	r3, r2, #20
 800b6a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6a8:	1f05      	subs	r5, r0, #4
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	d30c      	bcc.n	800b6c8 <__copybits+0x36>
 800b6ae:	1aa3      	subs	r3, r4, r2
 800b6b0:	3b11      	subs	r3, #17
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	3211      	adds	r2, #17
 800b6b8:	42a2      	cmp	r2, r4
 800b6ba:	bf88      	it	hi
 800b6bc:	2300      	movhi	r3, #0
 800b6be:	4418      	add	r0, r3
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4288      	cmp	r0, r1
 800b6c4:	d305      	bcc.n	800b6d2 <__copybits+0x40>
 800b6c6:	bd70      	pop	{r4, r5, r6, pc}
 800b6c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6d0:	e7eb      	b.n	800b6aa <__copybits+0x18>
 800b6d2:	f840 3b04 	str.w	r3, [r0], #4
 800b6d6:	e7f4      	b.n	800b6c2 <__copybits+0x30>

0800b6d8 <__any_on>:
 800b6d8:	f100 0214 	add.w	r2, r0, #20
 800b6dc:	6900      	ldr	r0, [r0, #16]
 800b6de:	114b      	asrs	r3, r1, #5
 800b6e0:	4298      	cmp	r0, r3
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	db11      	blt.n	800b70a <__any_on+0x32>
 800b6e6:	dd0a      	ble.n	800b6fe <__any_on+0x26>
 800b6e8:	f011 011f 	ands.w	r1, r1, #31
 800b6ec:	d007      	beq.n	800b6fe <__any_on+0x26>
 800b6ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6f2:	fa24 f001 	lsr.w	r0, r4, r1
 800b6f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6fa:	428c      	cmp	r4, r1
 800b6fc:	d10b      	bne.n	800b716 <__any_on+0x3e>
 800b6fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b702:	4293      	cmp	r3, r2
 800b704:	d803      	bhi.n	800b70e <__any_on+0x36>
 800b706:	2000      	movs	r0, #0
 800b708:	bd10      	pop	{r4, pc}
 800b70a:	4603      	mov	r3, r0
 800b70c:	e7f7      	b.n	800b6fe <__any_on+0x26>
 800b70e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b712:	2900      	cmp	r1, #0
 800b714:	d0f5      	beq.n	800b702 <__any_on+0x2a>
 800b716:	2001      	movs	r0, #1
 800b718:	e7f6      	b.n	800b708 <__any_on+0x30>

0800b71a <_calloc_r>:
 800b71a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b71c:	fba1 2402 	umull	r2, r4, r1, r2
 800b720:	b94c      	cbnz	r4, 800b736 <_calloc_r+0x1c>
 800b722:	4611      	mov	r1, r2
 800b724:	9201      	str	r2, [sp, #4]
 800b726:	f000 f87b 	bl	800b820 <_malloc_r>
 800b72a:	9a01      	ldr	r2, [sp, #4]
 800b72c:	4605      	mov	r5, r0
 800b72e:	b930      	cbnz	r0, 800b73e <_calloc_r+0x24>
 800b730:	4628      	mov	r0, r5
 800b732:	b003      	add	sp, #12
 800b734:	bd30      	pop	{r4, r5, pc}
 800b736:	220c      	movs	r2, #12
 800b738:	6002      	str	r2, [r0, #0]
 800b73a:	2500      	movs	r5, #0
 800b73c:	e7f8      	b.n	800b730 <_calloc_r+0x16>
 800b73e:	4621      	mov	r1, r4
 800b740:	f7fc fabe 	bl	8007cc0 <memset>
 800b744:	e7f4      	b.n	800b730 <_calloc_r+0x16>
	...

0800b748 <_free_r>:
 800b748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b74a:	2900      	cmp	r1, #0
 800b74c:	d044      	beq.n	800b7d8 <_free_r+0x90>
 800b74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b752:	9001      	str	r0, [sp, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f1a1 0404 	sub.w	r4, r1, #4
 800b75a:	bfb8      	it	lt
 800b75c:	18e4      	addlt	r4, r4, r3
 800b75e:	f000 fe6f 	bl	800c440 <__malloc_lock>
 800b762:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <_free_r+0x94>)
 800b764:	9801      	ldr	r0, [sp, #4]
 800b766:	6813      	ldr	r3, [r2, #0]
 800b768:	b933      	cbnz	r3, 800b778 <_free_r+0x30>
 800b76a:	6063      	str	r3, [r4, #4]
 800b76c:	6014      	str	r4, [r2, #0]
 800b76e:	b003      	add	sp, #12
 800b770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b774:	f000 be6a 	b.w	800c44c <__malloc_unlock>
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d908      	bls.n	800b78e <_free_r+0x46>
 800b77c:	6825      	ldr	r5, [r4, #0]
 800b77e:	1961      	adds	r1, r4, r5
 800b780:	428b      	cmp	r3, r1
 800b782:	bf01      	itttt	eq
 800b784:	6819      	ldreq	r1, [r3, #0]
 800b786:	685b      	ldreq	r3, [r3, #4]
 800b788:	1949      	addeq	r1, r1, r5
 800b78a:	6021      	streq	r1, [r4, #0]
 800b78c:	e7ed      	b.n	800b76a <_free_r+0x22>
 800b78e:	461a      	mov	r2, r3
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	b10b      	cbz	r3, 800b798 <_free_r+0x50>
 800b794:	42a3      	cmp	r3, r4
 800b796:	d9fa      	bls.n	800b78e <_free_r+0x46>
 800b798:	6811      	ldr	r1, [r2, #0]
 800b79a:	1855      	adds	r5, r2, r1
 800b79c:	42a5      	cmp	r5, r4
 800b79e:	d10b      	bne.n	800b7b8 <_free_r+0x70>
 800b7a0:	6824      	ldr	r4, [r4, #0]
 800b7a2:	4421      	add	r1, r4
 800b7a4:	1854      	adds	r4, r2, r1
 800b7a6:	42a3      	cmp	r3, r4
 800b7a8:	6011      	str	r1, [r2, #0]
 800b7aa:	d1e0      	bne.n	800b76e <_free_r+0x26>
 800b7ac:	681c      	ldr	r4, [r3, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	6053      	str	r3, [r2, #4]
 800b7b2:	4421      	add	r1, r4
 800b7b4:	6011      	str	r1, [r2, #0]
 800b7b6:	e7da      	b.n	800b76e <_free_r+0x26>
 800b7b8:	d902      	bls.n	800b7c0 <_free_r+0x78>
 800b7ba:	230c      	movs	r3, #12
 800b7bc:	6003      	str	r3, [r0, #0]
 800b7be:	e7d6      	b.n	800b76e <_free_r+0x26>
 800b7c0:	6825      	ldr	r5, [r4, #0]
 800b7c2:	1961      	adds	r1, r4, r5
 800b7c4:	428b      	cmp	r3, r1
 800b7c6:	bf04      	itt	eq
 800b7c8:	6819      	ldreq	r1, [r3, #0]
 800b7ca:	685b      	ldreq	r3, [r3, #4]
 800b7cc:	6063      	str	r3, [r4, #4]
 800b7ce:	bf04      	itt	eq
 800b7d0:	1949      	addeq	r1, r1, r5
 800b7d2:	6021      	streq	r1, [r4, #0]
 800b7d4:	6054      	str	r4, [r2, #4]
 800b7d6:	e7ca      	b.n	800b76e <_free_r+0x26>
 800b7d8:	b003      	add	sp, #12
 800b7da:	bd30      	pop	{r4, r5, pc}
 800b7dc:	20013210 	.word	0x20013210

0800b7e0 <sbrk_aligned>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	4e0e      	ldr	r6, [pc, #56]	; (800b81c <sbrk_aligned+0x3c>)
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	6831      	ldr	r1, [r6, #0]
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	b911      	cbnz	r1, 800b7f2 <sbrk_aligned+0x12>
 800b7ec:	f000 fb4c 	bl	800be88 <_sbrk_r>
 800b7f0:	6030      	str	r0, [r6, #0]
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f000 fb47 	bl	800be88 <_sbrk_r>
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	d00a      	beq.n	800b814 <sbrk_aligned+0x34>
 800b7fe:	1cc4      	adds	r4, r0, #3
 800b800:	f024 0403 	bic.w	r4, r4, #3
 800b804:	42a0      	cmp	r0, r4
 800b806:	d007      	beq.n	800b818 <sbrk_aligned+0x38>
 800b808:	1a21      	subs	r1, r4, r0
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 fb3c 	bl	800be88 <_sbrk_r>
 800b810:	3001      	adds	r0, #1
 800b812:	d101      	bne.n	800b818 <sbrk_aligned+0x38>
 800b814:	f04f 34ff 	mov.w	r4, #4294967295
 800b818:	4620      	mov	r0, r4
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	20013214 	.word	0x20013214

0800b820 <_malloc_r>:
 800b820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b824:	1ccd      	adds	r5, r1, #3
 800b826:	f025 0503 	bic.w	r5, r5, #3
 800b82a:	3508      	adds	r5, #8
 800b82c:	2d0c      	cmp	r5, #12
 800b82e:	bf38      	it	cc
 800b830:	250c      	movcc	r5, #12
 800b832:	2d00      	cmp	r5, #0
 800b834:	4607      	mov	r7, r0
 800b836:	db01      	blt.n	800b83c <_malloc_r+0x1c>
 800b838:	42a9      	cmp	r1, r5
 800b83a:	d905      	bls.n	800b848 <_malloc_r+0x28>
 800b83c:	230c      	movs	r3, #12
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	2600      	movs	r6, #0
 800b842:	4630      	mov	r0, r6
 800b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b848:	4e2e      	ldr	r6, [pc, #184]	; (800b904 <_malloc_r+0xe4>)
 800b84a:	f000 fdf9 	bl	800c440 <__malloc_lock>
 800b84e:	6833      	ldr	r3, [r6, #0]
 800b850:	461c      	mov	r4, r3
 800b852:	bb34      	cbnz	r4, 800b8a2 <_malloc_r+0x82>
 800b854:	4629      	mov	r1, r5
 800b856:	4638      	mov	r0, r7
 800b858:	f7ff ffc2 	bl	800b7e0 <sbrk_aligned>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	4604      	mov	r4, r0
 800b860:	d14d      	bne.n	800b8fe <_malloc_r+0xde>
 800b862:	6834      	ldr	r4, [r6, #0]
 800b864:	4626      	mov	r6, r4
 800b866:	2e00      	cmp	r6, #0
 800b868:	d140      	bne.n	800b8ec <_malloc_r+0xcc>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	4631      	mov	r1, r6
 800b86e:	4638      	mov	r0, r7
 800b870:	eb04 0803 	add.w	r8, r4, r3
 800b874:	f000 fb08 	bl	800be88 <_sbrk_r>
 800b878:	4580      	cmp	r8, r0
 800b87a:	d13a      	bne.n	800b8f2 <_malloc_r+0xd2>
 800b87c:	6821      	ldr	r1, [r4, #0]
 800b87e:	3503      	adds	r5, #3
 800b880:	1a6d      	subs	r5, r5, r1
 800b882:	f025 0503 	bic.w	r5, r5, #3
 800b886:	3508      	adds	r5, #8
 800b888:	2d0c      	cmp	r5, #12
 800b88a:	bf38      	it	cc
 800b88c:	250c      	movcc	r5, #12
 800b88e:	4629      	mov	r1, r5
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff ffa5 	bl	800b7e0 <sbrk_aligned>
 800b896:	3001      	adds	r0, #1
 800b898:	d02b      	beq.n	800b8f2 <_malloc_r+0xd2>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	442b      	add	r3, r5
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	e00e      	b.n	800b8c0 <_malloc_r+0xa0>
 800b8a2:	6822      	ldr	r2, [r4, #0]
 800b8a4:	1b52      	subs	r2, r2, r5
 800b8a6:	d41e      	bmi.n	800b8e6 <_malloc_r+0xc6>
 800b8a8:	2a0b      	cmp	r2, #11
 800b8aa:	d916      	bls.n	800b8da <_malloc_r+0xba>
 800b8ac:	1961      	adds	r1, r4, r5
 800b8ae:	42a3      	cmp	r3, r4
 800b8b0:	6025      	str	r5, [r4, #0]
 800b8b2:	bf18      	it	ne
 800b8b4:	6059      	strne	r1, [r3, #4]
 800b8b6:	6863      	ldr	r3, [r4, #4]
 800b8b8:	bf08      	it	eq
 800b8ba:	6031      	streq	r1, [r6, #0]
 800b8bc:	5162      	str	r2, [r4, r5]
 800b8be:	604b      	str	r3, [r1, #4]
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f104 060b 	add.w	r6, r4, #11
 800b8c6:	f000 fdc1 	bl	800c44c <__malloc_unlock>
 800b8ca:	f026 0607 	bic.w	r6, r6, #7
 800b8ce:	1d23      	adds	r3, r4, #4
 800b8d0:	1af2      	subs	r2, r6, r3
 800b8d2:	d0b6      	beq.n	800b842 <_malloc_r+0x22>
 800b8d4:	1b9b      	subs	r3, r3, r6
 800b8d6:	50a3      	str	r3, [r4, r2]
 800b8d8:	e7b3      	b.n	800b842 <_malloc_r+0x22>
 800b8da:	6862      	ldr	r2, [r4, #4]
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	bf0c      	ite	eq
 800b8e0:	6032      	streq	r2, [r6, #0]
 800b8e2:	605a      	strne	r2, [r3, #4]
 800b8e4:	e7ec      	b.n	800b8c0 <_malloc_r+0xa0>
 800b8e6:	4623      	mov	r3, r4
 800b8e8:	6864      	ldr	r4, [r4, #4]
 800b8ea:	e7b2      	b.n	800b852 <_malloc_r+0x32>
 800b8ec:	4634      	mov	r4, r6
 800b8ee:	6876      	ldr	r6, [r6, #4]
 800b8f0:	e7b9      	b.n	800b866 <_malloc_r+0x46>
 800b8f2:	230c      	movs	r3, #12
 800b8f4:	603b      	str	r3, [r7, #0]
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f000 fda8 	bl	800c44c <__malloc_unlock>
 800b8fc:	e7a1      	b.n	800b842 <_malloc_r+0x22>
 800b8fe:	6025      	str	r5, [r4, #0]
 800b900:	e7de      	b.n	800b8c0 <_malloc_r+0xa0>
 800b902:	bf00      	nop
 800b904:	20013210 	.word	0x20013210

0800b908 <__ssputs_r>:
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	688e      	ldr	r6, [r1, #8]
 800b90e:	429e      	cmp	r6, r3
 800b910:	4682      	mov	sl, r0
 800b912:	460c      	mov	r4, r1
 800b914:	4690      	mov	r8, r2
 800b916:	461f      	mov	r7, r3
 800b918:	d838      	bhi.n	800b98c <__ssputs_r+0x84>
 800b91a:	898a      	ldrh	r2, [r1, #12]
 800b91c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b920:	d032      	beq.n	800b988 <__ssputs_r+0x80>
 800b922:	6825      	ldr	r5, [r4, #0]
 800b924:	6909      	ldr	r1, [r1, #16]
 800b926:	eba5 0901 	sub.w	r9, r5, r1
 800b92a:	6965      	ldr	r5, [r4, #20]
 800b92c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b934:	3301      	adds	r3, #1
 800b936:	444b      	add	r3, r9
 800b938:	106d      	asrs	r5, r5, #1
 800b93a:	429d      	cmp	r5, r3
 800b93c:	bf38      	it	cc
 800b93e:	461d      	movcc	r5, r3
 800b940:	0553      	lsls	r3, r2, #21
 800b942:	d531      	bpl.n	800b9a8 <__ssputs_r+0xa0>
 800b944:	4629      	mov	r1, r5
 800b946:	f7ff ff6b 	bl	800b820 <_malloc_r>
 800b94a:	4606      	mov	r6, r0
 800b94c:	b950      	cbnz	r0, 800b964 <__ssputs_r+0x5c>
 800b94e:	230c      	movs	r3, #12
 800b950:	f8ca 3000 	str.w	r3, [sl]
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b964:	6921      	ldr	r1, [r4, #16]
 800b966:	464a      	mov	r2, r9
 800b968:	f7fc f99c 	bl	8007ca4 <memcpy>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	6126      	str	r6, [r4, #16]
 800b97a:	6165      	str	r5, [r4, #20]
 800b97c:	444e      	add	r6, r9
 800b97e:	eba5 0509 	sub.w	r5, r5, r9
 800b982:	6026      	str	r6, [r4, #0]
 800b984:	60a5      	str	r5, [r4, #8]
 800b986:	463e      	mov	r6, r7
 800b988:	42be      	cmp	r6, r7
 800b98a:	d900      	bls.n	800b98e <__ssputs_r+0x86>
 800b98c:	463e      	mov	r6, r7
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	4632      	mov	r2, r6
 800b992:	4641      	mov	r1, r8
 800b994:	f000 fd3a 	bl	800c40c <memmove>
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	1b9b      	subs	r3, r3, r6
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	4433      	add	r3, r6
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7db      	b.n	800b960 <__ssputs_r+0x58>
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	f000 fd55 	bl	800c458 <_realloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1e1      	bne.n	800b978 <__ssputs_r+0x70>
 800b9b4:	6921      	ldr	r1, [r4, #16]
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	f7ff fec6 	bl	800b748 <_free_r>
 800b9bc:	e7c7      	b.n	800b94e <__ssputs_r+0x46>
	...

0800b9c0 <_svfiprintf_r>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	4698      	mov	r8, r3
 800b9c6:	898b      	ldrh	r3, [r1, #12]
 800b9c8:	061b      	lsls	r3, r3, #24
 800b9ca:	b09d      	sub	sp, #116	; 0x74
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	460d      	mov	r5, r1
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	d50e      	bpl.n	800b9f2 <_svfiprintf_r+0x32>
 800b9d4:	690b      	ldr	r3, [r1, #16]
 800b9d6:	b963      	cbnz	r3, 800b9f2 <_svfiprintf_r+0x32>
 800b9d8:	2140      	movs	r1, #64	; 0x40
 800b9da:	f7ff ff21 	bl	800b820 <_malloc_r>
 800b9de:	6028      	str	r0, [r5, #0]
 800b9e0:	6128      	str	r0, [r5, #16]
 800b9e2:	b920      	cbnz	r0, 800b9ee <_svfiprintf_r+0x2e>
 800b9e4:	230c      	movs	r3, #12
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	e0d1      	b.n	800bb92 <_svfiprintf_r+0x1d2>
 800b9ee:	2340      	movs	r3, #64	; 0x40
 800b9f0:	616b      	str	r3, [r5, #20]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba00:	2330      	movs	r3, #48	; 0x30
 800ba02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbac <_svfiprintf_r+0x1ec>
 800ba06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba0a:	f04f 0901 	mov.w	r9, #1
 800ba0e:	4623      	mov	r3, r4
 800ba10:	469a      	mov	sl, r3
 800ba12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba16:	b10a      	cbz	r2, 800ba1c <_svfiprintf_r+0x5c>
 800ba18:	2a25      	cmp	r2, #37	; 0x25
 800ba1a:	d1f9      	bne.n	800ba10 <_svfiprintf_r+0x50>
 800ba1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba20:	d00b      	beq.n	800ba3a <_svfiprintf_r+0x7a>
 800ba22:	465b      	mov	r3, fp
 800ba24:	4622      	mov	r2, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ff6d 	bl	800b908 <__ssputs_r>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f000 80aa 	beq.w	800bb88 <_svfiprintf_r+0x1c8>
 800ba34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba36:	445a      	add	r2, fp
 800ba38:	9209      	str	r2, [sp, #36]	; 0x24
 800ba3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 80a2 	beq.w	800bb88 <_svfiprintf_r+0x1c8>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba4e:	f10a 0a01 	add.w	sl, sl, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba5c:	4654      	mov	r4, sl
 800ba5e:	2205      	movs	r2, #5
 800ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba64:	4851      	ldr	r0, [pc, #324]	; (800bbac <_svfiprintf_r+0x1ec>)
 800ba66:	f7f4 fbbb 	bl	80001e0 <memchr>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	b9d8      	cbnz	r0, 800baa6 <_svfiprintf_r+0xe6>
 800ba6e:	06d0      	lsls	r0, r2, #27
 800ba70:	bf44      	itt	mi
 800ba72:	2320      	movmi	r3, #32
 800ba74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba78:	0711      	lsls	r1, r2, #28
 800ba7a:	bf44      	itt	mi
 800ba7c:	232b      	movmi	r3, #43	; 0x2b
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba82:	f89a 3000 	ldrb.w	r3, [sl]
 800ba86:	2b2a      	cmp	r3, #42	; 0x2a
 800ba88:	d015      	beq.n	800bab6 <_svfiprintf_r+0xf6>
 800ba8a:	9a07      	ldr	r2, [sp, #28]
 800ba8c:	4654      	mov	r4, sl
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f04f 0c0a 	mov.w	ip, #10
 800ba94:	4621      	mov	r1, r4
 800ba96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d94e      	bls.n	800bb3e <_svfiprintf_r+0x17e>
 800baa0:	b1b0      	cbz	r0, 800bad0 <_svfiprintf_r+0x110>
 800baa2:	9207      	str	r2, [sp, #28]
 800baa4:	e014      	b.n	800bad0 <_svfiprintf_r+0x110>
 800baa6:	eba0 0308 	sub.w	r3, r0, r8
 800baaa:	fa09 f303 	lsl.w	r3, r9, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	46a2      	mov	sl, r4
 800bab4:	e7d2      	b.n	800ba5c <_svfiprintf_r+0x9c>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	1d19      	adds	r1, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9103      	str	r1, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfbb      	ittet	lt
 800bac2:	425b      	neglt	r3, r3
 800bac4:	f042 0202 	orrlt.w	r2, r2, #2
 800bac8:	9307      	strge	r3, [sp, #28]
 800baca:	9307      	strlt	r3, [sp, #28]
 800bacc:	bfb8      	it	lt
 800bace:	9204      	strlt	r2, [sp, #16]
 800bad0:	7823      	ldrb	r3, [r4, #0]
 800bad2:	2b2e      	cmp	r3, #46	; 0x2e
 800bad4:	d10c      	bne.n	800baf0 <_svfiprintf_r+0x130>
 800bad6:	7863      	ldrb	r3, [r4, #1]
 800bad8:	2b2a      	cmp	r3, #42	; 0x2a
 800bada:	d135      	bne.n	800bb48 <_svfiprintf_r+0x188>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9203      	str	r2, [sp, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bfb8      	it	lt
 800bae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800baec:	3402      	adds	r4, #2
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbbc <_svfiprintf_r+0x1fc>
 800baf4:	7821      	ldrb	r1, [r4, #0]
 800baf6:	2203      	movs	r2, #3
 800baf8:	4650      	mov	r0, sl
 800bafa:	f7f4 fb71 	bl	80001e0 <memchr>
 800bafe:	b140      	cbz	r0, 800bb12 <_svfiprintf_r+0x152>
 800bb00:	2340      	movs	r3, #64	; 0x40
 800bb02:	eba0 000a 	sub.w	r0, r0, sl
 800bb06:	fa03 f000 	lsl.w	r0, r3, r0
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	4303      	orrs	r3, r0
 800bb0e:	3401      	adds	r4, #1
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4826      	ldr	r0, [pc, #152]	; (800bbb0 <_svfiprintf_r+0x1f0>)
 800bb18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb1c:	2206      	movs	r2, #6
 800bb1e:	f7f4 fb5f 	bl	80001e0 <memchr>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d038      	beq.n	800bb98 <_svfiprintf_r+0x1d8>
 800bb26:	4b23      	ldr	r3, [pc, #140]	; (800bbb4 <_svfiprintf_r+0x1f4>)
 800bb28:	bb1b      	cbnz	r3, 800bb72 <_svfiprintf_r+0x1b2>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	3307      	adds	r3, #7
 800bb2e:	f023 0307 	bic.w	r3, r3, #7
 800bb32:	3308      	adds	r3, #8
 800bb34:	9303      	str	r3, [sp, #12]
 800bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb38:	4433      	add	r3, r6
 800bb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3c:	e767      	b.n	800ba0e <_svfiprintf_r+0x4e>
 800bb3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb42:	460c      	mov	r4, r1
 800bb44:	2001      	movs	r0, #1
 800bb46:	e7a5      	b.n	800ba94 <_svfiprintf_r+0xd4>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	3401      	adds	r4, #1
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	f04f 0c0a 	mov.w	ip, #10
 800bb54:	4620      	mov	r0, r4
 800bb56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb5a:	3a30      	subs	r2, #48	; 0x30
 800bb5c:	2a09      	cmp	r2, #9
 800bb5e:	d903      	bls.n	800bb68 <_svfiprintf_r+0x1a8>
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d0c5      	beq.n	800baf0 <_svfiprintf_r+0x130>
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	e7c3      	b.n	800baf0 <_svfiprintf_r+0x130>
 800bb68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e7f0      	b.n	800bb54 <_svfiprintf_r+0x194>
 800bb72:	ab03      	add	r3, sp, #12
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	462a      	mov	r2, r5
 800bb78:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <_svfiprintf_r+0x1f8>)
 800bb7a:	a904      	add	r1, sp, #16
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7fc f947 	bl	8007e10 <_printf_float>
 800bb82:	1c42      	adds	r2, r0, #1
 800bb84:	4606      	mov	r6, r0
 800bb86:	d1d6      	bne.n	800bb36 <_svfiprintf_r+0x176>
 800bb88:	89ab      	ldrh	r3, [r5, #12]
 800bb8a:	065b      	lsls	r3, r3, #25
 800bb8c:	f53f af2c 	bmi.w	800b9e8 <_svfiprintf_r+0x28>
 800bb90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb92:	b01d      	add	sp, #116	; 0x74
 800bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb98:	ab03      	add	r3, sp, #12
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <_svfiprintf_r+0x1f8>)
 800bba0:	a904      	add	r1, sp, #16
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7fc fbd8 	bl	8008358 <_printf_i>
 800bba8:	e7eb      	b.n	800bb82 <_svfiprintf_r+0x1c2>
 800bbaa:	bf00      	nop
 800bbac:	0800d27c 	.word	0x0800d27c
 800bbb0:	0800d286 	.word	0x0800d286
 800bbb4:	08007e11 	.word	0x08007e11
 800bbb8:	0800b909 	.word	0x0800b909
 800bbbc:	0800d282 	.word	0x0800d282

0800bbc0 <__sfputc_r>:
 800bbc0:	6893      	ldr	r3, [r2, #8]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	b410      	push	{r4}
 800bbc8:	6093      	str	r3, [r2, #8]
 800bbca:	da08      	bge.n	800bbde <__sfputc_r+0x1e>
 800bbcc:	6994      	ldr	r4, [r2, #24]
 800bbce:	42a3      	cmp	r3, r4
 800bbd0:	db01      	blt.n	800bbd6 <__sfputc_r+0x16>
 800bbd2:	290a      	cmp	r1, #10
 800bbd4:	d103      	bne.n	800bbde <__sfputc_r+0x1e>
 800bbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbda:	f000 b9bd 	b.w	800bf58 <__swbuf_r>
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	1c58      	adds	r0, r3, #1
 800bbe2:	6010      	str	r0, [r2, #0]
 800bbe4:	7019      	strb	r1, [r3, #0]
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <__sfputs_r>:
 800bbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	460f      	mov	r7, r1
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	18d5      	adds	r5, r2, r3
 800bbf8:	42ac      	cmp	r4, r5
 800bbfa:	d101      	bne.n	800bc00 <__sfputs_r+0x12>
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	e007      	b.n	800bc10 <__sfputs_r+0x22>
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	463a      	mov	r2, r7
 800bc06:	4630      	mov	r0, r6
 800bc08:	f7ff ffda 	bl	800bbc0 <__sfputc_r>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d1f3      	bne.n	800bbf8 <__sfputs_r+0xa>
 800bc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc14 <_vfiprintf_r>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	460d      	mov	r5, r1
 800bc1a:	b09d      	sub	sp, #116	; 0x74
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	4698      	mov	r8, r3
 800bc20:	4606      	mov	r6, r0
 800bc22:	b118      	cbz	r0, 800bc2c <_vfiprintf_r+0x18>
 800bc24:	6983      	ldr	r3, [r0, #24]
 800bc26:	b90b      	cbnz	r3, 800bc2c <_vfiprintf_r+0x18>
 800bc28:	f7fe fc88 	bl	800a53c <__sinit>
 800bc2c:	4b89      	ldr	r3, [pc, #548]	; (800be54 <_vfiprintf_r+0x240>)
 800bc2e:	429d      	cmp	r5, r3
 800bc30:	d11b      	bne.n	800bc6a <_vfiprintf_r+0x56>
 800bc32:	6875      	ldr	r5, [r6, #4]
 800bc34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc36:	07d9      	lsls	r1, r3, #31
 800bc38:	d405      	bmi.n	800bc46 <_vfiprintf_r+0x32>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	059a      	lsls	r2, r3, #22
 800bc3e:	d402      	bmi.n	800bc46 <_vfiprintf_r+0x32>
 800bc40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc42:	f7ff f88c 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	071b      	lsls	r3, r3, #28
 800bc4a:	d501      	bpl.n	800bc50 <_vfiprintf_r+0x3c>
 800bc4c:	692b      	ldr	r3, [r5, #16]
 800bc4e:	b9eb      	cbnz	r3, 800bc8c <_vfiprintf_r+0x78>
 800bc50:	4629      	mov	r1, r5
 800bc52:	4630      	mov	r0, r6
 800bc54:	f000 f9f2 	bl	800c03c <__swsetup_r>
 800bc58:	b1c0      	cbz	r0, 800bc8c <_vfiprintf_r+0x78>
 800bc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc5c:	07dc      	lsls	r4, r3, #31
 800bc5e:	d50e      	bpl.n	800bc7e <_vfiprintf_r+0x6a>
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	b01d      	add	sp, #116	; 0x74
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	4b7b      	ldr	r3, [pc, #492]	; (800be58 <_vfiprintf_r+0x244>)
 800bc6c:	429d      	cmp	r5, r3
 800bc6e:	d101      	bne.n	800bc74 <_vfiprintf_r+0x60>
 800bc70:	68b5      	ldr	r5, [r6, #8]
 800bc72:	e7df      	b.n	800bc34 <_vfiprintf_r+0x20>
 800bc74:	4b79      	ldr	r3, [pc, #484]	; (800be5c <_vfiprintf_r+0x248>)
 800bc76:	429d      	cmp	r5, r3
 800bc78:	bf08      	it	eq
 800bc7a:	68f5      	ldreq	r5, [r6, #12]
 800bc7c:	e7da      	b.n	800bc34 <_vfiprintf_r+0x20>
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	0598      	lsls	r0, r3, #22
 800bc82:	d4ed      	bmi.n	800bc60 <_vfiprintf_r+0x4c>
 800bc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc86:	f7ff f86b 	bl	800ad60 <__retarget_lock_release_recursive>
 800bc8a:	e7e9      	b.n	800bc60 <_vfiprintf_r+0x4c>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc90:	2320      	movs	r3, #32
 800bc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc96:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc9a:	2330      	movs	r3, #48	; 0x30
 800bc9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be60 <_vfiprintf_r+0x24c>
 800bca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca4:	f04f 0901 	mov.w	r9, #1
 800bca8:	4623      	mov	r3, r4
 800bcaa:	469a      	mov	sl, r3
 800bcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb0:	b10a      	cbz	r2, 800bcb6 <_vfiprintf_r+0xa2>
 800bcb2:	2a25      	cmp	r2, #37	; 0x25
 800bcb4:	d1f9      	bne.n	800bcaa <_vfiprintf_r+0x96>
 800bcb6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcba:	d00b      	beq.n	800bcd4 <_vfiprintf_r+0xc0>
 800bcbc:	465b      	mov	r3, fp
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ff93 	bl	800bbee <__sfputs_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f000 80aa 	beq.w	800be22 <_vfiprintf_r+0x20e>
 800bcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcd0:	445a      	add	r2, fp
 800bcd2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 80a2 	beq.w	800be22 <_vfiprintf_r+0x20e>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f04f 32ff 	mov.w	r2, #4294967295
 800bce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce8:	f10a 0a01 	add.w	sl, sl, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	9307      	str	r3, [sp, #28]
 800bcf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf4:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf6:	4654      	mov	r4, sl
 800bcf8:	2205      	movs	r2, #5
 800bcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfe:	4858      	ldr	r0, [pc, #352]	; (800be60 <_vfiprintf_r+0x24c>)
 800bd00:	f7f4 fa6e 	bl	80001e0 <memchr>
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	b9d8      	cbnz	r0, 800bd40 <_vfiprintf_r+0x12c>
 800bd08:	06d1      	lsls	r1, r2, #27
 800bd0a:	bf44      	itt	mi
 800bd0c:	2320      	movmi	r3, #32
 800bd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd12:	0713      	lsls	r3, r2, #28
 800bd14:	bf44      	itt	mi
 800bd16:	232b      	movmi	r3, #43	; 0x2b
 800bd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd20:	2b2a      	cmp	r3, #42	; 0x2a
 800bd22:	d015      	beq.n	800bd50 <_vfiprintf_r+0x13c>
 800bd24:	9a07      	ldr	r2, [sp, #28]
 800bd26:	4654      	mov	r4, sl
 800bd28:	2000      	movs	r0, #0
 800bd2a:	f04f 0c0a 	mov.w	ip, #10
 800bd2e:	4621      	mov	r1, r4
 800bd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd34:	3b30      	subs	r3, #48	; 0x30
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	d94e      	bls.n	800bdd8 <_vfiprintf_r+0x1c4>
 800bd3a:	b1b0      	cbz	r0, 800bd6a <_vfiprintf_r+0x156>
 800bd3c:	9207      	str	r2, [sp, #28]
 800bd3e:	e014      	b.n	800bd6a <_vfiprintf_r+0x156>
 800bd40:	eba0 0308 	sub.w	r3, r0, r8
 800bd44:	fa09 f303 	lsl.w	r3, r9, r3
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	46a2      	mov	sl, r4
 800bd4e:	e7d2      	b.n	800bcf6 <_vfiprintf_r+0xe2>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	1d19      	adds	r1, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	9103      	str	r1, [sp, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bfbb      	ittet	lt
 800bd5c:	425b      	neglt	r3, r3
 800bd5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd62:	9307      	strge	r3, [sp, #28]
 800bd64:	9307      	strlt	r3, [sp, #28]
 800bd66:	bfb8      	it	lt
 800bd68:	9204      	strlt	r2, [sp, #16]
 800bd6a:	7823      	ldrb	r3, [r4, #0]
 800bd6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6e:	d10c      	bne.n	800bd8a <_vfiprintf_r+0x176>
 800bd70:	7863      	ldrb	r3, [r4, #1]
 800bd72:	2b2a      	cmp	r3, #42	; 0x2a
 800bd74:	d135      	bne.n	800bde2 <_vfiprintf_r+0x1ce>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	9203      	str	r2, [sp, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfb8      	it	lt
 800bd82:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd86:	3402      	adds	r4, #2
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be70 <_vfiprintf_r+0x25c>
 800bd8e:	7821      	ldrb	r1, [r4, #0]
 800bd90:	2203      	movs	r2, #3
 800bd92:	4650      	mov	r0, sl
 800bd94:	f7f4 fa24 	bl	80001e0 <memchr>
 800bd98:	b140      	cbz	r0, 800bdac <_vfiprintf_r+0x198>
 800bd9a:	2340      	movs	r3, #64	; 0x40
 800bd9c:	eba0 000a 	sub.w	r0, r0, sl
 800bda0:	fa03 f000 	lsl.w	r0, r3, r0
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	4303      	orrs	r3, r0
 800bda8:	3401      	adds	r4, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb0:	482c      	ldr	r0, [pc, #176]	; (800be64 <_vfiprintf_r+0x250>)
 800bdb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	f7f4 fa12 	bl	80001e0 <memchr>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d03f      	beq.n	800be40 <_vfiprintf_r+0x22c>
 800bdc0:	4b29      	ldr	r3, [pc, #164]	; (800be68 <_vfiprintf_r+0x254>)
 800bdc2:	bb1b      	cbnz	r3, 800be0c <_vfiprintf_r+0x1f8>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	3307      	adds	r3, #7
 800bdc8:	f023 0307 	bic.w	r3, r3, #7
 800bdcc:	3308      	adds	r3, #8
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd2:	443b      	add	r3, r7
 800bdd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd6:	e767      	b.n	800bca8 <_vfiprintf_r+0x94>
 800bdd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bddc:	460c      	mov	r4, r1
 800bdde:	2001      	movs	r0, #1
 800bde0:	e7a5      	b.n	800bd2e <_vfiprintf_r+0x11a>
 800bde2:	2300      	movs	r3, #0
 800bde4:	3401      	adds	r4, #1
 800bde6:	9305      	str	r3, [sp, #20]
 800bde8:	4619      	mov	r1, r3
 800bdea:	f04f 0c0a 	mov.w	ip, #10
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf4:	3a30      	subs	r2, #48	; 0x30
 800bdf6:	2a09      	cmp	r2, #9
 800bdf8:	d903      	bls.n	800be02 <_vfiprintf_r+0x1ee>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0c5      	beq.n	800bd8a <_vfiprintf_r+0x176>
 800bdfe:	9105      	str	r1, [sp, #20]
 800be00:	e7c3      	b.n	800bd8a <_vfiprintf_r+0x176>
 800be02:	fb0c 2101 	mla	r1, ip, r1, r2
 800be06:	4604      	mov	r4, r0
 800be08:	2301      	movs	r3, #1
 800be0a:	e7f0      	b.n	800bdee <_vfiprintf_r+0x1da>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	462a      	mov	r2, r5
 800be12:	4b16      	ldr	r3, [pc, #88]	; (800be6c <_vfiprintf_r+0x258>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4630      	mov	r0, r6
 800be18:	f7fb fffa 	bl	8007e10 <_printf_float>
 800be1c:	4607      	mov	r7, r0
 800be1e:	1c78      	adds	r0, r7, #1
 800be20:	d1d6      	bne.n	800bdd0 <_vfiprintf_r+0x1bc>
 800be22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be24:	07d9      	lsls	r1, r3, #31
 800be26:	d405      	bmi.n	800be34 <_vfiprintf_r+0x220>
 800be28:	89ab      	ldrh	r3, [r5, #12]
 800be2a:	059a      	lsls	r2, r3, #22
 800be2c:	d402      	bmi.n	800be34 <_vfiprintf_r+0x220>
 800be2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be30:	f7fe ff96 	bl	800ad60 <__retarget_lock_release_recursive>
 800be34:	89ab      	ldrh	r3, [r5, #12]
 800be36:	065b      	lsls	r3, r3, #25
 800be38:	f53f af12 	bmi.w	800bc60 <_vfiprintf_r+0x4c>
 800be3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3e:	e711      	b.n	800bc64 <_vfiprintf_r+0x50>
 800be40:	ab03      	add	r3, sp, #12
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	462a      	mov	r2, r5
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <_vfiprintf_r+0x258>)
 800be48:	a904      	add	r1, sp, #16
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7fc fa84 	bl	8008358 <_printf_i>
 800be50:	e7e4      	b.n	800be1c <_vfiprintf_r+0x208>
 800be52:	bf00      	nop
 800be54:	0800d064 	.word	0x0800d064
 800be58:	0800d084 	.word	0x0800d084
 800be5c:	0800d044 	.word	0x0800d044
 800be60:	0800d27c 	.word	0x0800d27c
 800be64:	0800d286 	.word	0x0800d286
 800be68:	08007e11 	.word	0x08007e11
 800be6c:	0800bbef 	.word	0x0800bbef
 800be70:	0800d282 	.word	0x0800d282
 800be74:	00000000 	.word	0x00000000

0800be78 <nan>:
 800be78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be80 <nan+0x8>
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	00000000 	.word	0x00000000
 800be84:	7ff80000 	.word	0x7ff80000

0800be88 <_sbrk_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d06      	ldr	r5, [pc, #24]	; (800bea4 <_sbrk_r+0x1c>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	f000 fb98 	bl	800c5c8 <_sbrk>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_sbrk_r+0x1a>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_sbrk_r+0x1a>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	20013218 	.word	0x20013218

0800bea8 <__sread>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	460c      	mov	r4, r1
 800beac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb0:	f000 fb02 	bl	800c4b8 <_read_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	bfab      	itete	ge
 800beb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beba:	89a3      	ldrhlt	r3, [r4, #12]
 800bebc:	181b      	addge	r3, r3, r0
 800bebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bec2:	bfac      	ite	ge
 800bec4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bec6:	81a3      	strhlt	r3, [r4, #12]
 800bec8:	bd10      	pop	{r4, pc}

0800beca <__swrite>:
 800beca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bece:	461f      	mov	r7, r3
 800bed0:	898b      	ldrh	r3, [r1, #12]
 800bed2:	05db      	lsls	r3, r3, #23
 800bed4:	4605      	mov	r5, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	4616      	mov	r6, r2
 800beda:	d505      	bpl.n	800bee8 <__swrite+0x1e>
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	2302      	movs	r3, #2
 800bee2:	2200      	movs	r2, #0
 800bee4:	f000 fa1a 	bl	800c31c <_lseek_r>
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	4632      	mov	r2, r6
 800bef6:	463b      	mov	r3, r7
 800bef8:	4628      	mov	r0, r5
 800befa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	f000 b88b 	b.w	800c018 <_write_r>

0800bf02 <__sseek>:
 800bf02:	b510      	push	{r4, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0a:	f000 fa07 	bl	800c31c <_lseek_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	bf15      	itete	ne
 800bf14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf1e:	81a3      	strheq	r3, [r4, #12]
 800bf20:	bf18      	it	ne
 800bf22:	81a3      	strhne	r3, [r4, #12]
 800bf24:	bd10      	pop	{r4, pc}

0800bf26 <__sclose>:
 800bf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2a:	f000 b913 	b.w	800c154 <_close_r>

0800bf2e <strncmp>:
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	b17a      	cbz	r2, 800bf52 <strncmp+0x24>
 800bf32:	4603      	mov	r3, r0
 800bf34:	3901      	subs	r1, #1
 800bf36:	1884      	adds	r4, r0, r2
 800bf38:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf40:	4290      	cmp	r0, r2
 800bf42:	d101      	bne.n	800bf48 <strncmp+0x1a>
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d101      	bne.n	800bf4c <strncmp+0x1e>
 800bf48:	1a80      	subs	r0, r0, r2
 800bf4a:	bd10      	pop	{r4, pc}
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d1f3      	bne.n	800bf38 <strncmp+0xa>
 800bf50:	e7fa      	b.n	800bf48 <strncmp+0x1a>
 800bf52:	4610      	mov	r0, r2
 800bf54:	e7f9      	b.n	800bf4a <strncmp+0x1c>
	...

0800bf58 <__swbuf_r>:
 800bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5a:	460e      	mov	r6, r1
 800bf5c:	4614      	mov	r4, r2
 800bf5e:	4605      	mov	r5, r0
 800bf60:	b118      	cbz	r0, 800bf6a <__swbuf_r+0x12>
 800bf62:	6983      	ldr	r3, [r0, #24]
 800bf64:	b90b      	cbnz	r3, 800bf6a <__swbuf_r+0x12>
 800bf66:	f7fe fae9 	bl	800a53c <__sinit>
 800bf6a:	4b21      	ldr	r3, [pc, #132]	; (800bff0 <__swbuf_r+0x98>)
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	d12b      	bne.n	800bfc8 <__swbuf_r+0x70>
 800bf70:	686c      	ldr	r4, [r5, #4]
 800bf72:	69a3      	ldr	r3, [r4, #24]
 800bf74:	60a3      	str	r3, [r4, #8]
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	071a      	lsls	r2, r3, #28
 800bf7a:	d52f      	bpl.n	800bfdc <__swbuf_r+0x84>
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	b36b      	cbz	r3, 800bfdc <__swbuf_r+0x84>
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	1ac0      	subs	r0, r0, r3
 800bf86:	6963      	ldr	r3, [r4, #20]
 800bf88:	b2f6      	uxtb	r6, r6
 800bf8a:	4283      	cmp	r3, r0
 800bf8c:	4637      	mov	r7, r6
 800bf8e:	dc04      	bgt.n	800bf9a <__swbuf_r+0x42>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f974 	bl	800c280 <_fflush_r>
 800bf98:	bb30      	cbnz	r0, 800bfe8 <__swbuf_r+0x90>
 800bf9a:	68a3      	ldr	r3, [r4, #8]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	6022      	str	r2, [r4, #0]
 800bfa6:	701e      	strb	r6, [r3, #0]
 800bfa8:	6963      	ldr	r3, [r4, #20]
 800bfaa:	3001      	adds	r0, #1
 800bfac:	4283      	cmp	r3, r0
 800bfae:	d004      	beq.n	800bfba <__swbuf_r+0x62>
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	07db      	lsls	r3, r3, #31
 800bfb4:	d506      	bpl.n	800bfc4 <__swbuf_r+0x6c>
 800bfb6:	2e0a      	cmp	r6, #10
 800bfb8:	d104      	bne.n	800bfc4 <__swbuf_r+0x6c>
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f000 f95f 	bl	800c280 <_fflush_r>
 800bfc2:	b988      	cbnz	r0, 800bfe8 <__swbuf_r+0x90>
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc8:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <__swbuf_r+0x9c>)
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d101      	bne.n	800bfd2 <__swbuf_r+0x7a>
 800bfce:	68ac      	ldr	r4, [r5, #8]
 800bfd0:	e7cf      	b.n	800bf72 <__swbuf_r+0x1a>
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <__swbuf_r+0xa0>)
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	bf08      	it	eq
 800bfd8:	68ec      	ldreq	r4, [r5, #12]
 800bfda:	e7ca      	b.n	800bf72 <__swbuf_r+0x1a>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f82c 	bl	800c03c <__swsetup_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d0cb      	beq.n	800bf80 <__swbuf_r+0x28>
 800bfe8:	f04f 37ff 	mov.w	r7, #4294967295
 800bfec:	e7ea      	b.n	800bfc4 <__swbuf_r+0x6c>
 800bfee:	bf00      	nop
 800bff0:	0800d064 	.word	0x0800d064
 800bff4:	0800d084 	.word	0x0800d084
 800bff8:	0800d044 	.word	0x0800d044

0800bffc <__ascii_wctomb>:
 800bffc:	b149      	cbz	r1, 800c012 <__ascii_wctomb+0x16>
 800bffe:	2aff      	cmp	r2, #255	; 0xff
 800c000:	bf85      	ittet	hi
 800c002:	238a      	movhi	r3, #138	; 0x8a
 800c004:	6003      	strhi	r3, [r0, #0]
 800c006:	700a      	strbls	r2, [r1, #0]
 800c008:	f04f 30ff 	movhi.w	r0, #4294967295
 800c00c:	bf98      	it	ls
 800c00e:	2001      	movls	r0, #1
 800c010:	4770      	bx	lr
 800c012:	4608      	mov	r0, r1
 800c014:	4770      	bx	lr
	...

0800c018 <_write_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d07      	ldr	r5, [pc, #28]	; (800c038 <_write_r+0x20>)
 800c01c:	4604      	mov	r4, r0
 800c01e:	4608      	mov	r0, r1
 800c020:	4611      	mov	r1, r2
 800c022:	2200      	movs	r2, #0
 800c024:	602a      	str	r2, [r5, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f7f5 fb7f 	bl	800172a <_write>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_write_r+0x1e>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_write_r+0x1e>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20013218 	.word	0x20013218

0800c03c <__swsetup_r>:
 800c03c:	4b32      	ldr	r3, [pc, #200]	; (800c108 <__swsetup_r+0xcc>)
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	681d      	ldr	r5, [r3, #0]
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	b125      	cbz	r5, 800c052 <__swsetup_r+0x16>
 800c048:	69ab      	ldr	r3, [r5, #24]
 800c04a:	b913      	cbnz	r3, 800c052 <__swsetup_r+0x16>
 800c04c:	4628      	mov	r0, r5
 800c04e:	f7fe fa75 	bl	800a53c <__sinit>
 800c052:	4b2e      	ldr	r3, [pc, #184]	; (800c10c <__swsetup_r+0xd0>)
 800c054:	429c      	cmp	r4, r3
 800c056:	d10f      	bne.n	800c078 <__swsetup_r+0x3c>
 800c058:	686c      	ldr	r4, [r5, #4]
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c060:	0719      	lsls	r1, r3, #28
 800c062:	d42c      	bmi.n	800c0be <__swsetup_r+0x82>
 800c064:	06dd      	lsls	r5, r3, #27
 800c066:	d411      	bmi.n	800c08c <__swsetup_r+0x50>
 800c068:	2309      	movs	r3, #9
 800c06a:	6033      	str	r3, [r6, #0]
 800c06c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	f04f 30ff 	mov.w	r0, #4294967295
 800c076:	e03e      	b.n	800c0f6 <__swsetup_r+0xba>
 800c078:	4b25      	ldr	r3, [pc, #148]	; (800c110 <__swsetup_r+0xd4>)
 800c07a:	429c      	cmp	r4, r3
 800c07c:	d101      	bne.n	800c082 <__swsetup_r+0x46>
 800c07e:	68ac      	ldr	r4, [r5, #8]
 800c080:	e7eb      	b.n	800c05a <__swsetup_r+0x1e>
 800c082:	4b24      	ldr	r3, [pc, #144]	; (800c114 <__swsetup_r+0xd8>)
 800c084:	429c      	cmp	r4, r3
 800c086:	bf08      	it	eq
 800c088:	68ec      	ldreq	r4, [r5, #12]
 800c08a:	e7e6      	b.n	800c05a <__swsetup_r+0x1e>
 800c08c:	0758      	lsls	r0, r3, #29
 800c08e:	d512      	bpl.n	800c0b6 <__swsetup_r+0x7a>
 800c090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c092:	b141      	cbz	r1, 800c0a6 <__swsetup_r+0x6a>
 800c094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c098:	4299      	cmp	r1, r3
 800c09a:	d002      	beq.n	800c0a2 <__swsetup_r+0x66>
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff fb53 	bl	800b748 <_free_r>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	6363      	str	r3, [r4, #52]	; 0x34
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	6063      	str	r3, [r4, #4]
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	f043 0308 	orr.w	r3, r3, #8
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	b94b      	cbnz	r3, 800c0d6 <__swsetup_r+0x9a>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0cc:	d003      	beq.n	800c0d6 <__swsetup_r+0x9a>
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f000 f95b 	bl	800c38c <__smakebuf_r>
 800c0d6:	89a0      	ldrh	r0, [r4, #12]
 800c0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0dc:	f010 0301 	ands.w	r3, r0, #1
 800c0e0:	d00a      	beq.n	800c0f8 <__swsetup_r+0xbc>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60a3      	str	r3, [r4, #8]
 800c0e6:	6963      	ldr	r3, [r4, #20]
 800c0e8:	425b      	negs	r3, r3
 800c0ea:	61a3      	str	r3, [r4, #24]
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	b943      	cbnz	r3, 800c102 <__swsetup_r+0xc6>
 800c0f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0f4:	d1ba      	bne.n	800c06c <__swsetup_r+0x30>
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	0781      	lsls	r1, r0, #30
 800c0fa:	bf58      	it	pl
 800c0fc:	6963      	ldrpl	r3, [r4, #20]
 800c0fe:	60a3      	str	r3, [r4, #8]
 800c100:	e7f4      	b.n	800c0ec <__swsetup_r+0xb0>
 800c102:	2000      	movs	r0, #0
 800c104:	e7f7      	b.n	800c0f6 <__swsetup_r+0xba>
 800c106:	bf00      	nop
 800c108:	200000e4 	.word	0x200000e4
 800c10c:	0800d064 	.word	0x0800d064
 800c110:	0800d084 	.word	0x0800d084
 800c114:	0800d044 	.word	0x0800d044

0800c118 <__assert_func>:
 800c118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c11a:	4614      	mov	r4, r2
 800c11c:	461a      	mov	r2, r3
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <__assert_func+0x2c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4605      	mov	r5, r0
 800c124:	68d8      	ldr	r0, [r3, #12]
 800c126:	b14c      	cbz	r4, 800c13c <__assert_func+0x24>
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <__assert_func+0x30>)
 800c12a:	9100      	str	r1, [sp, #0]
 800c12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c130:	4906      	ldr	r1, [pc, #24]	; (800c14c <__assert_func+0x34>)
 800c132:	462b      	mov	r3, r5
 800c134:	f000 f8e0 	bl	800c2f8 <fiprintf>
 800c138:	f000 f9d0 	bl	800c4dc <abort>
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <__assert_func+0x38>)
 800c13e:	461c      	mov	r4, r3
 800c140:	e7f3      	b.n	800c12a <__assert_func+0x12>
 800c142:	bf00      	nop
 800c144:	200000e4 	.word	0x200000e4
 800c148:	0800d28d 	.word	0x0800d28d
 800c14c:	0800d29a 	.word	0x0800d29a
 800c150:	0800d2c8 	.word	0x0800d2c8

0800c154 <_close_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d06      	ldr	r5, [pc, #24]	; (800c170 <_close_r+0x1c>)
 800c158:	2300      	movs	r3, #0
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	602b      	str	r3, [r5, #0]
 800c160:	f7f5 faff 	bl	8001762 <_close>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_close_r+0x1a>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_close_r+0x1a>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	20013218 	.word	0x20013218

0800c174 <__sflush_r>:
 800c174:	898a      	ldrh	r2, [r1, #12]
 800c176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17a:	4605      	mov	r5, r0
 800c17c:	0710      	lsls	r0, r2, #28
 800c17e:	460c      	mov	r4, r1
 800c180:	d458      	bmi.n	800c234 <__sflush_r+0xc0>
 800c182:	684b      	ldr	r3, [r1, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	dc05      	bgt.n	800c194 <__sflush_r+0x20>
 800c188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dc02      	bgt.n	800c194 <__sflush_r+0x20>
 800c18e:	2000      	movs	r0, #0
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c196:	2e00      	cmp	r6, #0
 800c198:	d0f9      	beq.n	800c18e <__sflush_r+0x1a>
 800c19a:	2300      	movs	r3, #0
 800c19c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1a0:	682f      	ldr	r7, [r5, #0]
 800c1a2:	602b      	str	r3, [r5, #0]
 800c1a4:	d032      	beq.n	800c20c <__sflush_r+0x98>
 800c1a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	075a      	lsls	r2, r3, #29
 800c1ac:	d505      	bpl.n	800c1ba <__sflush_r+0x46>
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	1ac0      	subs	r0, r0, r3
 800c1b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1b4:	b10b      	cbz	r3, 800c1ba <__sflush_r+0x46>
 800c1b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1b8:	1ac0      	subs	r0, r0, r3
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4602      	mov	r2, r0
 800c1be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1c0:	6a21      	ldr	r1, [r4, #32]
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b0      	blx	r6
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	d106      	bne.n	800c1da <__sflush_r+0x66>
 800c1cc:	6829      	ldr	r1, [r5, #0]
 800c1ce:	291d      	cmp	r1, #29
 800c1d0:	d82c      	bhi.n	800c22c <__sflush_r+0xb8>
 800c1d2:	4a2a      	ldr	r2, [pc, #168]	; (800c27c <__sflush_r+0x108>)
 800c1d4:	40ca      	lsrs	r2, r1
 800c1d6:	07d6      	lsls	r6, r2, #31
 800c1d8:	d528      	bpl.n	800c22c <__sflush_r+0xb8>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	6062      	str	r2, [r4, #4]
 800c1de:	04d9      	lsls	r1, r3, #19
 800c1e0:	6922      	ldr	r2, [r4, #16]
 800c1e2:	6022      	str	r2, [r4, #0]
 800c1e4:	d504      	bpl.n	800c1f0 <__sflush_r+0x7c>
 800c1e6:	1c42      	adds	r2, r0, #1
 800c1e8:	d101      	bne.n	800c1ee <__sflush_r+0x7a>
 800c1ea:	682b      	ldr	r3, [r5, #0]
 800c1ec:	b903      	cbnz	r3, 800c1f0 <__sflush_r+0x7c>
 800c1ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c1f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1f2:	602f      	str	r7, [r5, #0]
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	d0ca      	beq.n	800c18e <__sflush_r+0x1a>
 800c1f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d002      	beq.n	800c206 <__sflush_r+0x92>
 800c200:	4628      	mov	r0, r5
 800c202:	f7ff faa1 	bl	800b748 <_free_r>
 800c206:	2000      	movs	r0, #0
 800c208:	6360      	str	r0, [r4, #52]	; 0x34
 800c20a:	e7c1      	b.n	800c190 <__sflush_r+0x1c>
 800c20c:	6a21      	ldr	r1, [r4, #32]
 800c20e:	2301      	movs	r3, #1
 800c210:	4628      	mov	r0, r5
 800c212:	47b0      	blx	r6
 800c214:	1c41      	adds	r1, r0, #1
 800c216:	d1c7      	bne.n	800c1a8 <__sflush_r+0x34>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0c4      	beq.n	800c1a8 <__sflush_r+0x34>
 800c21e:	2b1d      	cmp	r3, #29
 800c220:	d001      	beq.n	800c226 <__sflush_r+0xb2>
 800c222:	2b16      	cmp	r3, #22
 800c224:	d101      	bne.n	800c22a <__sflush_r+0xb6>
 800c226:	602f      	str	r7, [r5, #0]
 800c228:	e7b1      	b.n	800c18e <__sflush_r+0x1a>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	e7ad      	b.n	800c190 <__sflush_r+0x1c>
 800c234:	690f      	ldr	r7, [r1, #16]
 800c236:	2f00      	cmp	r7, #0
 800c238:	d0a9      	beq.n	800c18e <__sflush_r+0x1a>
 800c23a:	0793      	lsls	r3, r2, #30
 800c23c:	680e      	ldr	r6, [r1, #0]
 800c23e:	bf08      	it	eq
 800c240:	694b      	ldreq	r3, [r1, #20]
 800c242:	600f      	str	r7, [r1, #0]
 800c244:	bf18      	it	ne
 800c246:	2300      	movne	r3, #0
 800c248:	eba6 0807 	sub.w	r8, r6, r7
 800c24c:	608b      	str	r3, [r1, #8]
 800c24e:	f1b8 0f00 	cmp.w	r8, #0
 800c252:	dd9c      	ble.n	800c18e <__sflush_r+0x1a>
 800c254:	6a21      	ldr	r1, [r4, #32]
 800c256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c258:	4643      	mov	r3, r8
 800c25a:	463a      	mov	r2, r7
 800c25c:	4628      	mov	r0, r5
 800c25e:	47b0      	blx	r6
 800c260:	2800      	cmp	r0, #0
 800c262:	dc06      	bgt.n	800c272 <__sflush_r+0xfe>
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	e78e      	b.n	800c190 <__sflush_r+0x1c>
 800c272:	4407      	add	r7, r0
 800c274:	eba8 0800 	sub.w	r8, r8, r0
 800c278:	e7e9      	b.n	800c24e <__sflush_r+0xda>
 800c27a:	bf00      	nop
 800c27c:	20400001 	.word	0x20400001

0800c280 <_fflush_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	690b      	ldr	r3, [r1, #16]
 800c284:	4605      	mov	r5, r0
 800c286:	460c      	mov	r4, r1
 800c288:	b913      	cbnz	r3, 800c290 <_fflush_r+0x10>
 800c28a:	2500      	movs	r5, #0
 800c28c:	4628      	mov	r0, r5
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	b118      	cbz	r0, 800c29a <_fflush_r+0x1a>
 800c292:	6983      	ldr	r3, [r0, #24]
 800c294:	b90b      	cbnz	r3, 800c29a <_fflush_r+0x1a>
 800c296:	f7fe f951 	bl	800a53c <__sinit>
 800c29a:	4b14      	ldr	r3, [pc, #80]	; (800c2ec <_fflush_r+0x6c>)
 800c29c:	429c      	cmp	r4, r3
 800c29e:	d11b      	bne.n	800c2d8 <_fflush_r+0x58>
 800c2a0:	686c      	ldr	r4, [r5, #4]
 800c2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0ef      	beq.n	800c28a <_fflush_r+0xa>
 800c2aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2ac:	07d0      	lsls	r0, r2, #31
 800c2ae:	d404      	bmi.n	800c2ba <_fflush_r+0x3a>
 800c2b0:	0599      	lsls	r1, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_fflush_r+0x3a>
 800c2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2b6:	f7fe fd52 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f7ff ff59 	bl	800c174 <__sflush_r>
 800c2c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2c4:	07da      	lsls	r2, r3, #31
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	d4e0      	bmi.n	800c28c <_fflush_r+0xc>
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	059b      	lsls	r3, r3, #22
 800c2ce:	d4dd      	bmi.n	800c28c <_fflush_r+0xc>
 800c2d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2d2:	f7fe fd45 	bl	800ad60 <__retarget_lock_release_recursive>
 800c2d6:	e7d9      	b.n	800c28c <_fflush_r+0xc>
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <_fflush_r+0x70>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d101      	bne.n	800c2e2 <_fflush_r+0x62>
 800c2de:	68ac      	ldr	r4, [r5, #8]
 800c2e0:	e7df      	b.n	800c2a2 <_fflush_r+0x22>
 800c2e2:	4b04      	ldr	r3, [pc, #16]	; (800c2f4 <_fflush_r+0x74>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	bf08      	it	eq
 800c2e8:	68ec      	ldreq	r4, [r5, #12]
 800c2ea:	e7da      	b.n	800c2a2 <_fflush_r+0x22>
 800c2ec:	0800d064 	.word	0x0800d064
 800c2f0:	0800d084 	.word	0x0800d084
 800c2f4:	0800d044 	.word	0x0800d044

0800c2f8 <fiprintf>:
 800c2f8:	b40e      	push	{r1, r2, r3}
 800c2fa:	b503      	push	{r0, r1, lr}
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	4805      	ldr	r0, [pc, #20]	; (800c318 <fiprintf+0x20>)
 800c302:	f853 2b04 	ldr.w	r2, [r3], #4
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f7ff fc83 	bl	800bc14 <_vfiprintf_r>
 800c30e:	b002      	add	sp, #8
 800c310:	f85d eb04 	ldr.w	lr, [sp], #4
 800c314:	b003      	add	sp, #12
 800c316:	4770      	bx	lr
 800c318:	200000e4 	.word	0x200000e4

0800c31c <_lseek_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d07      	ldr	r5, [pc, #28]	; (800c33c <_lseek_r+0x20>)
 800c320:	4604      	mov	r4, r0
 800c322:	4608      	mov	r0, r1
 800c324:	4611      	mov	r1, r2
 800c326:	2200      	movs	r2, #0
 800c328:	602a      	str	r2, [r5, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	f7f5 fa40 	bl	80017b0 <_lseek>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_lseek_r+0x1e>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_lseek_r+0x1e>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	20013218 	.word	0x20013218

0800c340 <__swhatbuf_r>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	460e      	mov	r6, r1
 800c344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c348:	2900      	cmp	r1, #0
 800c34a:	b096      	sub	sp, #88	; 0x58
 800c34c:	4614      	mov	r4, r2
 800c34e:	461d      	mov	r5, r3
 800c350:	da08      	bge.n	800c364 <__swhatbuf_r+0x24>
 800c352:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	061a      	lsls	r2, r3, #24
 800c35c:	d410      	bmi.n	800c380 <__swhatbuf_r+0x40>
 800c35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c362:	e00e      	b.n	800c382 <__swhatbuf_r+0x42>
 800c364:	466a      	mov	r2, sp
 800c366:	f000 f8c1 	bl	800c4ec <_fstat_r>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	dbf1      	blt.n	800c352 <__swhatbuf_r+0x12>
 800c36e:	9a01      	ldr	r2, [sp, #4]
 800c370:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c374:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c378:	425a      	negs	r2, r3
 800c37a:	415a      	adcs	r2, r3
 800c37c:	602a      	str	r2, [r5, #0]
 800c37e:	e7ee      	b.n	800c35e <__swhatbuf_r+0x1e>
 800c380:	2340      	movs	r3, #64	; 0x40
 800c382:	2000      	movs	r0, #0
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	b016      	add	sp, #88	; 0x58
 800c388:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c38c <__smakebuf_r>:
 800c38c:	898b      	ldrh	r3, [r1, #12]
 800c38e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c390:	079d      	lsls	r5, r3, #30
 800c392:	4606      	mov	r6, r0
 800c394:	460c      	mov	r4, r1
 800c396:	d507      	bpl.n	800c3a8 <__smakebuf_r+0x1c>
 800c398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	6123      	str	r3, [r4, #16]
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	6163      	str	r3, [r4, #20]
 800c3a4:	b002      	add	sp, #8
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	ab01      	add	r3, sp, #4
 800c3aa:	466a      	mov	r2, sp
 800c3ac:	f7ff ffc8 	bl	800c340 <__swhatbuf_r>
 800c3b0:	9900      	ldr	r1, [sp, #0]
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff fa33 	bl	800b820 <_malloc_r>
 800c3ba:	b948      	cbnz	r0, 800c3d0 <__smakebuf_r+0x44>
 800c3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c0:	059a      	lsls	r2, r3, #22
 800c3c2:	d4ef      	bmi.n	800c3a4 <__smakebuf_r+0x18>
 800c3c4:	f023 0303 	bic.w	r3, r3, #3
 800c3c8:	f043 0302 	orr.w	r3, r3, #2
 800c3cc:	81a3      	strh	r3, [r4, #12]
 800c3ce:	e7e3      	b.n	800c398 <__smakebuf_r+0xc>
 800c3d0:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <__smakebuf_r+0x7c>)
 800c3d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	6020      	str	r0, [r4, #0]
 800c3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	9b00      	ldr	r3, [sp, #0]
 800c3e0:	6163      	str	r3, [r4, #20]
 800c3e2:	9b01      	ldr	r3, [sp, #4]
 800c3e4:	6120      	str	r0, [r4, #16]
 800c3e6:	b15b      	cbz	r3, 800c400 <__smakebuf_r+0x74>
 800c3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f000 f88f 	bl	800c510 <_isatty_r>
 800c3f2:	b128      	cbz	r0, 800c400 <__smakebuf_r+0x74>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	f043 0301 	orr.w	r3, r3, #1
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	89a0      	ldrh	r0, [r4, #12]
 800c402:	4305      	orrs	r5, r0
 800c404:	81a5      	strh	r5, [r4, #12]
 800c406:	e7cd      	b.n	800c3a4 <__smakebuf_r+0x18>
 800c408:	0800a4d5 	.word	0x0800a4d5

0800c40c <memmove>:
 800c40c:	4288      	cmp	r0, r1
 800c40e:	b510      	push	{r4, lr}
 800c410:	eb01 0402 	add.w	r4, r1, r2
 800c414:	d902      	bls.n	800c41c <memmove+0x10>
 800c416:	4284      	cmp	r4, r0
 800c418:	4623      	mov	r3, r4
 800c41a:	d807      	bhi.n	800c42c <memmove+0x20>
 800c41c:	1e43      	subs	r3, r0, #1
 800c41e:	42a1      	cmp	r1, r4
 800c420:	d008      	beq.n	800c434 <memmove+0x28>
 800c422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c42a:	e7f8      	b.n	800c41e <memmove+0x12>
 800c42c:	4402      	add	r2, r0
 800c42e:	4601      	mov	r1, r0
 800c430:	428a      	cmp	r2, r1
 800c432:	d100      	bne.n	800c436 <memmove+0x2a>
 800c434:	bd10      	pop	{r4, pc}
 800c436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c43e:	e7f7      	b.n	800c430 <memmove+0x24>

0800c440 <__malloc_lock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_lock+0x8>)
 800c442:	f7fe bc8c 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	2001320c 	.word	0x2001320c

0800c44c <__malloc_unlock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_unlock+0x8>)
 800c44e:	f7fe bc87 	b.w	800ad60 <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	2001320c 	.word	0x2001320c

0800c458 <_realloc_r>:
 800c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45c:	4680      	mov	r8, r0
 800c45e:	4614      	mov	r4, r2
 800c460:	460e      	mov	r6, r1
 800c462:	b921      	cbnz	r1, 800c46e <_realloc_r+0x16>
 800c464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	4611      	mov	r1, r2
 800c46a:	f7ff b9d9 	b.w	800b820 <_malloc_r>
 800c46e:	b92a      	cbnz	r2, 800c47c <_realloc_r+0x24>
 800c470:	f7ff f96a 	bl	800b748 <_free_r>
 800c474:	4625      	mov	r5, r4
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	f000 f858 	bl	800c530 <_malloc_usable_size_r>
 800c480:	4284      	cmp	r4, r0
 800c482:	4607      	mov	r7, r0
 800c484:	d802      	bhi.n	800c48c <_realloc_r+0x34>
 800c486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c48a:	d812      	bhi.n	800c4b2 <_realloc_r+0x5a>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4640      	mov	r0, r8
 800c490:	f7ff f9c6 	bl	800b820 <_malloc_r>
 800c494:	4605      	mov	r5, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	d0ed      	beq.n	800c476 <_realloc_r+0x1e>
 800c49a:	42bc      	cmp	r4, r7
 800c49c:	4622      	mov	r2, r4
 800c49e:	4631      	mov	r1, r6
 800c4a0:	bf28      	it	cs
 800c4a2:	463a      	movcs	r2, r7
 800c4a4:	f7fb fbfe 	bl	8007ca4 <memcpy>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f7ff f94c 	bl	800b748 <_free_r>
 800c4b0:	e7e1      	b.n	800c476 <_realloc_r+0x1e>
 800c4b2:	4635      	mov	r5, r6
 800c4b4:	e7df      	b.n	800c476 <_realloc_r+0x1e>
	...

0800c4b8 <_read_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_read_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f5 f912 	bl	80016f0 <_read>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_read_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_read_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20013218 	.word	0x20013218

0800c4dc <abort>:
 800c4dc:	b508      	push	{r3, lr}
 800c4de:	2006      	movs	r0, #6
 800c4e0:	f000 f856 	bl	800c590 <raise>
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	f7f5 f8f9 	bl	80016dc <_exit>
	...

0800c4ec <_fstat_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d07      	ldr	r5, [pc, #28]	; (800c50c <_fstat_r+0x20>)
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	f7f5 f93e 	bl	800177a <_fstat>
 800c4fe:	1c43      	adds	r3, r0, #1
 800c500:	d102      	bne.n	800c508 <_fstat_r+0x1c>
 800c502:	682b      	ldr	r3, [r5, #0]
 800c504:	b103      	cbz	r3, 800c508 <_fstat_r+0x1c>
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	bd38      	pop	{r3, r4, r5, pc}
 800c50a:	bf00      	nop
 800c50c:	20013218 	.word	0x20013218

0800c510 <_isatty_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_isatty_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 f93d 	bl	800179a <_isatty>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_isatty_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_isatty_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20013218 	.word	0x20013218

0800c530 <_malloc_usable_size_r>:
 800c530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c534:	1f18      	subs	r0, r3, #4
 800c536:	2b00      	cmp	r3, #0
 800c538:	bfbc      	itt	lt
 800c53a:	580b      	ldrlt	r3, [r1, r0]
 800c53c:	18c0      	addlt	r0, r0, r3
 800c53e:	4770      	bx	lr

0800c540 <_raise_r>:
 800c540:	291f      	cmp	r1, #31
 800c542:	b538      	push	{r3, r4, r5, lr}
 800c544:	4604      	mov	r4, r0
 800c546:	460d      	mov	r5, r1
 800c548:	d904      	bls.n	800c554 <_raise_r+0x14>
 800c54a:	2316      	movs	r3, #22
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	f04f 30ff 	mov.w	r0, #4294967295
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c556:	b112      	cbz	r2, 800c55e <_raise_r+0x1e>
 800c558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c55c:	b94b      	cbnz	r3, 800c572 <_raise_r+0x32>
 800c55e:	4620      	mov	r0, r4
 800c560:	f000 f830 	bl	800c5c4 <_getpid_r>
 800c564:	462a      	mov	r2, r5
 800c566:	4601      	mov	r1, r0
 800c568:	4620      	mov	r0, r4
 800c56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c56e:	f000 b817 	b.w	800c5a0 <_kill_r>
 800c572:	2b01      	cmp	r3, #1
 800c574:	d00a      	beq.n	800c58c <_raise_r+0x4c>
 800c576:	1c59      	adds	r1, r3, #1
 800c578:	d103      	bne.n	800c582 <_raise_r+0x42>
 800c57a:	2316      	movs	r3, #22
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	2001      	movs	r0, #1
 800c580:	e7e7      	b.n	800c552 <_raise_r+0x12>
 800c582:	2400      	movs	r4, #0
 800c584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c588:	4628      	mov	r0, r5
 800c58a:	4798      	blx	r3
 800c58c:	2000      	movs	r0, #0
 800c58e:	e7e0      	b.n	800c552 <_raise_r+0x12>

0800c590 <raise>:
 800c590:	4b02      	ldr	r3, [pc, #8]	; (800c59c <raise+0xc>)
 800c592:	4601      	mov	r1, r0
 800c594:	6818      	ldr	r0, [r3, #0]
 800c596:	f7ff bfd3 	b.w	800c540 <_raise_r>
 800c59a:	bf00      	nop
 800c59c:	200000e4 	.word	0x200000e4

0800c5a0 <_kill_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d07      	ldr	r5, [pc, #28]	; (800c5c0 <_kill_r+0x20>)
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	602b      	str	r3, [r5, #0]
 800c5ae:	f7f5 f885 	bl	80016bc <_kill>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d102      	bne.n	800c5bc <_kill_r+0x1c>
 800c5b6:	682b      	ldr	r3, [r5, #0]
 800c5b8:	b103      	cbz	r3, 800c5bc <_kill_r+0x1c>
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	bd38      	pop	{r3, r4, r5, pc}
 800c5be:	bf00      	nop
 800c5c0:	20013218 	.word	0x20013218

0800c5c4 <_getpid_r>:
 800c5c4:	f7f5 b872 	b.w	80016ac <_getpid>

0800c5c8 <_sbrk>:
 800c5c8:	4a04      	ldr	r2, [pc, #16]	; (800c5dc <_sbrk+0x14>)
 800c5ca:	6811      	ldr	r1, [r2, #0]
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	b909      	cbnz	r1, 800c5d4 <_sbrk+0xc>
 800c5d0:	4903      	ldr	r1, [pc, #12]	; (800c5e0 <_sbrk+0x18>)
 800c5d2:	6011      	str	r1, [r2, #0]
 800c5d4:	6810      	ldr	r0, [r2, #0]
 800c5d6:	4403      	add	r3, r0
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	4770      	bx	lr
 800c5dc:	2001321c 	.word	0x2001321c
 800c5e0:	20013220 	.word	0x20013220

0800c5e4 <_init>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	bf00      	nop
 800c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ea:	bc08      	pop	{r3}
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	4770      	bx	lr

0800c5f0 <_fini>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	bf00      	nop
 800c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f6:	bc08      	pop	{r3}
 800c5f8:	469e      	mov	lr, r3
 800c5fa:	4770      	bx	lr
